<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ember CLI Mirage</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-03-21T01:25:47-04:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Mirage 0.3.0 beta series</title>
   <link href="http://localhost:4000/blog/2017/01/09/0-3-0-beta-series/"/>
   <updated>2017-01-09T00:00:00-05:00</updated>
   <id>http://localhost:4000/blog/2017/01/09/0-3-0-beta-series</id>
   <content type="html">&lt;p&gt;I’ve started the beta series of Mirage v0.3.0. You can install the latest release (0.3.0-beta.4 as of this writing) with&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember install ember-cli-mirage@beta
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Recent updates to the ORM required some breaking changes, which is why I’m bumping Mirage’s “major” version from 0.2 to 0.3. I’m hoping this is the last release series before landing a 1.0 final.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;The ORM that was added in 0.2 has proved useful, and recent factory enhancements (the &lt;code class=&quot;highlighter-rouge&quot;&gt;afterCreate&lt;/code&gt; hook along with traits and associations) have really improved the ergonomics of creating complex object graphs.&lt;/p&gt;

&lt;p&gt;The biggest challenge since the 0.2 release has been the ORM’s lack of support for several relationship types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;one-way&lt;/li&gt;
  &lt;li&gt;one-to-one&lt;/li&gt;
  &lt;li&gt;many-to-many&lt;/li&gt;
  &lt;li&gt;reflexive&lt;/li&gt;
  &lt;li&gt;polymorphic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I went ahead with the 0.2.0 release anyway, because the serialization layer made working with JSON:API so much more pleasant. However, ever since the release users have been forced to write custom code in order to deal with these missing relationship types.&lt;/p&gt;

&lt;p&gt;When I began work on these missing types several months ago, I expected it to be relatively simple. Mirage’s ORM was based off of ActiveRecord, and I felt I had a good understanding of the APIs that needed to be implemented. I started with one-to-one relationships, and nearly finished before I encountered a fundamental problem.&lt;/p&gt;

&lt;p&gt;In Rails, relationships are mapped on top of databases. Databases have fixed, known schemas, and ActiveRecord’s APIs are designed to work with these known quantities. Questions like which records have foreign keys and whether two models are related via has-one or has-many are unambiguous, so ActiveRecord’s API doesn’t need to account for this.&lt;/p&gt;

&lt;p&gt;Modern HTTP APIs, however, are quite different. For example, take the following totally valid JSON:API response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Martin Fowler&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;relationships&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;included&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Refactoring: Improving the Design of Existing Code&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that an author &lt;code class=&quot;highlighter-rouge&quot;&gt;has many&lt;/code&gt; books. But what about the relationship from books to authors? In the response it’s ambiguous. We might assume it’s many-to-one - but we could be wrong. Perhaps our app has the book &lt;em&gt;Refactoring&lt;/em&gt;, which four authors. So the relationship between authors and book could turn out to be many-to-many.&lt;/p&gt;

&lt;p&gt;This is just one example of the ambiguity inherent in many HTTP responses. Trying to make assumptions about the underlying schema can make Mirage’s abstractions even more complicated. In the 0.2 ORM, the &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;belongsTo&lt;/code&gt; helpers always assumed one side of the relationship was “belongs to”, and added a foreign key to it. In the above example, this would mean books would get an &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt; key. But with the need for many to many relationships, this turns out to be wrong. What to do?&lt;/p&gt;

&lt;p&gt;We could have kept the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt; as a default assumption, and then changed it when the user specified both sides. But what if the relationship turned out to be only one-way? You often come across this as well. Even if your backend has the relationship mapped out unambiguously, your API may choose to expose only one side. So, more assumptions like this give rise to even more indirection and unnecessary complexity.&lt;/p&gt;

&lt;p&gt;Further, keeping a foreign key on the belongs-to side at the database level but adding an ids array to the has-many side at the ORM level is an abstraction, and something else developers need to learn. Understanding Mirage’s database structure is still useful for seeding test data and writing test assertions. And the abstractions needed to support all relationship types would be even more complex.&lt;/p&gt;

&lt;p&gt;Putting the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt; foreign key on a book when the user only ever needed an author to have many books (and therefore a &lt;code class=&quot;highlighter-rouge&quot;&gt;bookIds: []&lt;/code&gt; array) turned out to be too confusing, and too much magic. If the user specifies that an author has many books, I decided that an author should simply get a &lt;code class=&quot;highlighter-rouge&quot;&gt;bookIds: []&lt;/code&gt; array to manage the foreign keys — and nothing more. This decision automatically allows for relationships to be one-way only, and it also expands to support the other relationship types. In the event that there &lt;em&gt;is&lt;/em&gt; a bidirectional relationship, the keys would now need to be kept in sync on both sides - which is precisely what I’ve been working on, and is now handled in the 0.3 series. Further, giving models an &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ids&lt;/code&gt; property that corresponds directly to their relationships more closely matches Ember Data’s approach. Overall, it feels like the right decision.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;belongsTo&lt;/code&gt; helpers are still present in 0.3, but they work a bit differently.&lt;/p&gt;

&lt;p&gt;Say we have the following models:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/book.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; helper adds a &lt;code class=&quot;highlighter-rouge&quot;&gt;bookIds&lt;/code&gt; array to each author model that it uses for bookkeeping. If we have an author instance&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then the helper method &lt;code class=&quot;highlighter-rouge&quot;&gt;author.books&lt;/code&gt; will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;author.bookIds&lt;/code&gt; property to find the related books.&lt;/p&gt;

&lt;p&gt;Creating related books updates the &lt;code class=&quot;highlighter-rouge&quot;&gt;ids&lt;/code&gt; property&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;steinbeck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John Steinbeck'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;steinbeck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Of Mice and Men'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;steinbeck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The Grapes of Wrath'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;steinbeck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [ 1, 2 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;as does associating new books&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hemingway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ernest Hemingway'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldMan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The Old Man and the Sea'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;hemingway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldMan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hemingway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;hemingway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [ 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that so far, &lt;em&gt;books themselves don’t have any knowledge of this relationship&lt;/em&gt;. This is the biggest change in the ORM. Before, the book would automatically get an &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt;, and so this would be available in tests, and it would also be sent over in responses as a relationship on the book. But in the case of 0.3, the relationship helpers are one-way. Basically, it works more like Ember Data does.&lt;/p&gt;

&lt;p&gt;This means if you want a book to have an &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt;, you’ll need to also define the relationship on the book:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/book.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;belongsTo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;belongsTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This helper will add an &lt;code class=&quot;highlighter-rouge&quot;&gt;authorId&lt;/code&gt; to the book, and, like Ember Data, look for an implicit inverse on the &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt;. If it can find one, the ORM will keep the ids on both sides of the relationship in sync.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here are some Twiddles showcasing various relationship configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ember-twiddle.com/802cd2f92e8c6c7280f42b054f393097?openFiles=mirage.config.js%2C&quot;&gt;One-Way Has Many&lt;/a&gt;&lt;/strong&gt;. Notice how the author’s keys are updated when you delete a book.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ember-twiddle.com/24d6101792f2932e9c7edf5f0934b02c?openFiles=models.book.js%2C&quot;&gt;One-Way Belongs To&lt;/a&gt;&lt;/strong&gt;. Deleting the author will ensure existing book’s keys are nulled out (i.e. they become orphans so that the database is kept consistent).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ember-twiddle.com/5031fb20898b277fa6aea8fe89571148?openFiles=templates.application.hbs%2C&quot;&gt;One to Many&lt;/a&gt;&lt;/strong&gt;. The keys on both sides of the relationship are kept in sync. If you delete the author, the books become orphaned records with null keys.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ember-twiddle.com/012bd753cb03c7ae375210d47b623ccb?openFiles=mirage.config.js%2C&quot;&gt;One to One&lt;/a&gt;&lt;/strong&gt;. Another bidirectional relationship with keys managed on both sides.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ember-twiddle.com/104407460799f1c16c4c0dc88daf975a?openFiles=templates.application.hbs%2C&quot;&gt;Many to Many&lt;/a&gt;&lt;/strong&gt;. And another.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;Here are my plans for Mirage’s next steps. First, after enough folks try out the beta series we can land 0.3. Then I’ll be able to add polymorphic relationships, which will round out the ORM.&lt;/p&gt;

&lt;p&gt;At this point I’d like to move towards a 1.0 release, barring any glaring issues in the API. Mirage has been around for nearly two years and plenty of people are using it. It’s past time we hit an official major version and lock down the API.&lt;/p&gt;

&lt;p&gt;After 1.0, I’d like to move forward on an Ember Data integration layer, which is now possible since Mirage’s ORM is able to represent Ember Data’s possible schemas. The layer would simply read in your application’s Ember Data schema and reproduce it in-memory for Mirage’s ORM to use. This would yield big ergonomic gains for users of the library, as you’d no longer need to duplicate your Ember Data models for Mirage, and also lower the learning curve for new users.&lt;/p&gt;

&lt;p&gt;There are several more features I want to move forward on now that the core API is stabilizing. Getting Mirage to be able to run in Node in an Express server would be great, since responses would be real HTTP responses, developers could use the network tab and more.&lt;/p&gt;

&lt;p&gt;My primary goal in 2017 is delegation. For too long my personal availability has been a bottleneck for Mirage’s development. I am going to focus on finding contributors and planning instead of actual implementation. It should help move the library forward faster while getting more folks knowledgeable about the internals, while also freeing up my time to focus more on &lt;a href=&quot;https://embermap.com/&quot;&gt;my business&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’d like to help, join #ec-mirage on Ember’s slack community and reach out! Also be sure to drop a message there or open an issue if you have any feedback on 0.3.&lt;/p&gt;

&lt;p&gt;I’m so happy to be part of such an awesome community and look forward to seeing you at SoEmber and EmberConf. Here’s to an exciting 2017!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mirage 0.2.0 released</title>
   <link href="http://localhost:4000/blog/2016/05/31/0-2-0-released/"/>
   <updated>2016-05-31T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2016/05/31/0-2-0-released</id>
   <content type="html">&lt;p&gt;Mirage v0.2.0 has been released! Check out &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/releases/tag/v0.2.0-beta.9&quot;&gt;the release notes&lt;/a&gt; for the breaking changes and enhancements from 0.2.0-beta.9. Also see &lt;a href=&quot;https://blog.abuiles.com/blog/2016/05/27/upgrading-to-mirage-v0-dot-2-0-beta-dot-9-with-jscodeshift/&quot;&gt;Adolfo’s script&lt;/a&gt; to help with some of the breaking changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;beta.7&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;beta.9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re upgrading an app from 0.1.x to 0.2, be sure to read through &lt;a href=&quot;http://www.ember-cli-mirage.com/docs/v0.2.x/&quot;&gt;the 0.2.x docs&lt;/a&gt;. When you’re ready to upgrade, consult &lt;a href=&quot;http://www.ember-cli-mirage.com/docs/v0.2.x/upgrading/&quot;&gt;the upgrade guide&lt;/a&gt;, and open an issue if the guide left something out.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Even though there’s more work I want to do to smooth out the API in a few places, it’s time to get 0.2 released. Most (if not all) of the planned changes should be backwards compatible with 0.2, so users should start using 0.2 today.&lt;/p&gt;

&lt;p&gt;Next, I’m hoping to address two of the biggest pain points I saw during the beta series:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Creating object graphs in tests.&lt;/strong&gt; Currently, seeding Mirage with a graph of related data looks something like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let author = server.create('author');
 let post1 = server.create('post', { author });
 server.createList('comment', 10, { post: post1 });

 let post2 = server.create('post', { author });
 server.createList('comment', 5, { post: post2 });
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Two features planned for the factory layer will help with this: an &lt;code class=&quot;highlighter-rouge&quot;&gt;afterCreate&lt;/code&gt; hook, and &lt;code class=&quot;highlighter-rouge&quot;&gt;traits&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Responding with has-one or many-to-many relationships in the Serializer.&lt;/strong&gt; Originally I was going to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;hasAndBelongsToMany&lt;/code&gt; helper to solve this, but now I think &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/issues/754&quot;&gt;ad hoc Serializer methods&lt;/a&gt; is a better short-term solution, and something I wanted to add anyway. Some folks are keen on getting this working, so hopefully it will land soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks to everyone who braved the beta series, you were crucial to all the iterations on the API, and to all the amazing contributors who helped push it through!&lt;/p&gt;

&lt;p&gt;Happy coding everyone!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mirage 0.2.0-beta.9 released</title>
   <link href="http://localhost:4000/blog/2016/01/03/0-2-0-beta.9-released/"/>
   <updated>2016-05-13T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2016/01/03/0-2-0-beta.9-released</id>
   <content type="html">&lt;p&gt;Mirage v0.2.0-beta.9 has been released. Check out &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/releases/tag/v0.2.0-beta.9&quot;&gt;the release notes&lt;/a&gt; for the breaking changes and enhancements.&lt;/p&gt;

&lt;h2 id=&quot;update-on-a-02-stable-release&quot;&gt;Update on a 0.2 stable release&lt;/h2&gt;

&lt;p&gt;I wanted to jot down some of my recent thoughts while putting this release together. Pardon the rambling.&lt;/p&gt;

&lt;p&gt;Originally I had planned for beta.9 to be the last beta release before cutting 0.2. Since folks have started using the 0.2 beta series, however, pain points around data modeling have been cropping up. In particular, dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;has-one&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;many-to-many&lt;/code&gt; associations is quite difficult with the current set of abstractions.&lt;/p&gt;

&lt;p&gt;My first thought was to ship 0.2 as is, and then work on adding helpers for &lt;code class=&quot;highlighter-rouge&quot;&gt;hasAndBelongsToMany&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOne&lt;/code&gt;. After some more thought &amp;amp; discussions with various users, I realized that the ORM’s abstractions might be a touch off. Let me explain.&lt;/p&gt;

&lt;p&gt;Mirage’s ORM was built to support features like JSON:API includes and the planned factory relationships. The ORM is a way to encode association information, since there was no good place to do this in &lt;code class=&quot;highlighter-rouge&quot;&gt;v0.1&lt;/code&gt;. My approach was to largely mimic server-side frameworks like Rails, since they’ve already solved this problem. After all, your models already live on the backend in database tables, so why not use the same concepts? Tables with foreign keys are familiar to backend devs, so let’s just emulate those concepts in Mirage.&lt;/p&gt;

&lt;p&gt;So, that’s been the plan so far. The ORM has working &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;belongsTo&lt;/code&gt; associations, and those take care of many cases. The &lt;code class=&quot;highlighter-rouge&quot;&gt;manyToMany&lt;/code&gt; case is interesting, though, because there’s not necessarily a standard conventional way that all Ember developers or servers approach this problem.&lt;/p&gt;

&lt;p&gt;Take a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;belongsTo&lt;/code&gt;, like a &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; that belongs to an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; probably owns the foreign key, something like &lt;code class=&quot;highlighter-rouge&quot;&gt;author_id&lt;/code&gt;. Persisting this relationship, then, is as simple as saving any other attribute on the &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /api/posts/1

{
  post: {
    id: 1,
    title: 'Hipster ipsum',
    author_id: 24
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;author_id&lt;/code&gt; is all that’s needed to tell both Ember Data and the server about the new relationship.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; is where things start to get tricky. Let’s assume we’ve also defined the inverse of the above relationship, so an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; has many &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;. If you updated an author with new posts, how would you persist those new relationships?&lt;/p&gt;

&lt;p&gt;As above, the foreign key on each &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; is all that’s needed to tell both the frontend and the backend about the new relationship, so typically I would handle it like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;post1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;post1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;post2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;post2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and so on. You can write code that batches these requests, but the point here is that this is pretty straightforward stuff. Persisting a relationship is just boring old CRUD on a resource.&lt;/p&gt;

&lt;p&gt;Interestingly, the &lt;a href=&quot;https://guides.emberjs.com/v2.5.0/models/relationships/#toc_creating-records&quot;&gt;Ember Data guides&lt;/a&gt; show code that suggests persisting a &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; relationship by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; on the parent, which looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, Ember Data can understand this, and in fact this is how some teams work. But what does the request/response look like? Maybe something like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /authors/1
{
  author: {
    id: 1,
    name: 'Frank',
    post_ids: [1, 3]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a request to update a single &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; resource - but behind the scenes, is your backend actually updating the foreign keys on two different post records? If so, we’ve kind of moved out of the realm of doing boring CRUD on resources, because now our server is doing something different or more than what we asked of it: we asked it to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;author:1&lt;/code&gt; resource, and in reality it’s updating two other &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; resources. Interestingly I’ve asked several folks in the community how they deal with this issue, and the response varies.&lt;/p&gt;

&lt;p&gt;The story gets even trickier with many-to-many relationships. Sometimes people model the join record in their Ember apps, sometimes they don’t. If they don’t, a PUT to an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; resource could actually be &lt;em&gt;creating&lt;/em&gt; multiple server resources behind the scenes, via a join table.&lt;/p&gt;

&lt;p&gt;This obviously has implications for Mirage, which works best with conventional server endpoints. A PUT to a resource updates that resource, and so on. But plenty of people write their servers this way, and it got me thinking: perhaps database tables and foreign keys are the wrong abstraction for Mirage to emulate. Perhaps transport of HTTP resources is a bit more generic and abstract than that.&lt;/p&gt;

&lt;p&gt;Take, for example, the following Ember Data model definitions:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// models/post.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// models/category.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That is a perfectly valid and legitimate domain model. By looking at those two models, can you tell me which entity owns the foreign key? Nope. In fact, you don’t even know if this is a one-to-many or many-to-many relationship. And yet, from the perspective of HTTP resources (including a valid implementation of a JSON:API server), this is totally valid.&lt;/p&gt;

&lt;p&gt;Here’s the JSON:API response, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /posts/1?include=categories

{
  data: {
    type: 'posts',
    id: 1,
    relationships: {
      categories: [
        {
          data: {
            type: 'categories',
            id: '2'
          }
        },
        {
          data: {
            type: 'categories',
            id: '5'
          }
        }
      ]
    }
  },
  included: [
    {
      type: 'categories',
      id: '2',
      attributes: {
        name: 'Economics'
      }
    },
    {
      type: 'categories',
      id: '5',
      attributes: {
        name: 'Programming'
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Totally valid, and also impossible to ascertain whether this is a one-to-many or many-to-many relationship.&lt;/p&gt;

&lt;p&gt;Basing Mirage’s ORM on database tables and foreign keys makes some things really easy and familiar, but for these situations it’s a pain. If your actual Ember app and your actual server can handle a request like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /posts/1
{
  post: {
    id: 1,
    tag_ids: [1, 4]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;just fine, you shouldn’t have to add extra logic or models to make your fake Mirage server work.&lt;/p&gt;

&lt;p&gt;The solution I have in mind for this problem is to replace the foreign key implementation with an associations map. This map will be a singleton that all models will have a reference to, and it will be used to persist model relationships.&lt;/p&gt;

&lt;p&gt;The external API of Mirage’s ORM won’t change. For example, say you had a &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; that has many &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mirage/models/post.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Currently (in 0.2.0-beta.9), Mirage makes an assumption here that the &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; resource has an &lt;code class=&quot;highlighter-rouge&quot;&gt;author_id&lt;/code&gt; foreign key. As we’ve just shown, this is potentially a false assumption. My previous plan was to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;hasAndBelongsToMany&lt;/code&gt; helper for many-to-many relationships. Then, if this relationship turned out to be a many-to-many, the user would need to do something like the following:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasAndBelongsToMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would tell Mirage to transparently create a &lt;code class=&quot;highlighter-rouge&quot;&gt;author-post&lt;/code&gt; join table, and deal with the persistence there.&lt;/p&gt;

&lt;p&gt;Again, this now feels like the wrong abstraction, and it also introduces concepts that aren’t necessarily appropriate for the domain of the frontend. Instead, the original domain model with the &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; declaration will add an &lt;code class=&quot;highlighter-rouge&quot;&gt;author.posts&lt;/code&gt; key to the singleton associations map, where all the relationship data can be stored. This has an added benefit of simplifying Mirage’s interface for creating relationships in factories and elsewhere, as now developers will be able to do things like&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;categoryIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in their tests, similar to what they’re used to doing in Ember Data. We can also make Mirage’s shorthands understand both forms of saving &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt; relationships, since the ids on the models will just be pointers to the associations map. Serializers can be used to customize which ids are sent along with the response.&lt;/p&gt;

&lt;p&gt;This change will also make it easier to ascertain all model information from an existing set of Ember Data models in the future. I’m confident the overall learning curve will be easier and resulting code will be cleaner.&lt;/p&gt;

&lt;p&gt;While this will take a bit more time to get right, I think it’s important. I also feel like I have a better grasp of something important, namely that Mirage as an HTTP faking layer should not necessarily emulate various server abstractions, but rather focus on concepts that come from HTTP. It turns out that single-owner foreign keys is not one of those concepts, and therefore this abstraction does not belong in Mirage.&lt;/p&gt;

&lt;p&gt;I’ll probably release 0.2, and work the associations map into a 0.3 release. Still thinking this through, though.&lt;/p&gt;

&lt;p&gt;My closing thought is that these HTTP concepts are crucial to understand if you’re going to write an Ember app, and they can’t just be left to the backend team. It’s true that a frontend developer doesn’t need to know that Rails has a &lt;code class=&quot;highlighter-rouge&quot;&gt;has_and_belongs_to_many&lt;/code&gt; method that abstracts away join tables on many-to-many relationships; however, the developer does need to understand how her Ember app will retrieve and persist many-to-many relationships across the network. Domain modeling and HTTP transport is a central part of Ember development and unfortunately at the moment, many parts of it are still non-standard and unconventional.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mirage 0.2 update</title>
   <link href="http://localhost:4000/blog/2016/01/03/0-2-update-only-inject-schema/"/>
   <updated>2016-01-03T00:00:00-05:00</updated>
   <id>http://localhost:4000/blog/2016/01/03/0-2-update-only-inject-schema</id>
   <content type="html">&lt;p&gt;Here’s a quick update on Mirage 0.2.&lt;/p&gt;

&lt;p&gt;When I started working on the ORM/Serializer layer, I knew we were going to need to bump Mirage to 0.2. However, I thought it was worth keeping the library completely backwards compatible. I wanted users to be able to update to 0.2 without breaking any of their existing route handlers.&lt;/p&gt;

&lt;p&gt;The more I learned while developing, the more I realized some of the assumptions I made in 0.1 were simply bad. For example, using the formatting of fixture files (including their names) to determine the format of JSON responses from mocked routes.&lt;/p&gt;

&lt;p&gt;Now that we have a proper ORM and serializer layer, I’d like the story for how to set up your mock server to be clear, especially to newcomers.&lt;/p&gt;

&lt;p&gt;In 0.1, route handlers receive the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; as the first argument:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This made sense in a world where there was only a &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;, acting as a dumb data store, and all formatting decisions were left up to the user.&lt;/p&gt;

&lt;p&gt;Then, we added the ORM and Serializer. Originally, the idea was, if you defined your models - that is, if you opted in to Mirage’s ORM - we’d inject a &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt; object instead of the comparatively dumb &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This returned a User Collection, which the Serializer layer knew how to serialize.&lt;/p&gt;

&lt;p&gt;This has been working well - but obviously, this is a breaking change for old route handlers. I also wanted people to be able to opt-in to the ORM layer, but still be able to dive into the raw &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; if they ever wanted to. &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; is an object that hangs directly off of &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt;, so you can always access it, even if you’ve opted in to the ORM:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would bypass the model-specific serializers.&lt;/p&gt;

&lt;p&gt;ES6 destructring makes this even better:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Given this, I feel it’s worth making the breaking change, and &lt;em&gt;only&lt;/em&gt; injecting &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt; to route handlers. The upgrade path for existing route handlers should be a simple change:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- this.get('/users', (db) =&amp;gt; {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ this.get('/users', ({db}) =&amp;gt; {
&lt;/span&gt;    return db.users;
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;along with possibly specifying a default Application serializer.&lt;/p&gt;

&lt;p&gt;The main reason I want to make this change, is to simplify the story around how Mirage data gets set up. In 0.1, Mirage looked for defined fixtures and/or factories to set up its database. In traditional server frameworks (e.g. Rails), you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt; file that specifies the schema of your db. Using a mixture of fixtures and factories is confusing and unnecessary. Further, factories should be seen as an extension of the models (db collections) they’re creating, rather than their definitions.&lt;/p&gt;

&lt;p&gt;This is why going forward, the story for configuring Mirage will be a unified one: Models define your schema/database. So, new users will define models for each table/collection they want in their Mirage mock server. That sets up the database tables, and also gives the user a very easy starting point when they &lt;em&gt;do&lt;/em&gt; want to opt into the relationship/serializer support. &lt;code class=&quot;highlighter-rouge&quot;&gt;server.create&lt;/code&gt; will still use a factory if it exists, but if no factory exists, it will simply create an empty model.&lt;/p&gt;

&lt;p&gt;I’m confident this change will make Mirage simpler and more approachable. The downside is, existing users will need to define blank models for each collection they have. We’ll have a generator, which will help some, but this could prove to be annoying. My hope is that having a single &lt;code class=&quot;highlighter-rouge&quot;&gt;/models&lt;/code&gt; directory, while being able to delete empty factory and fixture files, will simplify things. Also, this paves the way for a planned future addon, &lt;code class=&quot;highlighter-rouge&quot;&gt;mirage-ember-data&lt;/code&gt;. The purpose of this addon is to ascertain, at run-time, the server models and their relationships, based on a user’s Ember Data models. This would eliminate the need to define models again, in Mirage-land.&lt;/p&gt;

&lt;p&gt;This addon is still a ways off, but this change - enforcing users to simply define their models as the single source of truth for their backend schema - paves the way.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You can see all the open items left before we release 0.2.0 &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/issues?q=is%3Aopen+is%3Aissue+milestone%3A0.2.0&quot;&gt;here&lt;/a&gt;. Bugs, Help Wanted and Good for New Contributors are great tags to look out for if you’d like to help push us towards release!&lt;/p&gt;

&lt;p&gt;If you have any thoughts or comments, tweet @samselikoff or &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/issues&quot;&gt;open an issue&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Video: Inside Ember CLI Mirage</title>
   <link href="http://localhost:4000/blog/2015/11/03/inside-ember-cli-mirage/"/>
   <updated>2015-11-03T00:00:00-05:00</updated>
   <id>http://localhost:4000/blog/2015/11/03/inside-ember-cli-mirage</id>
   <content type="html">&lt;p&gt;On October 10 I spoke at the Global Ember Meetup about why I built Mirage, and what’s planned for the next version. Here’s the video:&lt;/p&gt;

&lt;div class=&quot;fixed-ratio fixed-ratio-video&quot;&gt;
    &lt;iframe src=&quot;https://player.vimeo.com/video/144256352&quot; class=&quot;fixed-ratio-inner&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Serializers are ready for testing</title>
   <link href="http://localhost:4000/blog/2015/10/19/serializers-ready/"/>
   <updated>2015-10-19T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2015/10/19/serializers-ready</id>
   <content type="html">&lt;p&gt;Yesterday I merged in the &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/commit/9927a7f7a2232ddf8df15e01991e538eefadee9c&quot;&gt;JSON:API Serializer&lt;/a&gt;, which is the last piece of planned work I have for the serializer layer. That means it’s ready to test! I’m sure there’s plenty I haven’t thought of yet, but I think it’s time to get some people kicking the tires.&lt;/p&gt;

&lt;p&gt;For the brave, I’ll be writing documentation this week about how to take advantage of the ORM and Serializer layer in your route handlers. Migration will be at your own pace: you should be able to switch over, keep old custom route handlers that access the db directly, and switch them over one at a time to use the new &lt;code&gt;schema&lt;/code&gt; object - the ORM. Using a schema in your route handler lets you respond with a model or collection, which is the basis for your serializers knowing how to transform your response into an appropriately-formatted JSON payload.&lt;/p&gt;

&lt;p&gt;The docs should be landing soon. But, the code is already in master (since the entire ORM is opt-in) - so, for the &lt;em&gt;truly&lt;/em&gt; brave, you can try this out right now, by doing something like the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upgrade to master (“samselikoff/ember-cli-mirage” in your package.json)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define your models. For each model create a file under &lt;code class=&quot;highlighter-rouge&quot;&gt;mirage/models&lt;/code&gt; that looks like the following:&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// mirage/models/post.js&lt;/span&gt;
 &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Use the singular version of your model for the filename.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define your serializer. There are two named serializers, JSON:API and ActiveModelSerializer. You can customize these as well the basic Serializer that’s also included.&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// mirage/serializers/application.js&lt;/span&gt;
 &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Serializer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage/serializers/json-api-serializer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you do the above, Mirage will now be using an ORM. This means your custom route handlers will no longer have the signature&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;but rather&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;where &lt;code&gt;schema&lt;/code&gt; is the ORM object. Fortunately, the &lt;code&gt;db&lt;/code&gt; is available at &lt;code&gt;schema.db&lt;/code&gt;. This means you can give your old route handlers access to the &lt;code&gt;db&lt;/code&gt; by doing the following refactoring:&lt;/p&gt;

    &lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - this.get('/some/path', function(db, request), {
 + this.get('/some/path', function({db}, request), {
    // your custom route handler
 });
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Not bad, thanks to the magic of ES6 object destructuring!&lt;/p&gt;

    &lt;p&gt;Additionally, the ORM standardizes the formatting of database attributes and collections. Previously, for example, the name of the database collection was based on the filename of your fixture or factory - so, you could have a collection called &lt;code&gt;db.blog_posts&lt;/code&gt;. With the ORM, everything is camel-cased (we are writing JS, after all). So, this may necessitate some refactoring of your custom route handler code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adding relationship support looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mirage/models/post.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;belongsTo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ember-cli-mirage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;belongsTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mirage/serializers/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApplicationSerializer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./application'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApplicationSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;relationships&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and now, the GET shorthands to &lt;code&gt;/authors&lt;/code&gt; should return included posts!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s just a taste of what’s to come! I want to reiterate this is very new and I basically don’t suggest using it. But, if you’re feeling adventurous, dive in! I would love to hear any feedback. If you do try it out, hit me up on Slack if you have questions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Refactoring Server, adding a Route Handler object</title>
   <link href="http://localhost:4000/blog/2015/09/15/router-handler/"/>
   <updated>2015-09-15T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2015/09/15/route-handler</id>
   <content type="html">&lt;p&gt;Updating the shorthands to work with the serializer layer proved harder than I thought. Serializers made it clear that the shorthands were making assumptions about the shape of the JSON payload. Now that users will be able to use serializers to transform how their data looks going out, I’ll also need a way for them to specify how the data looks coming in. This is similar to Ember Data’s &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;If a user is using a PUT or POST shorthand, I’ll need to first deserialize the payload into a standard format, so the shorthands know what to do with it. I’ll use the JSON:API format for the standard; that way, if you’re using JSON:API, &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize&lt;/code&gt; will be a no-op, and AMS-style responses will simply convert to JSON:API.&lt;/p&gt;

&lt;p&gt;This sounds a lot like Ember Data, and I’ve even considered using Ember Data for the data store/identity map portion of Mirage; but at this point, there are still too many unknowns. I’d rather get the rest of the main features incorporated + wait for the API to stabilize, before making such a big decision.&lt;/p&gt;

&lt;p&gt;Mirage’s ORM has very different needs than Ember Data’s: it’s a synchronous in-memory store, and while ED also has a clientside store, it was designed around an async layer, incorporates Ember.Object for KVO, requires attr declarations, and much more. Mirage’s orm uses &lt;code class=&quot;highlighter-rouge&quot;&gt;object.defineProperty&lt;/code&gt; to keep things as lightweight as possible, so you’ll be able to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.createPost&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;user.posts = [1]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;post.user = user&lt;/code&gt; etc. in your routes. Adding the ceremony of  &lt;code class=&quot;highlighter-rouge&quot;&gt;.get(), &lt;/code&gt;.set()&lt;code class=&quot;highlighter-rouge&quot;&gt;, and &lt;/code&gt;createRecord` everywhere would make Mirage feel like more of a burden, and I think it’s important to try to keep things as slim and easy-to-use as possible, given that Mirage is designed for mocking.&lt;/p&gt;

&lt;p&gt;In any case, the shorthands were originally simple functions that were unit tested. Now that there’s a bit more going on, I felt the need to refactor the server/controller code a bit. I also got around to slimming down the initializer, moving that code to the Server, and moving a lot of route-handling-related code from Server to a new RouteHandler class. My next step will be to turn the shorthand functions into RouteHandlers (probably subclasses), which will hopefully provide some direction on how the data will flow from request, through normalize, to the shorthands and out to a response.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The ORM is not ready, yet</title>
   <link href="http://localhost:4000/blog/2015/09/10/orm-not-ready-yet/"/>
   <updated>2015-09-10T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2015/09/10/orm-not-ready</id>
   <content type="html">&lt;p&gt;I wanted to quickly note that, although &lt;a href=&quot;https://github.com/samselikoff/ember-cli-mirage/pull/82&quot;&gt;the models PR&lt;/a&gt; has been merged into master, it is not quite ready for use. To be really effective, Mirage also needs a serializer layer (in progress), and an update to the factory layer (to support associations and traits).&lt;/p&gt;

&lt;p&gt;My plan is to document all three of these features (models, serializers and updated factories) at once, since they all rely on the orm, and will all require you to write simple model definitions to take advantage of.&lt;/p&gt;

&lt;p&gt;Once you add a model definition, say by defining an &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; model&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mirage/models/author.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mirage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mirage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then you opt into the orm. Now, routes will get a &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt; object injected instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; (the &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; will be accessible via &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.db&lt;/code&gt;), and shorthands and factories will leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;schema&lt;/code&gt;, and you’ll be able to use serializers as well.&lt;/p&gt;

&lt;p&gt;I’ve hit some snags writing serializers, and there’s a lot of hidden complexity in this effort, but I’m hoping I can wrap this all up in the next few weeks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thoughts on model attribute formatting</title>
   <link href="http://localhost:4000/blog/2015/09/06/thoughts-on-model-attribute-formatting/"/>
   <updated>2015-09-06T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2015/09/06/thoughts-on-model-attribute-formatting</id>
   <content type="html">&lt;p&gt;I ran into an interesting problem while working on the serializer layer. I was just wrapping up AMS-style responses and was going to start working on the JSON:API version, when a wrinkle came up: the formatting of attribute names, both on Mirage’s model layer instances, and on the field names of Mirage’s database.&lt;/p&gt;

&lt;p&gt;Currently, Mirage’s database simply takes whatever POJO of attrs you give it, and sticks that in its db. So if you write&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Link'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then you’ll end up with that POJO in the db, but if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;first-name&lt;/code&gt;, you’ll get that instead. This was originally done to make things as simple as possible - your db fields matched your API responses, so fixtures would “just work”, and accessing the data is as you’d expect based on your API.&lt;/p&gt;

&lt;p&gt;When I introduced the model layer, I added attr accessors that simply matched the keys in the db. But right now, it’s a naive implementation that just wraps the db attrs. So, if you’re working with a &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; model (e.g. in your route handler), you would either access &lt;code class=&quot;highlighter-rouge&quot;&gt;user.first_name&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;user['first-name']&lt;/code&gt;, depending on how your database looked.&lt;/p&gt;

&lt;p&gt;It seems like attrs on models should be consistently camelCase. One would expect to write &lt;code class=&quot;highlighter-rouge&quot;&gt;user.firstName&lt;/code&gt; on a JavaScript model. That’s the convention. I &lt;em&gt;could&lt;/em&gt; keep the model’s attrs in the format of your API (i.e. whatever’s in your db), so we’d have something like &lt;code class=&quot;highlighter-rouge&quot;&gt;user.first_name&lt;/code&gt;. But, what happens when you switch your app over to JSON:API? Now, you have to rewrite all the custom parts of your Mirage server, since it’s now &lt;code class=&quot;highlighter-rouge&quot;&gt;user['first-name']&lt;/code&gt; in JSON:API. That’s pretty crappy. Not to mention, the dynamic methods added by the model layer, like &lt;code class=&quot;highlighter-rouge&quot;&gt;user.createPost&lt;/code&gt;, should probably be consistent across API formats.&lt;/p&gt;

&lt;p&gt;So, I think models should have camelCase attributes. That way you’re always using camelCase, regardless of the format of your API - which makes sense, since you’re writing a (mock) JavaScript server.&lt;/p&gt;

&lt;p&gt;This presents an interesting challenge. How should the db fields be formatted? There’s three ways to create db data. Fixture files, factories, and using the ORM in a route handler (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.user.create(...)&lt;/code&gt;). The latter two seem like they should be camelCase (again, you don’t want to have to update all your factories if you change from AMS to JSON:API…you may have to update some parts of your routes). But fixtures should always “just work”.&lt;/p&gt;

&lt;p&gt;This leads me to think there should be a part of the “serializer layer” that can deserialize an API payload and get the attrs for the model(s), or at least in some way standardize it. This would mean if you change your API, you’d be able to use new fixture files just by specifying your new serializer. Also, it’d make the shorthands more versatile - they could basically use your serializers to deserialize the payload, and then they’d be able to create/update/delete the appropriate models regardless of your API format. Right now, they are coupled to AMS-style responses.&lt;/p&gt;

&lt;p&gt;I’ll have to think more about this, but right now this feels like the right move.&lt;/p&gt;
</content>
 </entry>
 

</feed>
