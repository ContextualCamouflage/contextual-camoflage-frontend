"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('dummy/adapters/application', ['exports', 'active-model-adapter'], function (exports, _activeModelAdapter) {
  exports['default'] = _activeModelAdapter['default'];
});
define('dummy/adapters/word-smith', ['exports', 'ember-data'], function (exports, _emberData) {
  var JSONAPIAdapter = _emberData['default'].JSONAPIAdapter;
  exports['default'] = JSONAPIAdapter;
});
define('dummy/app', ['exports', 'ember', 'dummy/resolver', 'ember-load-initializers', 'dummy/config/environment'], function (exports, _ember, _dummyResolver, _emberLoadInitializers, _dummyConfigEnvironment) {
  var Application = _ember['default'].Application;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Application.extend({
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix,
    Resolver: _dummyResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _dummyConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('dummy/controllers/application', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend();
});
define('dummy/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('dummy/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/assert.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/assert.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/assert.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/association.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/association.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/association.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/db-collection.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/db-collection.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/db-collection.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/db.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/db.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/db.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/factory.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/factory.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/factory.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/faker.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/faker.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/faker.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/index.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/index.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/index.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/associations/association.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/associations/association.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/associations/association.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/associations/belongs-to.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/associations/belongs-to.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/associations/belongs-to.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/associations/has-many.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/associations/has-many.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/associations/has-many.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/collection.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/collection.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/collection.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/model.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/model.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/model.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/orm/schema.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/orm/schema.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/orm/schema.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/response.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/response.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/response.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handler.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handler.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handler.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/base.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/base.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/base.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/function.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/function.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/function.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/object.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/object.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/object.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/base.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/base.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/base.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/delete.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/delete.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/delete.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/get.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/get.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/get.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/head.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/head.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/head.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/post.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/post.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/post.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/route-handlers/shorthands/put.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/route-handlers/shorthands/put.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/route-handlers/shorthands/put.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/serializer-registry.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/serializer-registry.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/serializer-registry.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/serializer.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/serializer.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/serializer.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/serializers/active-model-serializer.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/serializers/active-model-serializer.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/serializers/active-model-serializer.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/serializers/json-api-serializer.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/serializers/json-api-serializer.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/serializers/json-api-serializer.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/serializers/rest-serializer.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/serializers/rest-serializer.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/serializers/rest-serializer.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/server.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/server.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/server.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/trait.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/trait.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/trait.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/extend.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/extend.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/extend.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/inflector.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/inflector.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/inflector.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/is-association.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/is-association.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/is-association.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/normalize-name.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/normalize-name.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/normalize-name.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/read-modules.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/read-modules.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/read-modules.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/reference-sort.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/reference-sort.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/reference-sort.js should pass ESLint.\n');
  });
});
define('dummy/ember-cli-mirage/tests/modules/ember-cli-mirage/utils/uuid.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - modules/ember-cli-mirage/utils/uuid.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-cli-mirage/utils/uuid.js should pass ESLint.\n');
  });
});
define('dummy/helpers/app-version', ['exports', 'ember', 'dummy/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _ember, _dummyConfigEnvironment, _emberCliAppVersionUtilsRegexp) {
  exports.appVersion = appVersion;
  var version = _dummyConfigEnvironment['default'].APP.version;

  function appVersion(_) {
    var hash = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (hash.hideSha) {
      return version.match(_emberCliAppVersionUtilsRegexp.versionRegExp)[0];
    }

    if (hash.hideVersion) {
      return version.match(_emberCliAppVersionUtilsRegexp.shaRegExp)[0];
    }

    return version;
  }

  exports['default'] = _ember['default'].Helper.helper(appVersion);
});
define('dummy/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('dummy/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define("dummy/initializers/active-model-adapter", ["exports", "active-model-adapter", "active-model-adapter/active-model-serializer"], function (exports, _activeModelAdapter, _activeModelAdapterActiveModelSerializer) {
  exports["default"] = {
    name: 'active-model-adapter',
    initialize: function initialize() {
      var application = arguments[1] || arguments[0];
      application.register('adapter:-active-model', _activeModelAdapter["default"]);
      application.register('serializer:-active-model', _activeModelAdapterActiveModelSerializer["default"]);
    }
  };
});
define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _dummyConfigEnvironment) {
  var _config$APP = _dummyConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(name, version)
  };
});
define('dummy/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('dummy/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('dummy/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'dummy/config/environment', 'dummy/mirage/config', 'ember-cli-mirage/server', 'lodash/assign'], function (exports, _emberCliMirageUtilsReadModules, _dummyConfigEnvironment, _dummyMirageConfig, _emberCliMirageServer, _lodashAssign) {
  exports.startMirage = startMirage;
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }

      if (_shouldUseMirage(_dummyConfigEnvironment['default'].environment, _dummyConfigEnvironment['default']['ember-cli-mirage'])) {
        startMirage(_dummyConfigEnvironment['default']);
      }
    }
  };

  function startMirage() {
    var env = arguments.length <= 0 || arguments[0] === undefined ? _dummyConfigEnvironment['default'] : arguments[0];

    var environment = env.environment;
    var modules = (0, _emberCliMirageUtilsReadModules['default'])(env.modulePrefix);
    var options = (0, _lodashAssign['default'])(modules, { environment: environment, baseConfig: _dummyMirageConfig['default'], testConfig: _dummyMirageConfig.testConfig });

    return new _emberCliMirageServer['default'](options);
  }

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('dummy/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.Controller.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('dummy/initializers/es2015-polyfills', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize() /* container, application */{
    // Production steps of ECMA-262, Edition 6, 22.1.2.1
    // Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
    if (!Array.from) {
      Array.from = (function () {
        var toStr = Object.prototype.toString;
        var isCallable = function isCallable(fn) {
          return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
        };
        var toInteger = function toInteger(value) {
          var number = Number(value);
          if (isNaN(number)) {
            return 0;
          }
          if (number === 0 || !isFinite(number)) {
            return number;
          }
          return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
        };
        var maxSafeInteger = Math.pow(2, 53) - 1;
        var toLength = function toLength(value) {
          var len = toInteger(value);
          return Math.min(Math.max(len, 0), maxSafeInteger);
        };

        // The length property of the from method is 1.
        return function from(arrayLike /* , mapFn, thisArg */) {
          // 1. Let C be the this value.
          var C = this;
          var T = undefined,
              kValue = undefined;

          // 2. Let items be ToObject(arrayLike).
          var items = Object(arrayLike);

          // 3. ReturnIfAbrupt(items).
          if (arrayLike == null) {
            throw new TypeError('Array.from requires an array-like object - not null or undefined');
          }

          // 4. If mapfn is undefined, then let mapping be false.
          var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
          if (typeof mapFn !== 'undefined') {
            // 5. else
            // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
            if (!isCallable(mapFn)) {
              throw new TypeError('Array.from: when provided, the second argument must be a function');
            }

            // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
            if (arguments.length > 2) {
              T = arguments[2];
            }
          }

          // 10. Let lenValue be Get(items, "length").
          // 11. Let len be ToLength(lenValue).
          var len = toLength(items.length);

          // 13. If IsConstructor(C) is true, then
          // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
          // 14. a. Else, Let A be ArrayCreate(len).
          var A = isCallable(C) ? Object(new C(len)) : new Array(len);

          // 16. Let k be 0.
          var k = 0;
          // 17. Repeat, while k < len… (also steps a - h)
          while (k < len) {
            kValue = items[k];
            if (mapFn) {
              A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
            } else {
              A[k] = kValue;
            }
            k += 1;
          }
          // 18. Let putStatus be Put(A, "length", len, true).
          A.length = len;
          // 20. Return A.
          return A;
        };
      })();
    }
  }

  exports['default'] = {
    name: 'es2015-polyfills',
    initialize: initialize
  };
});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_dummyConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _dummyConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_dummyConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('dummy/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('dummy/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('dummy/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define("dummy/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define('dummy/mirage/config', ['exports', 'ember-cli-mirage', 'ember'], function (exports, _emberCliMirage, _ember) {
  exports.testConfig = testConfig;
  var isBlank = _ember['default'].isBlank;

  exports['default'] = function () {
    // Contacts
    this.get('/contacts');
    // this.get('/contacts', ['contacts', 'addresses']);
    this.get('/contacts/:id');
    this.post('/contacts');
    this.put('/contacts/:id');
    this.del('/contacts/:id');

    // Friends
    this.get('/friends', { coalesce: true });

    // Pets
    this.get('/pets', function (_ref) {
      var db = _ref.db;

      return { pets: db.pets.filter(function (pet) {
          return pet.alive;
        }) };
    });

    this.post('/pets', function (_ref2, req) {
      var db = _ref2.db;

      var _JSON$parse = JSON.parse(req.requestBody);

      var pet = _JSON$parse.pet;

      if (isBlank(pet.name)) {
        var body = { errors: { name: ["can't be blank"] } };
        return new _emberCliMirage['default'].Response(422, { some: 'header' }, body);
      } else {
        return { pet: db.pets.insert(pet) };
      }
    });

    this.put('/pets/:id', function (_ref3, req) {
      var db = _ref3.db;

      var _JSON$parse2 = JSON.parse(req.requestBody);

      var pet = _JSON$parse2.pet;

      db.pets.update(pet.id, pet);
      return pet;
    });

    this['delete']('/pets/:id', function () {}, 200);

    this.get('/word-smiths/:id');
  };

  function testConfig() {
    this.get('/friends/:id');
  }
});
define('dummy/mirage/factories/address', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({});
});
define('dummy/mirage/factories/blog-post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Factory.extend({

    title: function title() {
      return _emberCliMirage.faker.lorem.sentence();
    }

  });
});
define('dummy/mirage/factories/contact', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('Duke', 'Developer', 'Artist'),
    name: _emberCliMirage.faker.name.firstName,
    age: 20,

    email: function email(i) {
      return 'person' + i + '@test.com';
    },

    admin: function admin() {
      return this.age > 30;
    }

  });
});
define('dummy/mirage/factories/friend', ['exports', 'dummy/mirage/factories/contact'], function (exports, _dummyMirageFactoriesContact) {
  exports['default'] = _dummyMirageFactoriesContact['default'].extend({
    isYoung: function isYoung() {
      return this.age < 18;
    }
  });
});
define('dummy/mirage/factories/pet', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {

  var names = ['Rex', 'Toby', 'Sam', 'Andy', 'Lassie', 'Annibal', 'Spark'];

  exports['default'] = _emberCliMirage['default'].Factory.extend({
    alive: true,

    name: function name(i) {
      return names[i % names.length];
    }
  });
});
define('dummy/mirage/factories/word-smith', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Factory.extend({

    name: function name() {
      return _emberCliMirage.faker.name.firstName() + ' ' + _emberCliMirage.faker.name.lastName();
    }

  });
});
define('dummy/mirage/fixtures/addresses', ['exports'], function (exports) {
  exports['default'] = [{
    id: 1,
    name: '123 Hyrule Way',
    contact_id: 1
  }, {
    id: 2,
    name: 'Mount Doom',
    contact_id: 2
  }];
});
define('dummy/mirage/fixtures/blog-posts', ['exports'], function (exports) {
  exports['default'] = [{
    id: 1,
    title: 'Lorem',
    wordSmithId: 1
  }, {
    id: 2,
    title: 'Ipsum',
    wordSmithId: 1
  }, {
    id: 3,
    title: 'Dolor',
    wordSmithId: 1
  }];
});
define('dummy/mirage/fixtures/contacts', ['exports'], function (exports) {
  exports['default'] = [{
    id: 1,
    name: 'Joe',
    address_ids: [1]
  }, {
    id: 2,
    name: 'Bob'
  }, {
    id: 3,
    name: 'Susan'
  }];
});
define('dummy/mirage/fixtures/friends', ['exports'], function (exports) {
  exports['default'] = [{
    id: 1,
    name: 'Joe',
    age: 10,
    isYoung: true
  }, {
    id: 2,
    name: 'Bob',
    age: 80,
    isYoung: false
  }];
});
define('dummy/mirage/fixtures/word-smiths', ['exports'], function (exports) {
  exports['default'] = [{
    id: 1,
    name: 'Link',
    blogPostIds: [1, 2, 3]
  }];
});
define('dummy/mirage/models/blog-post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({

    wordSmith: (0, _emberCliMirage.belongsTo)()

  });
});
define('dummy/mirage/models/contact', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('dummy/mirage/models/friend', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('dummy/mirage/models/word-smith', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({

    blogPosts: (0, _emberCliMirage.hasMany)()

  });
});
define('dummy/mirage/scenarios/default', ['exports'], function (exports) {
  exports['default'] = function (server) {
    var joe = server.create('contact', { name: 'Joe' });
    server.create('address', { name: '123 Hyrule Way', contact_id: joe.id });

    var bob = server.create('contact', { name: 'Bob' });
    server.create('address', { name: 'Mount Doom', contact_id: bob.id });
    server.create('contact', { name: 'Susan' });

    server.create('friend', { name: 'Joe', age: 10, isYoung: true });
    server.create('friend', { name: 'Bob', age: 80, isYoung: false });

    server.create('pet', { name: 'Pinky', alive: true });
    server.create('pet', { name: 'Bobby', alive: true });
    server.create('pet', { name: 'Brownie', alive: true });

    server.create('pet', { name: 'Cactus', alive: false });
  };
});
define('dummy/mirage/serializers/application', ['exports', 'ember-cli-mirage/serializers/active-model-serializer'], function (exports, _emberCliMirageSerializersActiveModelSerializer) {
  exports['default'] = _emberCliMirageSerializersActiveModelSerializer['default'];
});
define('dummy/mirage/serializers/blog-post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.JSONAPISerializer.extend({});
});
define('dummy/mirage/serializers/word-smith', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.JSONAPISerializer.extend({
    include: ['blogPosts']
  });
});
define('dummy/models/address', ['exports', 'ember-data'], function (exports, _emberData) {
  var Model = _emberData['default'].Model;
  var attr = _emberData['default'].attr;
  var belongsTo = _emberData['default'].belongsTo;
  exports['default'] = Model.extend({
    street: attr('string'),

    contact: belongsTo('contact')
  });
});
define('dummy/models/blog-post', ['exports', 'ember-data'], function (exports, _emberData) {
  var Model = _emberData['default'].Model;
  var attr = _emberData['default'].attr;
  var belongsTo = _emberData['default'].belongsTo;
  exports['default'] = Model.extend({

    title: attr(),

    wordSmith: belongsTo()

  });
});
define('dummy/models/contact', ['exports', 'ember-data'], function (exports, _emberData) {
  var Model = _emberData['default'].Model;
  var attr = _emberData['default'].attr;
  var belongsTo = _emberData['default'].belongsTo;
  exports['default'] = Model.extend({
    name: attr('string'),
    age: attr('number'),
    email: attr('string'),

    address: belongsTo('address')
  });
});
define('dummy/models/friend', ['exports', 'ember-data', 'dummy/models/contact'], function (exports, _emberData, _dummyModelsContact) {
  var attr = _emberData['default'].attr;
  exports['default'] = _dummyModelsContact['default'].extend({
    isYoung: attr('boolean')
  });
});
define('dummy/models/pet', ['exports', 'ember-data'], function (exports, _emberData) {
  var Model = _emberData['default'].Model;
  var attr = _emberData['default'].attr;
  exports['default'] = Model.extend({
    name: attr('string'),
    alive: attr('boolean')
  });
});
define('dummy/models/word-smith', ['exports', 'ember-data'], function (exports, _emberData) {
  var Model = _emberData['default'].Model;
  var attr = _emberData['default'].attr;
  var hasMany = _emberData['default'].hasMany;
  exports['default'] = Model.extend({

    name: attr(),

    blogPosts: hasMany()

  });
});
define('dummy/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _dummyConfigEnvironment['default'].locationType,
    rootURL: _dummyConfigEnvironment['default'].rootURL
  });

  Router.map(function () {
    this.route('contacts', { path: '/' });
    this.route('contact', { path: '/:contact_id' });
    this.route('edit', { path: '/:contact_id/edit' });

    this.route('friends');
    this.route('friend', { path: '/friends/:friend_id' });
    this.route('close-friends');
    this.route('pets');

    this.route('word-smith', { path: '/word-smiths/:word_smith_id' });
  });

  exports['default'] = Router;
});
define('dummy/routes/application', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend({

    actions: {
      createContact: function createContact() {
        var controller = this.controllerFor('contacts');
        var name = controller.get('newName');
        var newContact = this.store.createRecord('contact', { name: name });
        controller.set('newName', '');

        return newContact.save();
      },

      saveContact: function saveContact(contact) {
        var _this = this;

        return contact.save().then(function (contact) {
          _this.transitionTo('contact', contact);
        });
      },

      deleteContact: function deleteContact(contact) {
        var _this2 = this;

        return contact.destroyRecord().then(function () {
          _this2.transitionTo('contacts');
        });
      }
    }

  });
});
define('dummy/routes/close-friends', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend({

    model: function model() {
      var store = this.get('store');
      return store.query('friend', { ids: [1, 3] }).then(function () {
        // I request 2 friends and then return all friends to be sure no other friend
        // was loaded into the store.
        return store.peekAll('friend');
      });
    }

  });
});
define('dummy/routes/contacts', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend({

    model: function model() {
      var _this = this;

      return this.store.findAll('contact')['catch'](function (reason) {
        var errorMsg = reason.responseJSON ? reason.responseJSON.errors[0] : reason.errors[0];

        _this.set('error', errorMsg);
      });
    },

    setupController: function setupController(controller, model) {
      if (this.get('error')) {
        controller.set('error', this.get('error'));
      } else {
        controller.set('model', model);
      }
    }

  });
});
define('dummy/routes/friends', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend({

    model: function model() {
      return this.store.findAll('friend');
    }

  });
});
define('dummy/routes/pets', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend({

    actions: {
      createPet: function createPet() {
        var controller = this.controllerFor('pets');
        var name = controller.get('petName');
        controller.set('petName', '');
        this.store.createRecord('pet', { name: name, alive: true });
      }
    },

    setupController: function setupController(controller, model) {
      if (this.get('error')) {
        controller.set('error', this.get('error'));
      } else {
        controller.set('model', model);
      }
    },

    model: function model() {
      var _this = this;

      return this.store.findAll('pet')['catch'](function (reason) {
        var errorMsg = reason.responseJSON ? reason.responseJSON.errors[0] : reason.errors[0];
        _this.set('error', errorMsg);
      });
    }
  });
});
define('dummy/serializers/application', ['exports', 'active-model-adapter'], function (exports, _activeModelAdapter) {
  exports['default'] = _activeModelAdapter.ActiveModelSerializer;
});
define('dummy/serializers/blog-post', ['exports', 'ember-data'], function (exports, _emberData) {
  var JSONAPISerializer = _emberData['default'].JSONAPISerializer;
  exports['default'] = JSONAPISerializer;
});
define('dummy/serializers/word-smith', ['exports', 'ember-data'], function (exports, _emberData) {
  var JSONAPISerializer = _emberData['default'].JSONAPISerializer;
  exports['default'] = JSONAPISerializer;
});
define('dummy/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define("dummy/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "fCzuLBNC", "block": "{\"statements\":[[\"open-element\",\"h2\",[]],[\"static-attr\",\"id\",\"title\"],[\"flush-element\"],[\"text\",\"Welcome to Ember\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/application.hbs" } });
});
define("dummy/templates/close-friends", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "/xCJo0Tg", "block": "{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"model\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"  \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"friend\",\"name\"]],false],[\"text\",\" is your \"],[\"append\",[\"unknown\",[\"friend\",\"age\"]],false],[\"text\",\"-year-old friend.\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"friend\"]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/close-friends.hbs" } });
});
define("dummy/templates/contact", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "I7uFtNfZ", "block": "{\"statements\":[[\"block\",[\"link-to\"],[\"contacts\"],null,1],[\"text\",\"\\n\\n\"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"The contact is \"],[\"append\",[\"unknown\",[\"model\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"edit\",[\"get\",[\"model\"]]],null,0],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"text\",\"\\n  \"],[\"open-element\",\"button\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"deleteContact\",[\"get\",[\"model\"]]]],[\"flush-element\"],[\"text\",\"Delete this contact\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"button\",[]],[\"flush-element\"],[\"text\",\"Edit this contact\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Back home\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/contact.hbs" } });
});
define("dummy/templates/contacts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ZcTVAUIU", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"error\"]]],null,3,2],[\"text\",\"\\n\"],[\"open-element\",\"hr\",[]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"text\",\"\\n  \"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\",\"placeholder\"],[[\"get\",[\"newName\"]],\"Name\"]]],false],[\"close-element\"],[\"text\",\"\\n\\n  \"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"createContact\"]],[\"flush-element\"],[\"text\",\"Create a new contact\"],[\"close-element\"],[\"text\",\"\\n  \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"append\",[\"unknown\",[\"contact\",\"name\"]],false]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"contact\",[\"get\",[\"contact\"]]],null,0],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"contact\"]},{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"model\"]]],null,1]],\"locals\":[]},{\"statements\":[[\"text\",\"  \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"error\"],[\"flush-element\"],[\"text\",\"There was an error: \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"error\"]],false],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/contacts.hbs" } });
});
define("dummy/templates/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "g3521IYg", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"flush-element\"],[\"text\",\"\\n  \"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\"],[[\"get\",[\"model\",\"name\"]]]]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"link-to\"],[\"contact\",[\"get\",[\"model\"]]],null,0],[\"text\",\"\\n\"],[\"open-element\",\"button\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"saveContact\",[\"get\",[\"model\"]]]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Cancel\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/edit.hbs" } });
});
define("dummy/templates/friend", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Yw8YUHtl", "block": "{\"statements\":[[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"friend-name\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"model\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/friend.hbs" } });
});
define("dummy/templates/friends", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "TwOHbLgq", "block": "{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"model\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"  \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"friend\",\"name\"]],false],[\"text\",\" is your \"],[\"append\",[\"unknown\",[\"friend\",\"age\"]],false],[\"text\",\"-year-old friend.\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"friend\"]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/friends.hbs" } });
});
define("dummy/templates/pets", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "10f3i1vs", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"error\"]]],null,2,1]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"name\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"pet\",\"name\"]],false],[\"close-element\"],[\"text\",\" / alive: \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"alive\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"pet\",\"alive\"]],false],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"pet\"]},{\"statements\":[[\"text\",\"  \"],[\"open-element\",\"ul\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"model\"]]],null,0],[\"text\",\"    \"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\"],[[\"get\",[\"petName\"]]]]],false],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"createPet\"]],[\"flush-element\"],[\"text\",\"create\"],[\"close-element\"],[\"text\",\"\\n  \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"  \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"error\"],[\"flush-element\"],[\"text\",\"There was an error: \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"error\"]],false],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "dummy/templates/pets.hbs" } });
});
define('dummy/tests/mirage/mirage/config.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/config.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/config.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/address.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/address.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/address.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/blog-post.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/blog-post.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/blog-post.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/contact.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/contact.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/contact.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/friend.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/friend.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/friend.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/pet.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/pet.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/pet.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/factories/word-smith.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/factories/word-smith.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/factories/word-smith.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/fixtures/addresses.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/fixtures/addresses.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/fixtures/addresses.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/fixtures/blog-posts.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/fixtures/blog-posts.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/fixtures/blog-posts.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/fixtures/contacts.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/fixtures/contacts.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/fixtures/contacts.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/fixtures/friends.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/fixtures/friends.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/fixtures/friends.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/fixtures/word-smiths.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/fixtures/word-smiths.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/fixtures/word-smiths.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/models/blog-post.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/models/blog-post.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/models/blog-post.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/models/contact.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/models/contact.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/models/contact.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/models/friend.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/models/friend.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/models/friend.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/models/word-smith.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/models/word-smith.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/models/word-smith.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/scenarios/default.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/scenarios/default.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/scenarios/default.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/serializers/application.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/serializers/application.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/serializers/application.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/serializers/blog-post.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/serializers/blog-post.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/serializers/blog-post.js should pass ESLint.\n');
  });
});
define('dummy/tests/mirage/mirage/serializers/word-smith.lint-test', ['exports'], function (exports) {
  QUnit.module('ESLint - mirage/serializers/word-smith.js');
  QUnit.test('should pass ESLint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'mirage/serializers/word-smith.js should pass ESLint.\n');
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("dummy/app")["default"].create({"name":"ember-cli-mirage","version":"0.3.0-beta.5+be2edd34"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map
