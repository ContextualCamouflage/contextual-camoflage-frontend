{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/contact-test.js","dummy/tests/acceptance/contact-test.lint-test.js","dummy/tests/acceptance/contacts-test.js","dummy/tests/acceptance/contacts-test.lint-test.js","dummy/tests/acceptance/custom-handlers-test.js","dummy/tests/acceptance/custom-handlers-test.lint-test.js","dummy/tests/acceptance/edit-test.js","dummy/tests/acceptance/edit-test.lint-test.js","dummy/tests/acceptance/fixtures-test.js","dummy/tests/acceptance/fixtures-test.lint-test.js","dummy/tests/acceptance/friends-test.js","dummy/tests/acceptance/friends-test.lint-test.js","dummy/tests/acceptance/manually-starting-test.js","dummy/tests/acceptance/manually-starting-test.lint-test.js","dummy/tests/acceptance/pets-test.js","dummy/tests/acceptance/pets-test.lint-test.js","dummy/tests/acceptance/serializers-test.js","dummy/tests/acceptance/serializers-test.lint-test.js","dummy/tests/adapters/application.lint-test.js","dummy/tests/adapters/word-smith.lint-test.js","dummy/tests/app.lint-test.js","dummy/tests/controllers/application.lint-test.js","dummy/tests/fixtures/config/environment-development-disabled.js","dummy/tests/fixtures/config/environment-development-disabled.lint-test.js","dummy/tests/fixtures/config/environment-production-enabled.js","dummy/tests/fixtures/config/environment-production-enabled.lint-test.js","dummy/tests/fixtures/config/environment-test-disabled.js","dummy/tests/fixtures/config/environment-test-disabled.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.lint-test.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.lint-test.js","dummy/tests/index-named-imports-test.js","dummy/tests/index-named-imports-test.lint-test.js","dummy/tests/initializers/es2015-polyfills.lint-test.js","dummy/tests/integration/database-test.js","dummy/tests/integration/database-test.lint-test.js","dummy/tests/integration/factories/after-create-test.js","dummy/tests/integration/factories/after-create-test.lint-test.js","dummy/tests/integration/factories/helpers-test.js","dummy/tests/integration/factories/helpers-test.lint-test.js","dummy/tests/integration/http-verbs-test.js","dummy/tests/integration/http-verbs-test.lint-test.js","dummy/tests/integration/load-fixtures-test.js","dummy/tests/integration/load-fixtures-test.lint-test.js","dummy/tests/integration/orm/all-test.js","dummy/tests/integration/orm/all-test.lint-test.js","dummy/tests/integration/orm/attrs-test.js","dummy/tests/integration/orm/attrs-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/_helper.js","dummy/tests/integration/orm/belongs-to/1-basic/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/_regressions-test.js","dummy/tests/integration/orm/belongs-to/1-basic/_regressions-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/accessor-test.js","dummy/tests/integration/orm/belongs-to/1-basic/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-create-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-new-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-set-test.js","dummy/tests/integration/orm/belongs-to/1-basic/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/create-test.js","dummy/tests/integration/orm/belongs-to/1-basic/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/delete-test.js","dummy/tests/integration/orm/belongs-to/1-basic/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/1-basic/instantiating-test.js","dummy/tests/integration/orm/belongs-to/1-basic/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/_helper.js","dummy/tests/integration/orm/belongs-to/2-named/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/accessor-test.js","dummy/tests/integration/orm/belongs-to/2-named/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-create-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-new-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-set-test.js","dummy/tests/integration/orm/belongs-to/2-named/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/create-test.js","dummy/tests/integration/orm/belongs-to/2-named/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/delete-test.js","dummy/tests/integration/orm/belongs-to/2-named/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/2-named/instantiating-test.js","dummy/tests/integration/orm/belongs-to/2-named/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/_helper.js","dummy/tests/integration/orm/belongs-to/3-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/accessor-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-create-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-new-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/create-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/delete-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/instantiating-test.js","dummy/tests/integration/orm/belongs-to/3-reflexive/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/accessor-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-create-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-new-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/create-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/delete-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/instantiating-test.js","dummy/tests/integration/orm/belongs-to/4-named-reflexive/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test.js","dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/accessor-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-create-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-new-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/create-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/delete-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/instantiating-test.js","dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/create-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/delete-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test.js","dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/accessor-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/accessor-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-create-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-new-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-new-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-id-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-id-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/create-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/create-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/delete-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/delete-test.lint-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/instantiating-test.js","dummy/tests/integration/orm/belongs-to/8-one-to-one/instantiating-test.lint-test.js","dummy/tests/integration/orm/belongs-to/9-misc/misc-test.js","dummy/tests/integration/orm/belongs-to/9-misc/misc-test.lint-test.js","dummy/tests/integration/orm/collection-inflector-test.js","dummy/tests/integration/orm/collection-inflector-test.lint-test.js","dummy/tests/integration/orm/collection-test.js","dummy/tests/integration/orm/collection-test.lint-test.js","dummy/tests/integration/orm/create-test.js","dummy/tests/integration/orm/create-test.lint-test.js","dummy/tests/integration/orm/destroy-test.js","dummy/tests/integration/orm/destroy-test.lint-test.js","dummy/tests/integration/orm/find-test.js","dummy/tests/integration/orm/find-test.lint-test.js","dummy/tests/integration/orm/first-test.js","dummy/tests/integration/orm/first-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/_helper.js","dummy/tests/integration/orm/has-many/1-basic/_helper.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/accessor-test.js","dummy/tests/integration/orm/has-many/1-basic/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/association-create-test.js","dummy/tests/integration/orm/has-many/1-basic/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/association-new-test.js","dummy/tests/integration/orm/has-many/1-basic/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/association-set-ids-test.js","dummy/tests/integration/orm/has-many/1-basic/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/association-set-test.js","dummy/tests/integration/orm/has-many/1-basic/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/create-test.js","dummy/tests/integration/orm/has-many/1-basic/create-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/delete-test.js","dummy/tests/integration/orm/has-many/1-basic/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/1-basic/instantiating-test.js","dummy/tests/integration/orm/has-many/1-basic/instantiating-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/_helper.js","dummy/tests/integration/orm/has-many/2-named/_helper.lint-test.js","dummy/tests/integration/orm/has-many/2-named/accessor-test.js","dummy/tests/integration/orm/has-many/2-named/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/association-create-test.js","dummy/tests/integration/orm/has-many/2-named/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/association-new-test.js","dummy/tests/integration/orm/has-many/2-named/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/association-set-ids-test.js","dummy/tests/integration/orm/has-many/2-named/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/association-set-test.js","dummy/tests/integration/orm/has-many/2-named/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/create-test.js","dummy/tests/integration/orm/has-many/2-named/create-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/delete-test.js","dummy/tests/integration/orm/has-many/2-named/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/2-named/instantiating-test.js","dummy/tests/integration/orm/has-many/2-named/instantiating-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/_helper.js","dummy/tests/integration/orm/has-many/3-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/accessor-test.js","dummy/tests/integration/orm/has-many/3-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-create-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-new-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-set-ids-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-set-test.js","dummy/tests/integration/orm/has-many/3-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/create-test.js","dummy/tests/integration/orm/has-many/3-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/delete-test.js","dummy/tests/integration/orm/has-many/3-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/3-reflexive/new-test.js","dummy/tests/integration/orm/has-many/3-reflexive/new-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/_helper.js","dummy/tests/integration/orm/has-many/4-named-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/accessor-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-create-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-new-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-ids-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/create-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/delete-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/new-test.js","dummy/tests/integration/orm/has-many/4-named-reflexive/new-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test.js","dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/accessor-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-create-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-new-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-ids-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/create-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/delete-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/new-test.js","dummy/tests/integration/orm/has-many/6-one-way-reflexive/new-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/accessor-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-create-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-new-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/create-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/create-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/delete-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/new-test.js","dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/new-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/_helper.js","dummy/tests/integration/orm/has-many/8-many-to-many/_helper.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/accessor-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/accessor-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-create-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-create-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-new-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-new-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-set-ids-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-set-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/association-set-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/create-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/create-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/delete-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/delete-test.lint-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/new-test.js","dummy/tests/integration/orm/has-many/8-many-to-many/new-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/_helper.js","dummy/tests/integration/orm/mixed/1-one-to-many/_helper.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/accessor-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/accessor-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-create-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-create-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-new-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-new-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-set-ids-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-set-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/association-set-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/create-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/create-test.lint-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/instantiating-test.js","dummy/tests/integration/orm/mixed/1-one-to-many/instantiating-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/_helper.js","dummy/tests/integration/orm/mixed/2-many-to-one/_helper.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/accessor-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/accessor-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-create-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-create-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-new-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-new-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-set-ids-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-set-ids-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-set-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/association-set-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/create-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/create-test.lint-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/instantiating-test.js","dummy/tests/integration/orm/mixed/2-many-to-one/instantiating-test.lint-test.js","dummy/tests/integration/orm/reinitialize-associations-test.js","dummy/tests/integration/orm/reinitialize-associations-test.lint-test.js","dummy/tests/integration/orm/schema-verification/belongs-to-test.js","dummy/tests/integration/orm/schema-verification/belongs-to-test.lint-test.js","dummy/tests/integration/orm/schema-verification/has-many-test.js","dummy/tests/integration/orm/schema-verification/has-many-test.lint-test.js","dummy/tests/integration/orm/schema-verification/mixed-test.js","dummy/tests/integration/orm/schema-verification/mixed-test.lint-test.js","dummy/tests/integration/orm/update-test.js","dummy/tests/integration/orm/update-test.lint-test.js","dummy/tests/integration/orm/where-test.js","dummy/tests/integration/orm/where-test.lint-test.js","dummy/tests/integration/passthrough-test.js","dummy/tests/integration/passthrough-test.lint-test.js","dummy/tests/integration/route-handlers/delete-shorthand-test.js","dummy/tests/integration/route-handlers/delete-shorthand-test.lint-test.js","dummy/tests/integration/route-handlers/function-handler-test.js","dummy/tests/integration/route-handlers/function-handler-test.lint-test.js","dummy/tests/integration/route-handlers/get-shorthand-test.js","dummy/tests/integration/route-handlers/get-shorthand-test.lint-test.js","dummy/tests/integration/route-handlers/head-shorthand-test.js","dummy/tests/integration/route-handlers/head-shorthand-test.lint-test.js","dummy/tests/integration/route-handlers/post-shorthand-test.js","dummy/tests/integration/route-handlers/post-shorthand-test.lint-test.js","dummy/tests/integration/route-handlers/put-shorthand-test.js","dummy/tests/integration/route-handlers/put-shorthand-test.lint-test.js","dummy/tests/integration/serializers/active-model-serializer-test.js","dummy/tests/integration/serializers/active-model-serializer-test.lint-test.js","dummy/tests/integration/serializers/base/associations/embedded-collection-test.js","dummy/tests/integration/serializers/base/associations/embedded-collection-test.lint-test.js","dummy/tests/integration/serializers/base/associations/embedded-model-test.js","dummy/tests/integration/serializers/base/associations/embedded-model-test.lint-test.js","dummy/tests/integration/serializers/base/associations/many-to-many-test.js","dummy/tests/integration/serializers/base/associations/many-to-many-test.lint-test.js","dummy/tests/integration/serializers/base/associations/sideloading-assorted-collections-test.js","dummy/tests/integration/serializers/base/associations/sideloading-assorted-collections-test.lint-test.js","dummy/tests/integration/serializers/base/associations/sideloading-collection-test.js","dummy/tests/integration/serializers/base/associations/sideloading-collection-test.lint-test.js","dummy/tests/integration/serializers/base/associations/sideloading-model-test.js","dummy/tests/integration/serializers/base/associations/sideloading-model-test.lint-test.js","dummy/tests/integration/serializers/base/assorted-collections-test.js","dummy/tests/integration/serializers/base/assorted-collections-test.lint-test.js","dummy/tests/integration/serializers/base/attribute-key-formatting-test.js","dummy/tests/integration/serializers/base/attribute-key-formatting-test.lint-test.js","dummy/tests/integration/serializers/base/attrs-test.js","dummy/tests/integration/serializers/base/attrs-test.lint-test.js","dummy/tests/integration/serializers/base/basic-test.js","dummy/tests/integration/serializers/base/basic-test.lint-test.js","dummy/tests/integration/serializers/base/full-request-test.js","dummy/tests/integration/serializers/base/full-request-test.lint-test.js","dummy/tests/integration/serializers/base/override-serialize-test.js","dummy/tests/integration/serializers/base/override-serialize-test.lint-test.js","dummy/tests/integration/serializers/base/root-test.js","dummy/tests/integration/serializers/base/root-test.lint-test.js","dummy/tests/integration/serializers/base/serialize-array-of-models-test.js","dummy/tests/integration/serializers/base/serialize-array-of-models-test.lint-test.js","dummy/tests/integration/serializers/base/serialize-ids-test.js","dummy/tests/integration/serializers/base/serialize-ids-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/collection-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/collection-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/includes-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/includes-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/key-for-relationship-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/key-for-relationship-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/links-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/links-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/many-to-many-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/many-to-many-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/model-test.js","dummy/tests/integration/serializers/json-api-serializer/associations/model-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/attrs-test.js","dummy/tests/integration/serializers/json-api-serializer/attrs-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/base-test.js","dummy/tests/integration/serializers/json-api-serializer/base-test.lint-test.js","dummy/tests/integration/serializers/json-api-serializer/key-formatting-test.js","dummy/tests/integration/serializers/json-api-serializer/key-formatting-test.lint-test.js","dummy/tests/integration/serializers/rest-serializer-test.js","dummy/tests/integration/serializers/rest-serializer-test.lint-test.js","dummy/tests/integration/serializers/schema-helper.js","dummy/tests/integration/serializers/schema-helper.lint-test.js","dummy/tests/integration/server-config-test.js","dummy/tests/integration/server-config-test.lint-test.js","dummy/tests/integration/server-with-orm-test.js","dummy/tests/integration/server-with-orm-test.lint-test.js","dummy/tests/integration/server/custom-function-handler-test.js","dummy/tests/integration/server/custom-function-handler-test.lint-test.js","dummy/tests/integration/server/customized-normalize-method-test.js","dummy/tests/integration/server/customized-normalize-method-test.lint-test.js","dummy/tests/integration/server/factory-creation-test.js","dummy/tests/integration/server/factory-creation-test.lint-test.js","dummy/tests/integration/server/resource-shorthand-test.js","dummy/tests/integration/server/resource-shorthand-test.lint-test.js","dummy/tests/integration/server/shorthand-sanity-test.js","dummy/tests/integration/server/shorthand-sanity-test.lint-test.js","dummy/tests/models/address.lint-test.js","dummy/tests/models/blog-post.lint-test.js","dummy/tests/models/contact.lint-test.js","dummy/tests/models/friend.lint-test.js","dummy/tests/models/pet.lint-test.js","dummy/tests/models/word-smith.lint-test.js","dummy/tests/resolver.lint-test.js","dummy/tests/router.lint-test.js","dummy/tests/routes/application.lint-test.js","dummy/tests/routes/close-friends.lint-test.js","dummy/tests/routes/contacts.lint-test.js","dummy/tests/routes/friends.lint-test.js","dummy/tests/routes/pets.lint-test.js","dummy/tests/serializers/application.lint-test.js","dummy/tests/serializers/blog-post.lint-test.js","dummy/tests/serializers/word-smith.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.lint-test.js","dummy/tests/unit/addon-tree-test-node.js","dummy/tests/unit/addon-tree-test-node.lint-test.js","dummy/tests/unit/collection-test.js","dummy/tests/unit/collection-test.lint-test.js","dummy/tests/unit/controller-test.js","dummy/tests/unit/controller-test.lint-test.js","dummy/tests/unit/db-test.js","dummy/tests/unit/db-test.lint-test.js","dummy/tests/unit/db/identity-manager-test.js","dummy/tests/unit/db/identity-manager-test.lint-test.js","dummy/tests/unit/factory-test.js","dummy/tests/unit/factory-test.lint-test.js","dummy/tests/unit/faker-test.js","dummy/tests/unit/faker-test.lint-test.js","dummy/tests/unit/import-files-test-node.js","dummy/tests/unit/import-files-test-node.lint-test.js","dummy/tests/unit/inflector-test.js","dummy/tests/unit/inflector-test.lint-test.js","dummy/tests/unit/model-test.js","dummy/tests/unit/model-test.lint-test.js","dummy/tests/unit/reference-sort-test.js","dummy/tests/unit/reference-sort-test.lint-test.js","dummy/tests/unit/response-test.js","dummy/tests/unit/response-test.lint-test.js","dummy/tests/unit/route-handlers/shorthands/base-test.js","dummy/tests/unit/route-handlers/shorthands/base-test.lint-test.js","dummy/tests/unit/schema-test.js","dummy/tests/unit/schema-test.lint-test.js","dummy/tests/unit/serializers/active-model-serializer-test.js","dummy/tests/unit/serializers/active-model-serializer-test.lint-test.js","dummy/tests/unit/serializers/rest-serializer-test.js","dummy/tests/unit/serializers/rest-serializer-test.lint-test.js","dummy/tests/unit/server-test.js","dummy/tests/unit/server-test.lint-test.js","dummy/tests/unit/utils/normalize-name-test.js","dummy/tests/unit/utils/normalize-name-test.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/contact-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  var contact = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Contact', {\n    beforeEach: function beforeEach() {\n      contact = server.create('contact');\n    }\n  });\n\n  (0, _qunit.test)('I can view a contact', function (assert) {\n    visit('/1');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contact');\n      assert.equal(find('p:first').text(), 'The contact is ' + contact.name);\n    });\n  });\n\n  (0, _qunit.test)('I can delete a contact', function (assert) {\n    visit('/1');\n    click('button:contains(Delete)');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contacts');\n      assert.equal(find('p').length, 0);\n    });\n  });\n});","define('dummy/tests/acceptance/contact-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/contact-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/contact-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/contacts-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  var contacts = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Contacts', {\n    beforeEach: function beforeEach() {\n      contacts = server.createList('contact', 2);\n    }\n  });\n\n  (0, _qunit.test)('I can view the contacts', function (assert) {\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contacts');\n      assert.equal(find('p').length, 2);\n      assert.equal(find('p:first').text(), contacts[0].name);\n    });\n  });\n\n  (0, _qunit.test)('I can create a new contact', function (assert) {\n    visit('/');\n    fillIn('input', 'Ganon');\n    click('button:contains(Create)');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contacts');\n      assert.equal(find('p').length, 3);\n      assert.equal(find('p:last').text(), 'Ganon');\n    });\n  });\n\n  (0, _qunit.test)('If the server errors on /contacts, the first error message should show', function (assert) {\n    server.get('/contacts', {\n      errors: ['improper auth']\n    }, 404);\n\n    visit('/');\n\n    andThen(function () {\n      assert.equal(find('.error span').text(), 'improper auth');\n    });\n  });\n});","define('dummy/tests/acceptance/contacts-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/contacts-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/contacts-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/custom-handlers-test', ['exports', 'ember', 'dummy/tests/helpers/module-for-acceptance', 'qunit'], function (exports, _ember, _dummyTestsHelpersModuleForAcceptance, _qunit) {\n  var ajax = _ember['default'].$.ajax;\n\n  var appStore = undefined,\n      rex = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Custom handlers', {\n    beforeEach: function beforeEach() {\n      appStore = this.application.__container__.lookup('service:store');\n      rex = server.create('pet', { name: 'Rex', alive: true });\n      server.create('pet', { name: 'Toby', alive: false });\n      server.create('pet', { name: 'Sam', alive: false });\n      server.create('pet', { name: 'Andy', alive: true });\n    }\n  });\n\n  (0, _qunit.test)('You can customize the response by passing a handler function that returns the desired body', function (assert) {\n    var done = assert.async();\n    appStore.findAll('pet').then(function (pets) {\n      assert.deepEqual(pets.mapBy('name'), ['Rex', 'Andy']);\n    })['finally'](done);\n  });\n\n  (0, _qunit.test)('You can customize the response code of a custom handler passing the code as 3rd argument', function (assert) {\n    var done = assert.async();\n    var request = ajax({\n      url: '/pets/${rex.id}',\n      method: 'delete'\n    });\n\n    request.then(function (response, statusText, jqXHR) {\n      assert.equal(jqXHR.status, 200, 'The status code is 200 instead od 204');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('You can can programatically returns a tailored response by returning a Mirage.Response', function (assert) {\n    var done = assert.async();\n    var request = ajax({\n      url: '/pets',\n      method: 'post',\n      data: JSON.stringify({ pet: { alive: true } })\n    });\n\n    request.then(function () {/* noop */}, function (response) {\n      assert.equal(response.status, 422, 'The status code is 422');\n      assert.equal(response.responseText, '{\"errors\":{\"name\":[\"can\\'t be blank\"]}}', 'The response body is correct');\n      assert.equal(response.getResponseHeader('some'), 'header', 'The response contains the custom header');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('returning a non-blank response from a custom handler whose default status is 204 changes the status to 200', function (assert) {\n    var done = assert.async();\n    var request = ajax({\n      url: '/pets/${rex.id}',\n      method: 'put',\n      data: JSON.stringify({ pet: { id: rex.id, name: 'The Rex', alive: true } })\n    });\n\n    request.then(function (response, statusText, jqXHR) {\n      assert.equal(jqXHR.status, 200, 'The status code is 200 instead of 204');\n      assert.deepEqual(response, { id: '1', name: 'The Rex', alive: true }, 'The response is correct');\n      done();\n    });\n  });\n});","define('dummy/tests/acceptance/custom-handlers-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/custom-handlers-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/custom-handlers-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/edit-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Edit');\n\n  (0, _qunit.test)('I can edit a contact', function (assert) {\n    server.create('contact');\n\n    visit('/1');\n    click('button:contains(Edit)');\n    fillIn('input', 'Shiek');\n    click('button:contains(Save)');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contact');\n      assert.equal(find('p:first').text(), 'The contact is Shiek');\n    });\n  });\n});","define('dummy/tests/acceptance/edit-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/edit-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/edit-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/fixtures-test', ['exports', 'dummy/tests/helpers/module-for-acceptance', 'qunit'], function (exports, _dummyTestsHelpersModuleForAcceptance, _qunit) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Fixtures', {\n    beforeEach: function beforeEach() {\n      this.store = this.application.__container__.lookup('service:store');\n    }\n  });\n\n  (0, _qunit.test)('I can use fixtures', function (assert) {\n    var _this = this;\n\n    server.loadFixtures();\n\n    visit('/word-smiths/1');\n\n    andThen(function () {\n      var wordSmithsInStore = _this.store.peekAll('word-smith');\n      var blogPostsInStore = _this.store.peekAll('blog-post');\n\n      assert.equal(wordSmithsInStore.get('length'), 1);\n      assert.equal(blogPostsInStore.get('length'), 3);\n    });\n  });\n\n  (0, _qunit.test)('I can use fixtures with the filename api', function (assert) {\n    var _this2 = this;\n\n    server.loadFixtures('word-smiths', 'blog-posts');\n\n    visit('/word-smiths/1');\n\n    andThen(function () {\n      var wordSmithsInStore = _this2.store.peekAll('word-smith');\n      var blogPostsInStore = _this2.store.peekAll('blog-post');\n\n      assert.equal(wordSmithsInStore.get('length'), 1);\n      assert.equal(blogPostsInStore.get('length'), 3);\n    });\n  });\n});","define('dummy/tests/acceptance/fixtures-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/fixtures-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/fixtures-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/friends-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Friends');\n\n  (0, _qunit.test)('I can view the friends', function (assert) {\n    var friend = server.create('friend');\n    var youngFriend = server.create('friend', { name: 'Tommy', age: 10 });\n\n    visit('/friends');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'friends');\n      assert.equal(find('p').length, 2);\n      assert.equal(friend.isYoung, false);\n      assert.equal(youngFriend.isYoung, true);\n\n      assert.ok(find('p:first').text().match(friend.name));\n      assert.ok(find('p:first').text().match(friend.age));\n      assert.ok(find('p:last').text().match('Tommy'));\n      assert.ok(find('p:last').text().match(10));\n    });\n  });\n\n  (0, _qunit.test)('I can view the selected friends', function (assert) {\n    server.create('friend', { name: 'Jane', age: 30 });\n    server.create('friend', { name: 'Tommy', age: 10 });\n    server.create('friend', { name: 'Bob', age: 28 });\n\n    visit('/close-friends');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'close-friends');\n      assert.equal(find('p').length, 2);\n\n      assert.ok(find('p:first').text().match('Jane'));\n      assert.ok(find('p:first').text().match(30));\n      assert.ok(find('p:last').text().match('Bob'));\n      assert.ok(find('p:last').text().match(28));\n    });\n  });\n\n  (0, _qunit.test)('I can view a friend that was configured only for test mode', function (assert) {\n    var friend = server.create('friend', { name: 'The Dude' });\n\n    visit('/friends/' + friend.id);\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'friend');\n      assert.ok(find('h2.friend-name').text().match('The Dude'));\n    });\n  });\n});","define('dummy/tests/acceptance/friends-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/friends-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/friends-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/manually-starting-test', ['exports', 'ember', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/initializers/ember-cli-mirage', 'dummy/config/environment'], function (exports, _ember, _qunit, _dummyTestsHelpersStartApp, _dummyInitializersEmberCliMirage, _dummyConfigEnvironment) {\n  var run = _ember['default'].run;\n\n  var App = undefined;\n\n  (0, _qunit.module)('Acceptance: Manually starting Mirage', {\n    beforeEach: function beforeEach() {\n      _dummyConfigEnvironment['default']['ember-cli-mirage'] = { enabled: false };\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      server.shutdown();\n      run(App, 'destroy');\n      _dummyConfigEnvironment['default']['ember-cli-mirage'].enabled = undefined;\n    }\n  });\n\n  (0, _qunit.test)('The server can be started manually when configured with { enabled: false }', function (assert) {\n    assert.equal(window.server, undefined, 'There is no server at first');\n    (0, _dummyInitializersEmberCliMirage.startMirage)();\n    assert.ok(window.server, 'There is a server after starting');\n\n    var contact = server.create('contact');\n    visit('/1');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'contact');\n      assert.equal(find('p:first').text(), 'The contact is ' + contact.name, 'The manually started server works');\n    });\n  });\n});","define('dummy/tests/acceptance/manually-starting-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/manually-starting-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/manually-starting-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/pets-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance) {\n\n  var pets = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Pets', {\n    beforeEach: function beforeEach() {\n      pets = server.createList('pet', 3);\n    }\n  });\n\n  (0, _qunit.test)('I can view the pets', function (assert) {\n    visit('/pets');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'pets');\n      assert.equal(find('li').length, 3);\n      assert.equal(find('li:first .name').text().trim(), pets[0].name);\n    });\n  });\n\n  (0, _qunit.test)('I can create a new pet', function (assert) {\n    visit('/pets');\n\n    fillIn('input', 'Brownie');\n    click('button:contains(create)');\n\n    andThen(function () {\n      assert.equal(currentRouteName(), 'pets');\n      assert.equal(find('li').length, 4);\n      assert.equal(find('li:last .name').text(), 'Brownie');\n    });\n  });\n});","define('dummy/tests/acceptance/pets-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/pets-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pets-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/acceptance/serializers-test', ['exports', 'dummy/tests/helpers/module-for-acceptance', 'qunit'], function (exports, _dummyTestsHelpersModuleForAcceptance, _qunit) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | Serializers', {\n    beforeEach: function beforeEach() {\n      this.store = this.application.__container__.lookup('service:store');\n    }\n  });\n\n  (0, _qunit.test)('Serializers can provide default includes', function (assert) {\n    var _this = this;\n\n    var wordSmith = server.create('word-smith');\n    server.createList('blog-post', 3, { wordSmithId: wordSmith.id });\n\n    visit('/word-smiths/' + wordSmith.id);\n\n    andThen(function () {\n      var wordSmithsInStore = _this.store.peekAll('word-smith');\n      var blogPostsInStore = _this.store.peekAll('blog-post');\n\n      assert.equal(wordSmithsInStore.get('length'), 1);\n      assert.equal(blogPostsInStore.get('length'), 3);\n    });\n  });\n});","define('dummy/tests/acceptance/serializers-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/serializers-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/serializers-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/adapters/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/adapters/word-smith.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/word-smith.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/word-smith.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/controllers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/fixtures/config/environment-development-disabled', ['exports'], function (exports) {\n  /* eslint-env node */\n  /* eslint no-empty: 0 */\n\n  module.exports = function (environment) {\n    var ENV = {\n      modulePrefix: 'scaffold-test',\n      environment: environment,\n      baseURL: '/',\n      locationType: 'auto',\n      EmberENV: {\n        FEATURES: {\n          // Here you can enable experimental features on an ember canary build\n          // e.g. 'with-controller': true\n        }\n      },\n\n      APP: {\n        // Here you can pass flags/options to your application instance\n        // when it is created\n      }\n    };\n\n    if (environment === 'development') {\n      // ENV.APP.LOG_RESOLVER = true;\n      // ENV.APP.LOG_ACTIVE_GENERATION = true;\n      // ENV.APP.LOG_TRANSITIONS = true;\n      // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n      // ENV.APP.LOG_VIEW_LOOKUPS = true;\n      ENV['ember-cli-mirage'] = {\n        enabled: false\n      };\n    }\n\n    if (environment === 'test') {\n      // Testem prefers this...\n      ENV.baseURL = '/';\n      ENV.locationType = 'none';\n\n      // keep test console output quieter\n      ENV.APP.LOG_ACTIVE_GENERATION = false;\n      ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n      ENV.APP.rootElement = '#ember-testing';\n    }\n\n    if (environment === 'production') {}\n\n    return ENV;\n  };\n});","define('dummy/tests/fixtures/config/environment-development-disabled.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - fixtures/config/environment-development-disabled.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'fixtures/config/environment-development-disabled.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/fixtures/config/environment-production-enabled', ['exports'], function (exports) {\n  /* eslint-env node */\n\n  module.exports = function (environment) {\n    var ENV = {\n      modulePrefix: 'scaffold-test',\n      environment: environment,\n      baseURL: '/',\n      locationType: 'auto',\n      EmberENV: {\n        FEATURES: {\n          // Here you can enable experimental features on an ember canary build\n          // e.g. 'with-controller': true\n        }\n      },\n\n      APP: {\n        // Here you can pass flags/options to your application instance\n        // when it is created\n      }\n    };\n\n    if (environment === 'development') {\n      // ENV.APP.LOG_RESOLVER = true;\n      // ENV.APP.LOG_ACTIVE_GENERATION = true;\n      // ENV.APP.LOG_TRANSITIONS = true;\n      // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n      // ENV.APP.LOG_VIEW_LOOKUPS = true;\n    }\n\n    if (environment === 'test') {\n      // Testem prefers this...\n      ENV.baseURL = '/';\n      ENV.locationType = 'none';\n\n      // keep test console output quieter\n      ENV.APP.LOG_ACTIVE_GENERATION = false;\n      ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n      ENV.APP.rootElement = '#ember-testing';\n    }\n\n    if (environment === 'production') {\n      ENV['ember-cli-mirage'] = {\n        enabled: true\n      };\n    }\n\n    return ENV;\n  };\n});","define('dummy/tests/fixtures/config/environment-production-enabled.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - fixtures/config/environment-production-enabled.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'fixtures/config/environment-production-enabled.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/fixtures/config/environment-test-disabled', ['exports'], function (exports) {\n  /* eslint-env node */\n  /* eslint no-empty: 0 */\n\n  module.exports = function (environment) {\n    var ENV = {\n      modulePrefix: 'scaffold-test',\n      environment: environment,\n      baseURL: '/',\n      locationType: 'auto',\n      EmberENV: {\n        FEATURES: {\n          // Here you can enable experimental features on an ember canary build\n          // e.g. 'with-controller': true\n        }\n      },\n\n      APP: {\n        // Here you can pass flags/options to your application instance\n        // when it is created\n      }\n    };\n\n    if (environment === 'development') {\n      // ENV.APP.LOG_RESOLVER = true;\n      // ENV.APP.LOG_ACTIVE_GENERATION = true;\n      // ENV.APP.LOG_TRANSITIONS = true;\n      // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n      // ENV.APP.LOG_VIEW_LOOKUPS = true;\n    }\n\n    if (environment === 'test') {\n      // Testem prefers this...\n      ENV.baseURL = '/';\n      ENV.locationType = 'none';\n\n      // keep test console output quieter\n      ENV.APP.LOG_ACTIVE_GENERATION = false;\n      ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n      ENV.APP.rootElement = '#ember-testing';\n      ENV['ember-cli-mirage'] = {\n        enabled: false\n      };\n    }\n\n    if (environment === 'production') {}\n\n    return ENV;\n  };\n});","define('dummy/tests/fixtures/config/environment-test-disabled.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - fixtures/config/environment-test-disabled.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'fixtures/config/environment-test-disabled.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n  var run = _ember['default'].run;\n\n  function destroyApp(application) {\n    run(function () {\n      application.destroy();\n\n      server.shutdown();\n    });\n  }\n});","define('dummy/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n  var merge = _ember['default'].merge;\n  var run = _ember['default'].run;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/index-named-imports-test', ['exports', 'qunit', 'ember-cli-mirage'], function (exports, _qunit, _emberCliMirage) {\n\n  (0, _qunit.test)('Factory is present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.Factory);\n  });\n\n  (0, _qunit.test)('Response is present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.Response);\n  });\n\n  (0, _qunit.test)('faker is present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.faker);\n  });\n\n  (0, _qunit.test)('Model is present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.Model);\n  });\n\n  (0, _qunit.test)('serializers are present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.ActiveModelSerializer);\n    assert.ok(_emberCliMirage.JSONAPISerializer);\n    assert.ok(_emberCliMirage.Serializer);\n  });\n\n  (0, _qunit.test)('relationship helpers are present in named exports from ember-cli-mirage', function (assert) {\n    assert.ok(_emberCliMirage.hasMany);\n    assert.ok(_emberCliMirage.belongsTo);\n  });\n});","define('dummy/tests/index-named-imports-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - index-named-imports-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index-named-imports-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/initializers/es2015-polyfills.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - initializers/es2015-polyfills.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/es2015-polyfills.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/database-test', ['exports', 'qunit', 'ember-cli-mirage/server', 'ember-cli-mirage'], function (exports, _qunit, _emberCliMirageServer, _emberCliMirage) {\n\n  (0, _qunit.module)('Integration | Database', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        scenarios: {\n          'default': function _default() {}\n        },\n        models: {\n          author: _emberCliMirage.Model\n        },\n        factories: {\n          author: _emberCliMirage.Factory\n        },\n        fixtures: {\n          authors: [{ id: 1, name: 'Zelda' }]\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('[regression] When loaded, fixture files correctly update the database\\'s autoincrement id', function (assert) {\n    this.server.loadFixtures();\n\n    this.server.schema.authors.create({});\n\n    var authors = this.server.db.authors;\n\n    assert.equal(authors.length, 2);\n    assert.deepEqual(authors.map(function (a) {\n      return a.id;\n    }), ['1', '2']);\n  });\n});","define('dummy/tests/integration/database-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/database-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/database-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/factories/after-create-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Factories | afterCreate', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          author: _emberCliMirage.Model,\n          post: _emberCliMirage.Model.extend({\n            author: (0, _emberCliMirage.belongsTo)()\n          }),\n          comment: _emberCliMirage.Model.extend({\n            post: (0, _emberCliMirage.belongsTo)()\n          })\n        },\n        factories: {\n          author: _emberCliMirage.Factory.extend({\n            afterCreate: function afterCreate(author, server) {\n              author.update({ name: 'Sam' });\n              server.create('post', { author: author });\n            }\n          }),\n          post: _emberCliMirage.Factory.extend({\n            title: 'Lorem ipsum',\n            afterCreate: function afterCreate(post, server) {\n              server.create('comment', { post: post });\n            }\n          }),\n          comment: _emberCliMirage.Factory.extend({\n            text: 'Yo soy el nino'\n          })\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('it works for models', function (assert) {\n    var author = this.server.create('author');\n\n    assert.equal(author.name, 'Sam');\n    assert.deepEqual(this.server.db.posts.length, 1);\n    assert.deepEqual(this.server.db.posts[0], { id: '1', title: 'Lorem ipsum', authorId: '1' });\n    assert.deepEqual(this.server.db.comments.length, 1);\n    assert.deepEqual(this.server.db.comments[0], { id: '1', text: 'Yo soy el nino', postId: '1' });\n  });\n\n  // test('it works for db records', function(assert) {\n  // });\n});","define('dummy/tests/integration/factories/after-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/factories/after-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/factories/after-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/factories/helpers-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Factories | helpers', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          author: _emberCliMirage.Model.extend({\n            posts: (0, _emberCliMirage.hasMany)()\n          }),\n          category: _emberCliMirage.Model.extend({\n            posts: (0, _emberCliMirage.hasMany)('post', { inverse: 'kind' })\n          }),\n          post: _emberCliMirage.Model.extend({\n            author: (0, _emberCliMirage.belongsTo)(),\n            kind: (0, _emberCliMirage.belongsTo)('category')\n          })\n        },\n        factories: {\n          author: _emberCliMirage.Factory.extend({\n            name: 'Sam'\n          }),\n          category: _emberCliMirage.Factory.extend({\n            name: 'awesome software'\n          }),\n          post: _emberCliMirage.Factory.extend({\n            title: 'Lorem ipsum',\n\n            author: (0, _emberCliMirage.association)(),\n\n            withCategory: (0, _emberCliMirage.trait)({\n              kind: (0, _emberCliMirage.association)()\n            })\n          })\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('it creates associations with \"association\" helper combininig with traits', function (assert) {\n    var post = this.server.create('post', 'withCategory');\n\n    assert.ok(post.kind);\n    assert.ok(post.author);\n\n    var db = this.server.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], {\n      id: '1',\n      title: 'Lorem ipsum',\n      authorId: '1',\n      kindId: '1'\n    });\n\n    assert.equal(db.authors.length, 1);\n    assert.deepEqual(db.authors[0], {\n      id: '1',\n      name: 'Sam',\n      postIds: ['1']\n    });\n\n    assert.equal(db.categories.length, 1);\n    assert.deepEqual(db.categories[0], {\n      id: '1',\n      name: 'awesome software',\n      postIds: ['1']\n    });\n  });\n});","define('dummy/tests/integration/factories/helpers-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/factories/helpers-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/factories/helpers-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/http-verbs-test', ['exports', 'qunit', 'ember-cli-mirage/server', 'ember-cli-mirage'], function (exports, _qunit, _emberCliMirageServer, _emberCliMirage) {\n\n  (0, _qunit.module)('Integration | HTTP Verbs', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          contact: _emberCliMirage.Model\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('mirage responds to get', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/contacts', function () {\n      return true;\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.equal(res, true);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('mirage responds to post', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.post('/contacts', function () {\n      return true;\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.equal(res, true);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('mirage responds to put', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.put('/contacts', function () {\n      return true;\n    });\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.equal(res, true);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('mirage responds to delete', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server['delete']('/contacts', function () {\n      return true;\n    });\n\n    $.ajax({\n      method: 'DELETE',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.equal(res, true);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('mirage responds to patch', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.patch('/contacts', function () {\n      return true;\n    });\n\n    $.ajax({\n      method: 'PATCH',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.equal(res, true);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('mirage responds to resource', function (assert) {\n    assert.expect(0);\n    var done = assert.async();\n\n    this.server.resource('contacts');\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function () {\n      done();\n    });\n  });\n\n  (0, _qunit.test)('response code can be customized', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/contacts', {}, 404);\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      complete: function complete(res) {\n        assert.ok(res.status, 404);\n        done();\n      }\n    });\n  });\n});","define('dummy/tests/integration/http-verbs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/http-verbs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/http-verbs-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/load-fixtures-test', ['exports', 'qunit', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server #loadFixtures', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        scenarios: {\n          'default': function _default() {}\n        },\n        factories: {\n          author: {},\n          post: {},\n          comment: {}\n        },\n        fixtures: {\n          authors: [{ id: 1, name: 'Zelda' }, { id: 2, name: 'Link' }],\n          posts: [{ id: 1, title: 'Lorem' }, { id: 2, title: 'Ipsum' }],\n          comments: [{ id: 1, title: 'Lorem' }]\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('it can load all fixtures in the map', function (assert) {\n    this.server.loadFixtures();\n\n    assert.equal(this.server.db.authors.length, 2);\n    assert.equal(this.server.db.posts.length, 2);\n    assert.equal(this.server.db.comments.length, 1);\n  });\n\n  (0, _qunit.test)('it can load a single named fixture file', function (assert) {\n    this.server.loadFixtures('authors');\n\n    assert.equal(this.server.db.authors.length, 2);\n    assert.equal(this.server.db.posts.length, 0);\n    assert.equal(this.server.db.comments.length, 0);\n  });\n\n  (0, _qunit.test)('it can load several named single fixtures', function (assert) {\n    this.server.loadFixtures('authors', 'posts');\n\n    assert.equal(this.server.db.authors.length, 2);\n    assert.equal(this.server.db.posts.length, 2);\n    assert.equal(this.server.db.comments.length, 0);\n  });\n});","define('dummy/tests/integration/load-fixtures-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/load-fixtures-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/load-fixtures-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/all-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/collection', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _emberCliMirageOrmCollection, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | #all');\n\n  (0, _qunit.test)('it can return all models', function (assert) {\n    var db = new _emberCliMirageDb['default']({\n      users: [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }]\n    });\n    var User = _emberCliMirageOrmModel['default'].extend();\n    var schema = new _emberCliMirageOrmSchema['default'](db, {\n      user: User\n    });\n\n    var users = schema.users.all();\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.ok(users.models[0] instanceof User, 'each member of the collection is a model');\n    assert.equal(users.models.length, 2);\n    assert.deepEqual(users.models[1].attrs, { id: '2', name: 'Zelda' });\n  });\n\n  (0, _qunit.test)('it returns an empty array when no models exist', function (assert) {\n    var db = new _emberCliMirageDb['default']({ users: [] });\n\n    var User = _emberCliMirageOrmModel['default'].extend();\n    var schema = new _emberCliMirageOrmSchema['default'](db, {\n      user: User\n    });\n\n    var users = schema.users.all();\n\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.equal(users.modelName, 'user', 'the collection knows its type');\n    assert.equal(users.models.length, 0);\n  });\n});","define('dummy/tests/integration/orm/all-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/all-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/all-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/attrs-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _qunit) {\n\n  var db, schema, User;\n  (0, _qunit.module)('Integration | ORM | attrs', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']({ users: [{ id: 1, name: 'Link', evil: false }] });\n\n      User = _emberCliMirageOrmModel['default'].extend();\n      schema = new _emberCliMirageOrmSchema['default'](db, {\n        user: User\n      });\n    }\n  });\n\n  (0, _qunit.test)('attrs returns the models attributes', function (assert) {\n    var user = schema.users.find(1);\n\n    assert.deepEqual(user.attrs, { id: '1', name: 'Link', evil: false });\n  });\n\n  (0, _qunit.test)('attributes can be read via plain property access', function (assert) {\n    var user = schema.users.find(1);\n\n    assert.equal(user.name, 'Link');\n  });\n});","define('dummy/tests/integration/orm/attrs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/attrs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/attrs-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        author: _emberCliMirage.Model.extend(),\n        post: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n\n        return [this.schema.posts.find(insertedPost.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n        var post = this.schema.posts.find(insertedPost.id);\n        var author = this.schema.authors['new']({ name: 'Bob' });\n\n        post.author = author;\n\n        return [post, author];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedAuthor = this.db.authors.insert({ name: 'Bob' });\n        var insertedPost = this.db.posts.insert({ title: 'Lorem', authorId: insertedAuthor.id });\n        var post = this.schema.posts.find(insertedPost.id);\n        var author = this.schema.authors.find(insertedAuthor.id);\n\n        return [post, author];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.posts['new']({ title: 'Lorem' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n        var newAuthor = this.schema.authors['new']({ name: 'Bob' });\n        post.author = newAuthor;\n\n        return [post, newAuthor];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedAuthor = this.db.authors.insert({ name: 'Bob' });\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n        var savedAuthor = this.schema.authors.find(insertedAuthor.id);\n\n        post.author = savedAuthor;\n\n        return [post, savedAuthor];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedAuthor = this.db.authors.insert({ name: 'Bob' });\n\n        return this.schema.authors.find(insertedAuthor.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.authors['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/_regressions-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | regressions');\n\n  (0, _qunit.test)('belongsTo accessors works when foreign key is present but falsy', function (assert) {\n    var db = new _emberCliMirageDb['default']({\n      posts: [{ id: 1, authorId: 0, name: 'some post' }],\n      authors: [{ id: 0, name: 'Foo' }]\n    });\n\n    var schema = new _emberCliMirageOrmSchema['default'](db, {\n      author: _emberCliMirage.Model.extend(),\n      post: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)()\n      })\n    });\n\n    var post = schema.posts.find(1);\n    assert.equal(post.author.name, 'Foo');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/_regressions-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/_regressions-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/_regressions-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var author = _helper$state2[1];\n\n      assert.deepEqual(post.author, author ? author : null, 'the model reference is correct');\n      assert.equal(post.authorId, author ? author.id : null, 'the modelId reference is correct');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var ganon = post.createAuthor({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(post.author.attrs, ganon.attrs);\n      assert.equal(post.authorId, ganon.id);\n      assert.equal(this.helper.schema.posts.find(post.id).authorId, ganon.id, 'the child was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var ganon = post.newAuthor({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(post.author, ganon);\n      assert.equal(post.authorId, null);\n\n      post.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(post.authorId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var savedAuthor = this.helper.savedParent();\n\n      post.authorId = savedAuthor.id;\n\n      assert.equal(post.authorId, savedAuthor.id);\n      assert.deepEqual(post.author.attrs, savedAuthor.attrs);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var post = _helper$state32[0];\n\n      post.authorId = null;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var savedAuthor = this.helper.savedParent();\n\n      post.author = savedAuthor;\n\n      assert.equal(post.authorId, savedAuthor.id);\n      assert.deepEqual(post.author, savedAuthor);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var post = _helper$state32[0];\n\n      var newAuthor = this.helper.newParent();\n\n      post.author = newAuthor;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, newAuthor);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var post = _helper$state42[0];\n\n      post.author = null;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var author = this.helper.schema.create('author');\n    var post = this.helper.schema.create('post', {\n      authorId: author.id\n    });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.helper.schema.db.authors.length, 1);\n    assert.deepEqual(this.helper.schema.db.authors[0], { id: '1' });\n    assert.equal(this.helper.schema.db.posts.length, 1);\n    assert.deepEqual(this.helper.schema.db.posts[0], { id: '1', authorId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var author = this.helper.schema.create('author');\n    var post = this.helper.schema.create('post', {\n      author: author\n    });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.helper.schema.db.authors.length, 1);\n    assert.deepEqual(this.helper.schema.db.authors[0], { id: '1' });\n    assert.equal(this.helper.schema.db.posts.length, 1);\n    assert.deepEqual(this.helper.schema.db.posts[0], { id: '1', authorId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('post', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var author = _helper$state2[1];\n\n      if (author) {\n        author.destroy();\n        post.reload();\n      }\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo1Basic_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Basic | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo1Basic_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ authorId: author.id });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author, author);\n    assert.deepEqual(post.attrs, { authorId: author.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.posts['new']({ authorId: 2 });\n    }, /You're instantiating a post that has a authorId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var post = this.schema.posts['new']({ authorId: null });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ author: author });\n\n    assert.equal(post.authorId, 1);\n    assert.deepEqual(post.author, author);\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.authors['new']({ name: 'Zelda' });\n    var post = this.schema.posts['new']({ author: zelda });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, zelda);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var post = this.schema.posts['new']({ author: null });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ author: author, authorId: author.id });\n\n    assert.equal(post.authorId, '1');\n    assert.deepEqual(post.author, author);\n    assert.deepEqual(post.attrs, { authorId: author.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var post = this.schema.posts['new']({});\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var post = this.schema.posts['new']();\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/1-basic/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/1-basic/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/1-basic/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend(),\n        post: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('user')\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n\n        return [this.schema.posts.find(insertedPost.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n        var post = this.schema.posts.find(insertedPost.id);\n        var author = this.schema.users['new']({ name: 'Bob' });\n\n        post.author = author;\n\n        return [post, author];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedAuthor = this.db.users.insert({ name: 'Bob' });\n        var insertedPost = this.db.posts.insert({ title: 'Lorem', authorId: insertedAuthor.id });\n        var post = this.schema.posts.find(insertedPost.id);\n        var author = this.schema.users.find(insertedAuthor.id);\n\n        return [post, author];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.posts['new']({ title: 'Lorem' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n        var newAuthor = this.schema.users['new']({ name: 'Bob' });\n        post.author = newAuthor;\n\n        return [post, newAuthor];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedAuthor = this.db.users.insert({ name: 'Bob' });\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n        var savedAuthor = this.schema.users.find(insertedAuthor.id);\n\n        post.author = savedAuthor;\n\n        return [post, savedAuthor];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedAuthor = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedAuthor.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/2-named/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var author = _helper$state2[1];\n\n      assert.deepEqual(post.author, author ? author : null, 'the model reference is correct');\n      assert.equal(post.authorId, author ? author.id : null, 'the modelId reference is correct');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var ganon = post.createAuthor({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(post.author, ganon);\n      assert.equal(post.authorId, ganon.id);\n      assert.equal(this.helper.schema.posts.find(post.id).authorId, ganon.id, 'the child was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var ganon = post.newAuthor({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(post.author, ganon);\n      assert.equal(post.authorId, null);\n\n      post.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(post.authorId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var savedAuthor = this.helper.savedParent();\n\n      post.authorId = savedAuthor.id;\n\n      assert.equal(post.authorId, savedAuthor.id);\n      assert.deepEqual(post.author, savedAuthor);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var post = _helper$state32[0];\n\n      post.authorId = null;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var post = _helper$state2[0];\n\n      var savedAuthor = this.helper.savedParent();\n\n      post.author = savedAuthor;\n\n      assert.equal(post.authorId, savedAuthor.id);\n      assert.deepEqual(post.author, savedAuthor);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var post = _helper$state32[0];\n\n      var newAuthor = this.helper.newParent();\n\n      post.author = newAuthor;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, newAuthor);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var post = _helper$state42[0];\n\n      post.author = null;\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var author = this.helper.schema.create('user');\n    var post = this.helper.schema.create('post', {\n      authorId: author.id\n    });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.helper.schema.db.users.length, 1);\n    assert.deepEqual(this.helper.schema.db.users[0], { id: '1' });\n    assert.equal(this.helper.schema.db.posts.length, 1);\n    assert.deepEqual(this.helper.schema.db.posts[0], { id: '1', authorId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var author = this.helper.schema.create('user');\n    var post = this.helper.schema.create('post', {\n      author: author\n    });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.helper.schema.db.users.length, 1);\n    assert.deepEqual(this.helper.schema.db.users[0], { id: '1' });\n    assert.equal(this.helper.schema.db.posts.length, 1);\n    assert.deepEqual(this.helper.schema.db.posts[0], { id: '1', authorId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('post', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var user = _helper$state2[1];\n\n      if (user) {\n        user.destroy();\n        post.reload();\n      }\n\n      assert.equal(post.authorId, null);\n      assert.deepEqual(post.author, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo2Named_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo2Named_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ authorId: author.id });\n\n    assert.equal(post.authorId, author.id);\n    assert.deepEqual(post.author, author);\n    assert.deepEqual(post.attrs, { authorId: author.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.posts['new']({ authorId: 2 });\n    }, /You're instantiating a post that has a authorId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var post = this.schema.posts['new']({ authorId: null });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ author: author });\n\n    assert.equal(post.authorId, 1);\n    assert.deepEqual(post.author, author);\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var post = this.schema.posts['new']({ author: zelda });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, zelda);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var post = this.schema.posts['new']({ author: null });\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var author = this.helper.savedParent();\n    var post = this.schema.posts['new']({ author: author, authorId: author.id });\n\n    assert.equal(post.authorId, '1');\n    assert.deepEqual(post.author, author);\n    assert.deepEqual(post.attrs, { authorId: author.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var post = this.schema.posts['new']({});\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var post = this.schema.posts['new']();\n\n    assert.equal(post.authorId, null);\n    assert.deepEqual(post.author, null);\n    assert.deepEqual(post.attrs, { authorId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/2-named/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/2-named/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/2-named/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)() // implicit inverse\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var friend = this.schema.users['new']({ name: 'Bob' });\n\n        user.user = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var insertedUser = this.db.users.insert({ name: 'Link', userId: insertedFriend.id });\n        this.db.users.update(insertedFriend.id, { userId: insertedUser.id });\n        var user = this.schema.users.find(insertedUser.id);\n        var friend = this.schema.users.find(insertedFriend.id);\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var friend = this.schema.users['new']({ name: 'Link' });\n        var user = this.schema.users['new']({ name: 'Bob' });\n        user.user = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var user = this.schema.users['new']({ name: 'Link' });\n        var savedFriend = this.schema.users.find(insertedFriend.id);\n\n        user.user = savedFriend;\n\n        return [user, savedFriend];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedParent.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var friend = _helper$state2[1];\n\n      // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison\n      if (friend) {\n        assert.deepEqual(user.user.attrs, friend.attrs, 'the model reference is correct');\n        assert.equal(user.userId, friend.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.user, null, 'the model reference is correct');\n        assert.equal(user.userId, null, 'the modelId reference is correct');\n      }\n\n      // If there's a friend in this state, make sure the inverse association is correct\n      if (friend) {\n        assert.deepEqual(friend.user.attrs, user.attrs, 'the inverse model reference is correct');\n        assert.equal(friend.userId, user.id, 'the inverse modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var ganon = user.createUser({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(user.user.attrs, ganon.attrs);\n      assert.deepEqual(ganon.user.attrs, user.attrs, 'the inverse was set');\n      assert.equal(user.userId, ganon.id);\n      assert.equal(ganon.userId, user.id, 'the inverse was set');\n      assert.equal(this.helper.schema.users.find(user.id).userId, ganon.id, 'the user was persisted');\n\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var ganon = user.newUser({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(user.user, ganon);\n      assert.equal(user.userId, null);\n      assert.deepEqual(ganon.user, user, 'the inverse was set');\n\n      user.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(user.userId, ganon.id, 'the childs fk was updated');\n\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var friend = this.helper.savedParent();\n\n      user.userId = friend.id;\n\n      assert.equal(user.userId, friend.id);\n      assert.deepEqual(user.user.attrs, friend.attrs);\n\n      user.save();\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var user = _helper$state32[0];\n      var originalUser = _helper$state32[1];\n\n      user.userId = null;\n\n      assert.equal(user.userId, null);\n      assert.equal(user.user, null);\n\n      user.save();\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var friend = this.helper.savedParent();\n\n      user.user = friend;\n\n      assert.equal(user.userId, friend.id);\n      assert.deepEqual(user.user.attrs, friend.attrs);\n\n      user.save();\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var user = _helper$state32[0];\n      var originalUser = _helper$state32[1];\n\n      var friend = this.helper.newParent();\n\n      user.user = friend;\n\n      assert.equal(user.userId, null);\n      assert.deepEqual(user.user.attrs, friend.attrs);\n\n      user.save();\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var user = _helper$state42[0];\n      var originalUser = _helper$state42[1];\n\n      user.user = null;\n\n      assert.equal(user.userId, null);\n      assert.deepEqual(user.user, null);\n\n      user.save();\n      if (originalUser) {\n        originalUser.reload();\n        assert.equal(originalUser.userId, null, 'old inverses were cleared out');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      userId: friend.id\n    });\n\n    friend.reload();\n\n    assert.equal(user.userId, friend.id);\n    assert.deepEqual(user.user.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', userId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', userId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      user: friend\n    });\n\n    assert.equal(user.userId, friend.id);\n    assert.deepEqual(user.user.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', userId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', userId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var targetUser = _helper$state2[1];\n\n      if (targetUser) {\n        targetUser.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.userId, null);\n      assert.deepEqual(user.user, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Reflexive | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo3Reflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ userId: friend.id });\n\n    assert.equal(user.userId, friend.id);\n    assert.deepEqual(user.user.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { userId: friend.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ userId: 2 });\n    }, /You're instantiating a user that has a userId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var user = this.schema.users['new']({ userId: null });\n\n    assert.equal(user.userId, null);\n    assert.equal(user.user, null);\n    assert.deepEqual(user.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ user: friend });\n\n    assert.equal(user.userId, 1);\n    assert.deepEqual(user.user.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { userId: null }); // this would update when saved\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var user = this.schema.users['new']({ user: zelda });\n\n    assert.equal(user.userId, null);\n    assert.deepEqual(user.user, zelda);\n    assert.deepEqual(user.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var user = this.schema.users['new']({ user: null });\n\n    assert.equal(user.userId, null);\n    assert.deepEqual(user.user, null);\n    assert.deepEqual(user.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ user: friend, userId: friend.id });\n\n    assert.equal(user.userId, '1');\n    assert.deepEqual(user.user, friend);\n    assert.deepEqual(user.attrs, { userId: friend.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.equal(user.userId, null);\n    assert.deepEqual(user.user, null);\n    assert.deepEqual(user.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.equal(user.userId, null);\n    assert.deepEqual(user.user, null);\n    assert.deepEqual(user.attrs, { userId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/3-reflexive/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/3-reflexive/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/3-reflexive/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          bestFriend: (0, _emberCliMirage.belongsTo)('user') // implicit inverse\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var friend = this.schema.users['new']({ name: 'Bob' });\n\n        user.bestFriend = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var insertedUser = this.db.users.insert({ name: 'Link', bestFriendId: insertedFriend.id });\n        this.db.users.update(insertedFriend.id, { bestFriendId: insertedUser.id });\n        var user = this.schema.users.find(insertedUser.id);\n        var friend = this.schema.users.find(insertedFriend.id);\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var friend = this.schema.users['new']({ name: 'Link' });\n        var user = this.schema.users['new']({ name: 'Bob' });\n        user.bestFriend = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var user = this.schema.users['new']({ name: 'Link' });\n        var savedFriend = this.schema.users.find(insertedFriend.id);\n\n        user.bestFriend = savedFriend;\n\n        return [user, savedFriend];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedParent.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var friend = _helper$state2[1];\n\n      // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison\n      if (friend) {\n        assert.deepEqual(user.bestFriend.attrs, friend.attrs, 'the model reference is correct');\n        assert.equal(user.bestFriendId, friend.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.bestFriend, null, 'the model reference is correct');\n        assert.equal(user.bestFriendId, null, 'the modelId reference is correct');\n      }\n\n      // If there's a friend in this state, make sure the inverse association is correct\n      if (friend) {\n        assert.deepEqual(friend.bestFriend.attrs, user.attrs, 'the inverse model reference is correct');\n        assert.equal(friend.bestFriendId, user.id, 'the inverse modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var ganon = user.createBestFriend({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(user.bestFriend.attrs, ganon.attrs);\n      assert.equal(user.bestFriendId, ganon.id);\n      assert.equal(this.helper.schema.users.find(user.id).bestFriendId, ganon.id, 'the user was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var ganon = user.newBestFriend({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(user.bestFriend, ganon);\n      assert.equal(user.bestFriendId, null);\n\n      user.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(user.bestFriendId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var friend = this.helper.savedParent();\n\n      user.bestFriendId = friend.id;\n\n      assert.equal(user.bestFriendId, friend.id);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      user.bestFriendId = null;\n\n      assert.equal(user.bestFriendId, null);\n      assert.equal(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var friend = this.helper.savedParent();\n\n      user.bestFriend = friend;\n\n      assert.equal(user.bestFriendId, friend.id);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      var friend = this.helper.newParent();\n\n      user.bestFriend = friend;\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var user = _helper$state42[0];\n\n      user.bestFriend = null;\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      bestFriendId: friend.id\n    });\n\n    friend.reload();\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', bestFriendId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', bestFriendId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      bestFriend: friend\n    });\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', bestFriendId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', bestFriendId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var bestFriend = _helper$state2[1];\n\n      if (bestFriend) {\n        bestFriend.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo4NamedReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriendId: friend.id });\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { bestFriendId: friend.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ bestFriendId: 2 });\n    }, /You're instantiating a user that has a bestFriendId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var user = this.schema.users['new']({ bestFriendId: null });\n\n    assert.equal(user.bestFriendId, null);\n    assert.equal(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriend: friend });\n\n    assert.equal(user.bestFriendId, 1);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { bestFriendId: null }); // this would update when saved\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var user = this.schema.users['new']({ bestFriend: zelda });\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, zelda);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var user = this.schema.users['new']({ bestFriend: null });\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriend: friend, bestFriendId: friend.id });\n\n    assert.equal(user.bestFriendId, '1');\n    assert.deepEqual(user.bestFriend, friend);\n    assert.deepEqual(user.attrs, { bestFriendId: friend.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/4-named-reflexive/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/4-named-reflexive/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/4-named-reflexive/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          bestFriend: (0, _emberCliMirage.belongsTo)('user', { inverse: 'bestFriend' })\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var friend = this.schema.users['new']({ name: 'Bob' });\n\n        user.bestFriend = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var insertedUser = this.db.users.insert({ name: 'Link', bestFriendId: insertedFriend.id });\n        this.db.users.update(insertedFriend.id, { bestFriendId: insertedUser.id });\n        var user = this.schema.users.find(insertedUser.id);\n        var friend = this.schema.users.find(insertedFriend.id);\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var friend = this.schema.users['new']({ name: 'Link' });\n        var user = this.schema.users['new']({ name: 'Bob' });\n        user.bestFriend = friend;\n\n        return [user, friend];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedFriend = this.db.users.insert({ name: 'Bob' });\n        var user = this.schema.users['new']({ name: 'Link' });\n        var savedFriend = this.schema.users.find(insertedFriend.id);\n\n        user.bestFriend = savedFriend;\n\n        return [user, savedFriend];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedParent.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var friend = _helper$state2[1];\n\n      // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison\n      if (friend) {\n        assert.deepEqual(user.bestFriend.attrs, friend.attrs, 'the model reference is correct');\n        assert.equal(user.bestFriendId, friend.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.bestFriend, null, 'the model reference is correct');\n        assert.equal(user.bestFriendId, null, 'the modelId reference is correct');\n      }\n\n      // If there's a friend in this state, make sure the inverse association is correct\n      if (friend) {\n        assert.deepEqual(friend.bestFriend.attrs, user.attrs, 'the inverse model reference is correct');\n        assert.equal(friend.bestFriendId, user.id, 'the inverse modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var ganon = user.createBestFriend({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(user.bestFriend.attrs, ganon.attrs);\n      assert.equal(user.bestFriendId, ganon.id);\n      assert.equal(this.helper.schema.users.find(user.id).bestFriendId, ganon.id, 'the user was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var ganon = user.newBestFriend({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(user.bestFriend, ganon);\n      assert.equal(user.bestFriendId, null);\n\n      user.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(user.bestFriendId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var friend = this.helper.savedParent();\n\n      user.bestFriendId = friend.id;\n\n      assert.equal(user.bestFriendId, friend.id);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      user.bestFriendId = null;\n\n      assert.equal(user.bestFriendId, null);\n      assert.equal(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var friend = this.helper.savedParent();\n\n      user.bestFriend = friend;\n\n      assert.equal(user.bestFriendId, friend.id);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      var friend = this.helper.newParent();\n\n      user.bestFriend = friend;\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var user = _helper$state42[0];\n\n      user.bestFriend = null;\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      bestFriendId: friend.id\n    });\n\n    friend.reload();\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', bestFriendId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', bestFriendId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var friend = schema.create('user');\n    var user = schema.create('user', {\n      bestFriend: friend\n    });\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', bestFriendId: '2' });\n    assert.deepEqual(schema.db.users[1], { id: '2', bestFriendId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var bestFriend = _helper$state2[1];\n\n      if (bestFriend) {\n        bestFriend.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.bestFriendId, null);\n      assert.deepEqual(user.bestFriend, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named Reflexive Explicit Inverse | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo5NamedReflexiveExplicitInverse_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriendId: friend.id });\n\n    assert.equal(user.bestFriendId, friend.id);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { bestFriendId: friend.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ bestFriendId: 2 });\n    }, /You're instantiating a user that has a bestFriendId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var user = this.schema.users['new']({ bestFriendId: null });\n\n    assert.equal(user.bestFriendId, null);\n    assert.equal(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriend: friend });\n\n    assert.equal(user.bestFriendId, 1);\n    assert.deepEqual(user.bestFriend.attrs, friend.attrs);\n    assert.deepEqual(user.attrs, { bestFriendId: null }); // this would update when saved\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var user = this.schema.users['new']({ bestFriend: zelda });\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, zelda);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var user = this.schema.users['new']({ bestFriend: null });\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var friend = this.helper.savedParent();\n    var user = this.schema.users['new']({ bestFriend: friend, bestFriendId: friend.id });\n\n    assert.equal(user.bestFriendId, '1');\n    assert.deepEqual(user.bestFriend, friend);\n    assert.deepEqual(user.attrs, { bestFriendId: friend.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.equal(user.bestFriendId, null);\n    assert.deepEqual(user.bestFriend, null);\n    assert.deepEqual(user.attrs, { bestFriendId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/5-named-reflexive-explicit-inverse/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)('user', { inverse: null })\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var child = this.schema.users.create({ name: 'Link' });\n        var parent = this.schema.users['new']({ name: 'Bob' });\n\n        child.user = parent;\n\n        return [child, parent];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n        var insertedChild = this.db.users.insert({ name: 'Link', userId: insertedParent.id });\n        var child = this.schema.users.find(insertedChild.id);\n        var parent = this.schema.users.find(insertedParent.id);\n\n        return [child, parent];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var parent = this.schema.users['new']({ name: 'Link' });\n        var child = this.schema.users['new']({ name: 'Bob' });\n        child.user = parent;\n\n        return [child, parent];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n        var child = this.schema.users['new']({ name: 'Link' });\n        var savedParent = this.schema.users.find(insertedParent.id);\n\n        child.user = savedParent;\n\n        return [child, savedParent];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedParent.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var parent = _helper$state2[1];\n\n      // We use .attrs here to avoid infinite recursion\n      if (parent) {\n        assert.deepEqual(user.user.attrs, parent.attrs, 'the model reference is correct');\n        assert.equal(user.userId, parent.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.user, null, 'the model reference is correct');\n        assert.equal(user.userId, null, 'the modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var ganon = child.createUser({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(child.user.attrs, ganon.attrs);\n      assert.equal(child.userId, ganon.id);\n      assert.equal(this.helper.schema.users.find(child.id).userId, ganon.id, 'the child was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var ganon = child.newUser({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(child.user, ganon);\n      assert.equal(child.userId, null);\n\n      child.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(child.userId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var savedParent = this.helper.savedParent();\n\n      child.userId = savedParent.id;\n\n      assert.equal(child.userId, savedParent.id);\n      assert.deepEqual(child.user.attrs, savedParent.attrs);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var child = _helper$state32[0];\n\n      child.userId = null;\n\n      assert.equal(child.userId, null);\n      assert.deepEqual(child.user, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var savedParent = this.helper.savedParent();\n\n      child.user = savedParent;\n\n      assert.equal(child.userId, savedParent.id);\n      assert.deepEqual(child.user.attrs, savedParent.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var child = _helper$state32[0];\n\n      var newParent = this.helper.newParent();\n\n      child.user = newParent;\n\n      assert.equal(child.userId, null);\n      assert.deepEqual(child.user, newParent);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var child = _helper$state42[0];\n\n      child.user = null;\n\n      assert.equal(child.userId, null);\n      assert.deepEqual(child.user, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var parent = schema.create('user');\n    var child = schema.create('user', {\n      userId: parent.id\n    });\n\n    assert.equal(child.userId, parent.id);\n    assert.deepEqual(child.user.attrs, parent.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', userId: null });\n    assert.deepEqual(schema.db.users[1], { id: '2', userId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var parent = schema.create('user');\n    var child = schema.create('user', {\n      user: parent\n    });\n\n    assert.equal(child.userId, parent.id);\n    assert.deepEqual(child.user.attrs, parent.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', userId: null });\n    assert.deepEqual(schema.db.users[1], { id: '2', userId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var targetUser = _helper$state2[1];\n\n      if (targetUser) {\n        targetUser.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.userId, null);\n      assert.deepEqual(user.user, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One-Way Reflexive | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo6OneWayReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ userId: parent.id });\n\n    assert.equal(child.userId, parent.id);\n    assert.deepEqual(child.user.attrs, parent.attrs);\n    assert.deepEqual(child.attrs, { userId: parent.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ userId: 2 });\n    }, /You're instantiating a user that has a userId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var child = this.schema.users['new']({ userId: null });\n\n    assert.equal(child.userId, null);\n    assert.deepEqual(child.user, null);\n    assert.deepEqual(child.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ user: parent });\n\n    assert.equal(child.userId, 1);\n    assert.deepEqual(child.user.attrs, parent.attrs);\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var child = this.schema.users['new']({ user: zelda });\n\n    assert.equal(child.userId, null);\n    assert.deepEqual(child.user, zelda);\n    assert.deepEqual(child.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var child = this.schema.users['new']({ user: null });\n\n    assert.equal(child.userId, null);\n    assert.deepEqual(child.user, null);\n    assert.deepEqual(child.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ user: parent, userId: parent.id });\n\n    assert.equal(child.userId, '1');\n    assert.deepEqual(child.user.attrs, parent.attrs);\n    assert.deepEqual(child.attrs, { userId: parent.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var child = this.schema.users['new']({});\n\n    assert.equal(child.userId, null);\n    assert.deepEqual(child.user, null);\n    assert.deepEqual(child.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var child = this.schema.users['new']();\n\n    assert.equal(child.userId, null);\n    assert.deepEqual(child.user, null);\n    assert.deepEqual(child.attrs, { userId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/6-one-way-reflexive/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/6-one-way-reflexive/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/6-one-way-reflexive/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          parent: (0, _emberCliMirage.belongsTo)('user', { inverse: null })\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var child = this.schema.users.create({ name: 'Link' });\n        var parent = this.schema.users['new']({ name: 'Bob' });\n\n        child.parent = parent;\n\n        return [child, parent];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n        var insertedChild = this.db.users.insert({ name: 'Link', parentId: insertedParent.id });\n        var child = this.schema.users.find(insertedChild.id);\n        var parent = this.schema.users.find(insertedParent.id);\n\n        return [child, parent];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var parent = this.schema.users['new']({ name: 'Link' });\n        var child = this.schema.users['new']({ name: 'Bob' });\n        child.parent = parent;\n\n        return [child, parent];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n        var child = this.schema.users['new']({ name: 'Link' });\n        var savedParent = this.schema.users.find(insertedParent.id);\n\n        child.parent = savedParent;\n\n        return [child, savedParent];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedParent = this.db.users.insert({ name: 'Bob' });\n\n        return this.schema.users.find(insertedParent.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Bob' });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var parent = _helper$state2[1];\n\n      // We use .attrs here to avoid infinite recursion\n      if (parent) {\n        assert.deepEqual(user.parent.attrs, parent.attrs, 'the model reference is correct');\n        assert.equal(user.parentId, parent.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.parent, null, 'the model reference is correct');\n        assert.equal(user.parentId, null, 'the modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var ganon = child.createParent({ name: 'Ganon' });\n\n      assert.ok(ganon.id, 'the parent was persisted');\n      assert.deepEqual(child.parent.attrs, ganon.attrs);\n      assert.equal(child.parentId, ganon.id);\n      assert.equal(this.helper.schema.users.find(child.id).parentId, ganon.id, 'the child was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var ganon = child.newParent({ name: 'Ganon' });\n\n      assert.ok(!ganon.id, 'the parent was not persisted');\n      assert.deepEqual(child.parent, ganon);\n      assert.equal(child.parentId, null);\n\n      child.save();\n\n      assert.ok(ganon.id, 'saving the child persists the parent');\n      assert.equal(child.parentId, ganon.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var savedParent = this.helper.savedParent();\n\n      child.parentId = savedParent.id;\n\n      assert.equal(child.parentId, savedParent.id);\n      assert.deepEqual(child.parent.attrs, savedParent.attrs);\n    });\n  });\n\n  ['savedChildSavedParent', 'newChildSavedParent'].forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var child = _helper$state32[0];\n\n      child.parentId = null;\n\n      assert.equal(child.parentId, null);\n      assert.deepEqual(child.parent, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var child = _helper$state2[0];\n\n      var savedParent = this.helper.savedParent();\n\n      child.parent = savedParent;\n\n      assert.equal(child.parentId, savedParent.id);\n      assert.deepEqual(child.parent.attrs, savedParent.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var child = _helper$state32[0];\n\n      var newParent = this.helper.newParent();\n\n      child.parent = newParent;\n\n      assert.equal(child.parentId, null);\n      assert.deepEqual(child.parent, newParent);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var child = _helper$state42[0];\n\n      child.parent = null;\n\n      assert.equal(child.parentId, null);\n      assert.deepEqual(child.parent, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var parent = schema.create('user');\n    var child = schema.create('user', {\n      parentId: parent.id\n    });\n\n    assert.equal(child.parentId, parent.id);\n    assert.deepEqual(child.parent.attrs, parent.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', parentId: null });\n    assert.deepEqual(schema.db.users[1], { id: '2', parentId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var parent = schema.create('user');\n    var child = schema.create('user', {\n      parent: parent\n    });\n\n    assert.equal(child.parentId, parent.id);\n    assert.deepEqual(child.parent.attrs, parent.attrs);\n    assert.equal(schema.db.users.length, 2);\n    assert.deepEqual(schema.db.users[0], { id: '1', parentId: null });\n    assert.deepEqual(schema.db.users[1], { id: '2', parentId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var parent = _helper$state2[1];\n\n      if (parent) {\n        parent.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.parentId, null);\n      assert.deepEqual(user.parent, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Named One-Way Reflexive | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo7NamedOneWayReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ parentId: parent.id });\n\n    assert.equal(child.parentId, parent.id);\n    assert.deepEqual(child.parent.attrs, parent.attrs);\n    assert.deepEqual(child.attrs, { parentId: parent.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ parentId: 2 });\n    }, /You're instantiating a user that has a parentId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var child = this.schema.users['new']({ parentId: null });\n\n    assert.equal(child.parentId, null);\n    assert.deepEqual(child.parent, null);\n    assert.deepEqual(child.attrs, { parentId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ parent: parent });\n\n    assert.equal(child.parentId, 1);\n    assert.deepEqual(child.parent.attrs, parent.attrs);\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var zelda = this.schema.users['new']({ name: 'Zelda' });\n    var child = this.schema.users['new']({ parent: zelda });\n\n    assert.equal(child.parentId, null);\n    assert.deepEqual(child.parent, zelda);\n    assert.deepEqual(child.attrs, { parentId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var child = this.schema.users['new']({ parent: null });\n\n    assert.equal(child.parentId, null);\n    assert.deepEqual(child.parent, null);\n    assert.deepEqual(child.attrs, { parentId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var parent = this.helper.savedParent();\n    var child = this.schema.users['new']({ parent: parent, parentId: parent.id });\n\n    assert.equal(child.parentId, '1');\n    assert.deepEqual(child.parent.attrs, parent.attrs);\n    assert.deepEqual(child.attrs, { parentId: parent.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var child = this.schema.users['new']({});\n\n    assert.equal(child.parentId, null);\n    assert.deepEqual(child.parent, null);\n    assert.deepEqual(child.attrs, { parentId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var child = this.schema.users['new']();\n\n    assert.equal(child.parentId, null);\n    assert.deepEqual(child.parent, null);\n    assert.deepEqual(child.attrs, { parentId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/7-named-one-way-reflexive/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a belongsTo association can be in six states\n    with respect to its association. This helper class\n    returns a child (and its association) in these various states.\n  \n    The return value is an array of the form\n  \n      [ child, parent ]\n  \n    where the parent may be undefined.\n  */\n\n  var BelongsToHelper = (function () {\n    function BelongsToHelper() {\n      _classCallCheck(this, BelongsToHelper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          profile: (0, _emberCliMirage.belongsTo)()\n        }),\n        profile: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    }\n\n    _createClass(BelongsToHelper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(insertedUser.id), undefined];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var profile = this.schema.profiles['new']({ age: 300 });\n\n        user.profile = profile;\n\n        return [user, profile];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var insertedProfile = this.db.profiles.insert({ age: 300 });\n        var insertedUser = this.db.users.insert({ name: 'Link', profileId: insertedProfile.id });\n        this.db.profiles.update(insertedProfile.id, { userId: insertedUser.id });\n        var user = this.schema.users.find(insertedUser.id);\n        var profile = this.schema.profiles.find(insertedProfile.id);\n\n        return [user, profile];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        return [this.schema.users['new']({ name: 'Link' }), undefined];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var profile = this.schema.profiles['new']({ age: 300 });\n        var user = this.schema.users['new']({ name: 'Link' });\n        user.profile = profile;\n\n        return [user, profile];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var insertedProfile = this.db.profiles.insert({ age: 300 });\n        var user = this.schema.users['new']({ name: 'Link' });\n        var savedProfile = this.schema.profiles.find(insertedProfile.id);\n\n        user.profile = savedProfile;\n\n        return [user, savedProfile];\n      }\n\n      // Just a saved unassociated parent.\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedProfile = this.db.profiles.insert({ age: 300 });\n\n        return this.schema.profiles.find(insertedProfile.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.profiles['new']({ age: 300 });\n      }\n    }]);\n\n    return BelongsToHelper;\n  })();\n\n  exports['default'] = BelongsToHelper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/accessor-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var profile = _helper$state2[1];\n\n      // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison\n      if (profile) {\n        assert.deepEqual(user.profile.attrs, profile.attrs, 'the model reference is correct');\n        assert.equal(user.profileId, profile.id, 'the modelId reference is correct');\n      } else {\n        assert.deepEqual(user.profile, null, 'the model reference is correct');\n        assert.equal(user.profileId, null, 'the modelId reference is correct');\n      }\n\n      // If there's a profile in this state, make sure the inverse association is correct\n      if (profile) {\n        assert.deepEqual(profile.user.attrs, user.attrs, 'the inverse model reference is correct');\n        assert.equal(profile.userId, user.id, 'the inverse modelId reference is correct');\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a belongs-to association, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var profile = user.createProfile({ age: 300 });\n\n      assert.ok(profile.id, 'the parent was persisted');\n      assert.deepEqual(user.profile.attrs, profile.attrs);\n      assert.deepEqual(profile.user.attrs, user.attrs, 'the inverse was set');\n      assert.equal(user.profileId, profile.id);\n      assert.equal(this.helper.schema.users.find(user.id).profileId, profile.id, 'the user was persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-new-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var profile = user.newProfile({ age: 300 });\n\n      assert.ok(!profile.id, 'the parent was not persisted');\n      assert.deepEqual(user.profile, profile);\n      assert.equal(user.profileId, null);\n      assert.deepEqual(profile.user, user, 'the inverse was set');\n      assert.equal(profile.userId, user.id);\n\n      user.save();\n\n      assert.ok(profile.id, 'saving the child persists the parent');\n      assert.equal(user.profileId, profile.id, 'the childs fk was updated');\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-id-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | association #setId', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var profile = this.helper.savedParent();\n\n      user.profileId = profile.id;\n\n      assert.equal(user.profileId, profile.id);\n      assert.deepEqual(user.profile.attrs, profile.attrs);\n\n      user.save();\n      profile.reload();\n\n      assert.equal(profile.userId, user.id, 'the inverse was set');\n      assert.deepEqual(profile.user.attrs, user.attrs);\n    });\n  });\n\n  // [\n  //   'savedChildSavedParent',\n  //   'newChildSavedParent'\n  // ].forEach((state) => {\n  //\n  //   test(`a ${state} can clear its association via a null parentId`, function(assert) {\n  //     let [ user ] = this.helper[state]();\n  //\n  //     user.userId = null;\n  //\n  //     assert.equal(user.userId, null);\n  //     assert.equal(user.user, null);\n  //   });\n  //\n  // });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-id-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/association-set-id-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/association-set-id-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var profile = this.helper.savedParent();\n\n      user.profile = profile;\n\n      assert.equal(user.profileId, profile.id);\n      assert.deepEqual(user.profile.attrs, profile.attrs);\n      assert.equal(profile.userId, user.id, 'the inverse was set');\n      assert.deepEqual(profile.user.attrs, user.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      var profile = this.helper.newParent();\n\n      user.profile = profile;\n\n      assert.equal(user.profileId, null);\n      assert.deepEqual(user.profile.attrs, profile.attrs);\n\n      assert.equal(profile.userId, user.id, 'the inverse was set');\n      assert.deepEqual(profile.user.attrs, user.attrs);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var user = _helper$state42[0];\n\n      user.profile = null;\n\n      assert.equal(user.profileId, null);\n      assert.deepEqual(user.profile, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/create-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var profile = schema.create('profile');\n    var user = schema.create('user', {\n      profileId: profile.id\n    });\n    profile.reload();\n\n    assert.equal(user.profileId, profile.id);\n    assert.deepEqual(user.profile.attrs, profile.attrs);\n    assert.deepEqual(profile.user.attrs, user.attrs);\n    assert.equal(schema.db.users.length, 1);\n    assert.equal(schema.db.profiles.length, 1);\n    assert.deepEqual(schema.db.users[0], { id: '1', profileId: '1' });\n    assert.deepEqual(schema.db.profiles[0], { id: '1', userId: '1' });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var profile = schema.create('profile');\n    var user = schema.create('user', {\n      profile: profile\n    });\n\n    assert.equal(user.profileId, profile.id);\n    assert.deepEqual(user.profile.attrs, profile.attrs);\n    assert.deepEqual(profile.user.attrs, user.attrs);\n    assert.equal(schema.db.users.length, 1);\n    assert.equal(schema.db.profiles.length, 1);\n    assert.deepEqual(schema.db.users[0], { id: '1', profileId: '1' });\n    assert.deepEqual(schema.db.profiles[0], { id: '1', userId: '1' });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/delete-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting the parent updates the child\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var profile = _helper$state2[1];\n\n      if (profile) {\n        profile.destroy();\n        user.reload();\n      }\n\n      assert.equal(user.profileId, null);\n      assert.deepEqual(user.profile, null);\n    });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/8-one-to-one/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/instantiating-test', ['exports', 'dummy/tests/integration/orm/belongs-to/8-one-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | One To One | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmBelongsTo8OneToOne_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var profile = this.helper.savedParent();\n    var user = this.schema.users['new']({ profileId: profile.id });\n\n    assert.equal(user.profileId, profile.id);\n    assert.deepEqual(user.profile.attrs, profile.attrs);\n    assert.deepEqual(user.attrs, { profileId: profile.id });\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ profileId: 2 });\n    }, /You're instantiating a user that has a profileId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var user = this.schema.users['new']({ profileId: null });\n\n    assert.equal(user.profileId, null);\n    assert.equal(user.profile, null);\n    assert.deepEqual(user.attrs, { profileId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var profile = this.helper.savedParent();\n    var user = this.schema.users['new']({ profile: profile });\n\n    assert.equal(user.profileId, 1);\n    assert.deepEqual(user.profile.attrs, profile.attrs);\n    assert.deepEqual(user.attrs, { profileId: null }); // this would update when saved\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var profile = this.schema.profiles['new']({ age: 300 });\n    var user = this.schema.users['new']({ profile: profile });\n\n    assert.equal(user.profileId, null);\n    assert.deepEqual(user.profile, profile);\n    assert.deepEqual(user.attrs, { profileId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var user = this.schema.users['new']({ profile: null });\n\n    assert.equal(user.profileId, null);\n    assert.deepEqual(user.profile, null);\n    assert.deepEqual(user.attrs, { profileId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var profile = this.helper.savedParent();\n    var user = this.schema.users['new']({ profile: profile, profileId: profile.id });\n\n    assert.equal(user.profileId, '1');\n    assert.deepEqual(user.profile, profile);\n    assert.deepEqual(user.attrs, { profileId: profile.id });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.equal(user.profileId, null);\n    assert.deepEqual(user.profile, null);\n    assert.deepEqual(user.attrs, { profileId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.equal(user.profileId, null);\n    assert.deepEqual(user.profile, null);\n    assert.deepEqual(user.attrs, { profileId: null });\n  });\n});","define('dummy/tests/integration/orm/belongs-to/8-one-to-one/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/8-one-to-one/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/orm/belongs-to/8-one-to-one/instantiating-test.js should pass ESLint.\\n62:46  - There should be no space before \\',\\'. (comma-spacing)');\n  });\n});","define('dummy/tests/integration/orm/belongs-to/9-misc/misc-test', ['exports', 'qunit'], function (exports, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Belongs To | Misc');\n\n  (0, _qunit.test)('an ambiguous schema throws an error', function (assert) {\n    assert.ok(true);\n    // assert.throws(function() {\n    //   new Schema(new Db(), {\n    //     user: Model.extend({\n    //       foo: belongsTo('user'),\n    //       bar: belongsTo('user')\n    //     })\n    //   });\n    // }, /You defined the 'foo' relationship on user, but multiple possible inverse relationships of type user exist. Please refer to the models documentation to learn how to explicitly specify inverses./);\n  });\n});\n// import { Model, belongsTo } from 'ember-cli-mirage';\n// import Schema from 'ember-cli-mirage/orm/schema';\n// import Db from 'ember-cli-mirage/db';","define('dummy/tests/integration/orm/belongs-to/9-misc/misc-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/belongs-to/9-misc/misc-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/belongs-to/9-misc/misc-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/collection-inflector-test', ['exports', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-inflector', 'qunit'], function (exports, _emberCliMirageOrmModel, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberInflector, _qunit) {\n\n  var db, schema, HeadOfState;\n  (0, _qunit.module)('Integration | ORM | inflector-collectionName integration', {\n    beforeEach: function beforeEach() {\n      _emberInflector['default'].inflector.irregular('head-of-state', 'heads-of-state');\n\n      HeadOfState = _emberCliMirageOrmModel['default'].extend();\n      db = new _emberCliMirageDb['default']({});\n      schema = new _emberCliMirageOrmSchema['default'](db);\n      schema.registerModel('headOfState', HeadOfState);\n    }\n  });\n\n  (0, _qunit.test)(' [regression] collection creation respects irregular plural rules', function (assert) {\n    assert.equal(schema.db._collections.length, 1);\n    assert.equal(schema.db._collections[0].name, 'headsOfState');\n  });\n});","define('dummy/tests/integration/orm/collection-inflector-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/collection-inflector-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/collection-inflector-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/collection-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/collection', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _emberCliMirageOrmCollection, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | collection', {\n    beforeEach: function beforeEach() {\n      this.User = _emberCliMirageOrmModel['default'].extend();\n      this.db = new _emberCliMirageDb['default']({ users: [{ id: 1, name: 'Link', good: true }, { id: 2, name: 'Zelda', good: true }, { id: 3, name: 'Ganon', good: false }] });\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: this.User\n      });\n    }\n  });\n\n  (0, _qunit.test)('a collection can save its models', function (assert) {\n    var collection = this.schema.users.all();\n    collection.models[0].name = 'Sam';\n    collection.save();\n\n    assert.deepEqual(this.db.users[0], { id: '1', name: 'Sam', good: true });\n  });\n\n  (0, _qunit.test)('a collection can reload its models', function (assert) {\n    var collection = this.schema.users.all();\n    assert.equal(collection.models[0].name, 'Link');\n\n    collection.models[0].name = 'Sam';\n    assert.equal(collection.models[0].name, 'Sam');\n\n    collection.reload();\n    assert.equal(collection.models[0].name, 'Link');\n  });\n\n  (0, _qunit.test)('a collection can filter its models', function (assert) {\n    var collection = this.schema.users.all();\n    assert.equal(collection.models.length, 3);\n\n    var newCollection = collection.filter(function (author) {\n      return author.good;\n    });\n\n    assert.ok(newCollection instanceof _emberCliMirageOrmCollection['default']);\n    assert.equal(newCollection.modelName, 'user', 'the filtered collection has the right type');\n    assert.equal(newCollection.models.length, 2);\n  });\n\n  (0, _qunit.test)('a collection can sort its models', function (assert) {\n    var collection = this.schema.users.all();\n    assert.deepEqual(collection.models.map(function (m) {\n      return m.name;\n    }), ['Link', 'Zelda', 'Ganon']);\n\n    var newCollection = collection.sort(function (a, b) {\n      return a.name.localeCompare(b.name);\n    });\n\n    assert.ok(newCollection instanceof _emberCliMirageOrmCollection['default']);\n    assert.equal(newCollection.modelName, 'user', 'the sorted collection has the right type');\n    assert.deepEqual(newCollection.models.map(function (m) {\n      return m.name;\n    }), ['Ganon', 'Link', 'Zelda']);\n  });\n\n  (0, _qunit.test)('a collection can slice its models', function (assert) {\n    var collection = this.schema.users.all();\n    assert.deepEqual(collection.models.map(function (m) {\n      return m.name;\n    }), ['Link', 'Zelda', 'Ganon'], 'Starts with 3');\n\n    var newCollection = collection.slice(-2);\n\n    assert.ok(newCollection instanceof _emberCliMirageOrmCollection['default']);\n    assert.equal(newCollection.modelName, 'user', 'the sliced collection has the right type');\n    assert.deepEqual(newCollection.models.map(function (m) {\n      return m.name;\n    }), ['Zelda', 'Ganon']);\n  });\n\n  (0, _qunit.test)('a collection can merge with another collection', function (assert) {\n    var goodGuys = this.schema.users.where(function (user) {\n      return user.good;\n    });\n    var badGuys = this.schema.users.where(function (user) {\n      return !user.good;\n    });\n\n    assert.equal(goodGuys.models.length, 2);\n    assert.equal(badGuys.models.length, 1);\n\n    goodGuys.mergeCollection(badGuys);\n\n    assert.equal(goodGuys.models.length, 3);\n  });\n});","define('dummy/tests/integration/orm/collection-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/collection-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/collection-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/create-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _qunit) {\n\n  var db, schema, User;\n  (0, _qunit.module)('Integration | ORM | create', {\n    beforeEach: function beforeEach() {\n      User = _emberCliMirageOrmModel['default'].extend();\n      db = new _emberCliMirageDb['default']();\n      schema = new _emberCliMirageOrmSchema['default'](db, {\n        user: User\n      });\n    }\n  });\n\n  (0, _qunit.test)('it cannot make new models that havent been registered', function (assert) {\n    assert.throws(function () {\n      schema.authors['new']({ name: 'Link' });\n    });\n  });\n\n  (0, _qunit.test)('it cannot create models that havent been registered', function (assert) {\n    assert.throws(function () {\n      schema.authors.create({ name: 'Link' });\n    });\n  });\n\n  (0, _qunit.test)('it can make new models and then save them', function (assert) {\n    var user = schema.users['new']({ name: 'Link' });\n\n    assert.ok(user instanceof User);\n    assert.deepEqual(user.attrs, { name: 'Link' });\n    assert.deepEqual(db.users, []);\n\n    user.save();\n\n    assert.ok(user.id, 'user has an id getter');\n    assert.deepEqual(user.attrs, { id: '1', name: 'Link' });\n    assert.deepEqual(db.users, [{ id: '1', name: 'Link' }]);\n  });\n\n  (0, _qunit.test)('it can create new models, saved directly to the db', function (assert) {\n    var user = schema.users.create({ name: 'Link' });\n\n    assert.ok(user instanceof _emberCliMirageOrmModel['default']);\n    assert.ok(user instanceof User);\n    assert.deepEqual(user.attrs, { id: '1', name: 'Link' });\n    assert.deepEqual(db.users, [{ id: '1', name: 'Link' }]);\n  });\n});","define('dummy/tests/integration/orm/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/destroy-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _qunit) {\n\n  var db = undefined;\n  (0, _qunit.module)('Integration | ORM | destroy', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']({\n        users: [{ id: 1, name: 'Link', evil: false }, { id: 2, name: 'Link', location: 'Hyrule', evil: false }, { id: 3, name: 'Zelda', location: 'Hyrule', evil: false }]\n      });\n\n      this.schema = new _emberCliMirageOrmSchema['default'](db, {\n        user: _emberCliMirageOrmModel['default']\n      });\n    }\n  });\n\n  (0, _qunit.test)('destroying a model removes the associated record from the db', function (assert) {\n    assert.deepEqual(db.users.length, 3);\n\n    var link = this.schema.users.find(1);\n    link.destroy();\n\n    assert.deepEqual(db.users.find(1), null);\n    assert.deepEqual(db.users.length, 2);\n  });\n\n  (0, _qunit.test)('destroying a collection removes the associated records from the db', function (assert) {\n    assert.deepEqual(db.users.length, 3);\n\n    var users = this.schema.users.all();\n    users.destroy();\n\n    assert.deepEqual(db.users, []);\n  });\n});","define('dummy/tests/integration/orm/destroy-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/destroy-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/destroy-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/find-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/collection', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _emberCliMirageOrmCollection, _qunit) {\n\n  var schema;\n  var User = _emberCliMirageOrmModel['default'].extend();\n  (0, _qunit.module)('Integration | ORM | #find', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']({ users: [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }] });\n\n      schema = new _emberCliMirageOrmSchema['default'](db, {\n        user: User\n      });\n    }\n  });\n\n  (0, _qunit.test)('it can find a model by id', function (assert) {\n    var zelda = schema.users.find(2);\n\n    assert.ok(zelda instanceof User);\n    assert.deepEqual(zelda.attrs, { id: '2', name: 'Zelda' });\n  });\n\n  (0, _qunit.test)('it returns null if no model is found for an id', function (assert) {\n    var user = schema.users.find(4);\n\n    assert.equal(user, null);\n  });\n\n  (0, _qunit.test)('it can find multiple models by ids', function (assert) {\n    var users = schema.users.find([1, 2]);\n\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.ok(users.models[0] instanceof User);\n    assert.equal(users.models.length, 2);\n    assert.deepEqual(users.models[1].attrs, { id: '2', name: 'Zelda' });\n  });\n\n  (0, _qunit.test)('it errors if incorrect number of models are found for an array of ids', function (assert) {\n    assert.throws(function () {\n      schema.users.find([1, 6]);\n    }, /Couldn't find all users/);\n  });\n});","define('dummy/tests/integration/orm/find-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/find-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/find-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/first-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _qunit) {\n\n  var schema = undefined;\n  var User = _emberCliMirageOrmModel['default'].extend();\n  (0, _qunit.module)('Integration | ORM | #first', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']();\n      db.createCollection('users');\n      db.users.insert([{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }]);\n      schema = new _emberCliMirageOrmSchema['default'](db);\n\n      schema.registerModel('user', User);\n    }\n  });\n\n  (0, _qunit.test)('it can find the first model', function (assert) {\n    var user = schema.users.first();\n\n    assert.ok(user instanceof User);\n    assert.deepEqual(user.attrs, { id: '1', name: 'Link' });\n  });\n});","define('dummy/tests/integration/orm/first-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/first-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/first-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)()\n        }),\n        post: _emberCliMirage.Model\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var user = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(user.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts.create({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n        user.save();\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        return [user, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts.create({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n\n        return this.schema.posts.find(insertedPost.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.posts['new']({ title: 'Lorem' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentSavedChildren', 'savedParentMixedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/1-basic/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var posts = _helper$state2[1];\n\n      assert.equal(user.posts.models.length, posts.length, 'the parent has the correct number of children');\n      assert.equal(user.postIds.length, posts.length, 'the parent has the correct number of children ids');\n\n      posts.forEach(function (post, i) {\n        assert.deepEqual(user.posts.models[i], posts[i], 'each child is in parent.children array');\n\n        if (post.isSaved()) {\n          assert.ok(user.postIds.indexOf(post.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.posts.models.length;\n\n      var post = user.createPost({ title: 'Lorem ipsum' });\n\n      assert.ok(post.id, 'the child was persisted');\n      assert.equal(user.posts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(user.posts.includes(post), 'the model was added to user.posts');\n      assert.ok(user.postIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n      assert.ok(user.attrs.postIds.indexOf(post.id) > -1, 'fks were persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.posts.models.length;\n\n      var post = user.newPost({ title: 'Lorem ipsum' });\n\n      assert.ok(!post.id, 'the child was not persisted');\n      assert.equal(user.posts.models.length, initialCount + 1);\n\n      post.save();\n\n      assert.deepEqual(post.attrs, { id: post.id, title: 'Lorem ipsum' }, 'the child was persisted');\n      assert.equal(user.posts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.deepEqual(user.posts.models.filter(function (a) {\n        return a.id === post.id;\n      })[0], post, 'the model was added to user.posts');\n      assert.ok(user.postIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var savedPost = this.helper.savedChild();\n\n      user.postIds = [savedPost.id];\n\n      assert.deepEqual(user.posts.models[0].attrs, savedPost.attrs);\n      assert.deepEqual(user.postIds, [savedPost.id]);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      user.postIds = null;\n\n      assert.deepEqual(user.posts.models, []);\n      assert.deepEqual(user.postIds, []);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var savedPost = this.helper.savedChild();\n\n      user.posts = [savedPost];\n\n      assert.ok(user.posts.models.indexOf(savedPost) > -1);\n      assert.ok(user.postIds.indexOf(savedPost.id) > -1);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      var newPost = this.helper.newChild();\n\n      user.posts = [newPost];\n\n      assert.deepEqual(user.postIds, [undefined]);\n      assert.deepEqual(user.posts.models[0], newPost);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var user = _helper$state42[0];\n\n      user.posts = [];\n\n      assert.deepEqual(user.postIds, []);\n      assert.equal(user.posts.models.length, 0);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 1);\n\n      var user = _helper$state52[0];\n\n      user.posts = null;\n\n      assert.deepEqual(user.postIds, []);\n      assert.equal(user.posts.models.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/create-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      postIds: [post.id]\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.posts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      posts: [post]\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.posts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      posts: this.helper.schema.posts.all()\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.posts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany1Basic_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var posts = _helper$state2[1];\n\n      if (posts && posts.length) {\n        posts.forEach(function (p) {\n          return p.destroy();\n        });\n        user.reload();\n      }\n\n      assert.equal(user.posts.length, 0);\n      assert.equal(user.postIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/instantiating-test', ['exports', 'dummy/tests/integration/orm/has-many/1-basic/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany1Basic_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Basic | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany1Basic_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({\n      postIds: [post.id]\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ postIds: [2] });\n    }, /You're instantiating a user that has a postIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var user = this.schema.users['new']({ postIds: null });\n\n    assert.equal(user.posts.models.length, 0);\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ posts: [post] });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var post = this.schema.posts['new']({ title: 'Lorem' });\n    var user = this.schema.users['new']({ posts: [post] });\n\n    assert.deepEqual(user.postIds, [undefined]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var user = this.schema.users['new']({ posts: null });\n\n    assert.equal(user.posts.models.length, 0);\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ posts: [post], postIds: [post.id] });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.posts.models, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.posts.models, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/1-basic/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/1-basic/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/1-basic/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)('post')\n        }),\n        post: _emberCliMirage.Model\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var user = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(user.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts.create({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        return [user, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts.create({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.blogPosts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n\n        return this.schema.posts.find(insertedPost.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.posts['new']({ title: 'Lorem' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentSavedChildren', 'savedParentMixedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/2-named/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var posts = _helper$state2[1];\n\n      assert.equal(user.blogPosts.models.length, posts.length, 'the parent has the correct number of children');\n      assert.equal(user.blogPostIds.length, posts.length, 'the parent has the correct number of children ids');\n\n      posts.forEach(function (post, i) {\n        assert.deepEqual(user.blogPosts.models[i], posts[i], 'each child is in parent.children array');\n\n        if (post.isSaved()) {\n          assert.ok(user.blogPostIds.indexOf(post.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.blogPosts.models.length;\n\n      var post = user.createBlogPost({ title: 'Lorem ipsum' });\n\n      assert.ok(post.id, 'the child was persisted');\n      assert.equal(user.blogPosts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(user.blogPosts.includes(post), 'the model was added to user.blogPosts');\n      assert.ok(user.blogPostIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n      assert.ok(user.attrs.blogPostIds.indexOf(post.id) > -1, 'fks were persisted');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.blogPosts.models.length;\n\n      var post = user.newBlogPost({ title: 'Lorem ipsum' });\n\n      assert.ok(!post.id, 'the child was not persisted');\n      assert.equal(user.blogPosts.models.length, initialCount + 1);\n\n      post.save();\n\n      assert.deepEqual(post.attrs, { id: post.id, title: 'Lorem ipsum' }, 'the child was persisted');\n      assert.equal(user.blogPosts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.deepEqual(user.blogPosts.models.filter(function (a) {\n        return a.id === post.id;\n      })[0], post, 'the model was added to user.blogPosts');\n      assert.ok(user.blogPostIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var savedPost = this.helper.savedChild();\n\n      user.blogPostIds = [savedPost.id];\n\n      assert.deepEqual(user.blogPosts.models[0].attrs, savedPost.attrs);\n      assert.deepEqual(user.blogPostIds, [savedPost.id]);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      user.blogPostIds = null;\n\n      assert.deepEqual(user.blogPosts.models, []);\n      assert.deepEqual(user.blogPostIds, []);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var savedPost = this.helper.savedChild();\n\n      user.blogPosts = [savedPost];\n\n      assert.ok(user.blogPosts.models.indexOf(savedPost) > -1);\n      assert.ok(user.blogPostIds.indexOf(savedPost.id) > -1);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var user = _helper$state32[0];\n\n      var newPost = this.helper.newChild();\n\n      user.blogPosts = [newPost];\n\n      assert.deepEqual(user.blogPostIds, [undefined]);\n      assert.deepEqual(user.blogPosts.models[0], newPost);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var user = _helper$state42[0];\n\n      user.blogPosts = [];\n\n      assert.deepEqual(user.blogPostIds, []);\n      assert.equal(user.blogPosts.models.length, 0);\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 1);\n\n      var user = _helper$state52[0];\n\n      user.blogPosts = null;\n\n      assert.deepEqual(user.blogPostIds, []);\n      assert.equal(user.blogPosts.models.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/create-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      blogPostIds: [post.id]\n    });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.attrs.blogPostIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.blogPosts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', blogPostIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      blogPosts: [post]\n    });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.attrs.blogPostIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.blogPosts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', blogPostIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      blogPosts: this.helper.schema.posts.all()\n    });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.attrs.blogPostIds, [post.id], 'the ids were persisted');\n    assert.deepEqual(user.blogPosts.models[0].attrs, post.attrs);\n    assert.equal(this.helper.db.posts.length, 1);\n    assert.deepEqual(this.helper.db.posts[0], { id: '1' });\n    assert.equal(this.helper.db.users.length, 1);\n    assert.deepEqual(this.helper.db.users[0], { id: '1', blogPostIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany2Named_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var blogPosts = _helper$state2[1];\n\n      if (blogPosts && blogPosts.length) {\n        blogPosts.forEach(function (p) {\n          return p.destroy();\n        });\n        user.reload();\n      }\n\n      assert.equal(user.blogPosts.length, 0);\n      assert.equal(user.blogPostIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/instantiating-test', ['exports', 'dummy/tests/integration/orm/has-many/2-named/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany2Named_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany2Named_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({\n      blogPostIds: [post.id]\n    });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.blogPosts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ blogPostIds: [2] });\n    }, /You're instantiating a user that has a blogPostIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var user = this.schema.users['new']({ blogPostIds: null });\n\n    assert.equal(user.blogPosts.models.length, 0);\n    assert.deepEqual(user.blogPostIds, []);\n    assert.deepEqual(user.attrs, { blogPostIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ blogPosts: [post] });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.blogPosts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var post = this.schema.posts['new']({ title: 'Lorem' });\n    var user = this.schema.users['new']({ blogPosts: [post] });\n\n    assert.deepEqual(user.blogPostIds, [undefined]);\n    assert.deepEqual(user.blogPosts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var user = this.schema.users['new']({ blogPosts: null });\n\n    assert.equal(user.blogPosts.models.length, 0);\n    assert.deepEqual(user.blogPostIds, []);\n    assert.deepEqual(user.attrs, { blogPostIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ blogPosts: [post], blogPostIds: [post.id] });\n\n    assert.deepEqual(user.blogPostIds, [post.id]);\n    assert.deepEqual(user.blogPosts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.deepEqual(user.blogPostIds, []);\n    assert.deepEqual(user.blogPosts.models, []);\n    assert.deepEqual(user.attrs, { blogPostIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.deepEqual(user.blogPostIds, []);\n    assert.deepEqual(user.blogPosts.models, []);\n    assert.deepEqual(user.attrs, { blogPostIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/2-named/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/2-named/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/2-named/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        tag: _emberCliMirage.Model.extend({\n          tags: (0, _emberCliMirage.hasMany)() // implicit inverse\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var tag = this.db.tags.insert({ name: 'Red' });\n\n        return [this.schema.tags.find(tag.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var tag = this.schema.tags.create({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.tags.insert([{ id: '1', name: 'Red', tagIds: ['2', '3'] }, { id: '2', name: 'Blue', tagIds: ['1'] }, { id: '3', name: 'Green', tagIds: ['1'] }]);\n\n        return [schema.tags.find(1), [schema.tags.find(2), schema.tags.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.tags.insert([{ id: '1', name: 'Red', tagIds: ['2'] }, { id: '2', name: 'Blue', tagIds: ['1'] }]);\n        var tag = this.schema.tags.find(1);\n        var blueTag = this.schema.tags.find(2);\n        var greenTag = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [blueTag, greenTag];\n\n        return [tag, [blueTag, greenTag]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n\n        return [tag, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags.create({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedTag = this.db.tags.insert({ name: 'Blue' });\n\n        return this.schema.tags.find(insertedTag.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.tags['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      assert.equal(tag.tags.models.length, tags.length, 'the parent has the correct number of children');\n      assert.equal(tag.tagIds.length, tags.length, 'the parent has the correct number of children ids');\n\n      tags.forEach(function (t, i) {\n        assert.deepEqual(tag.tags.models[i], t, 'each child is in parent.children array');\n\n        if (t.isSaved()) {\n          assert.ok(tag.tagIds.indexOf(t.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n\n        // Check the inverse\n        assert.ok(t.tags.includes(tag));\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.tags.models.length;\n\n      var orangeTag = tag.createTag({ name: 'Orange' });\n\n      assert.ok(orangeTag.id, 'the child was persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.tags.includes(orangeTag), 'the model was added to tag.tags');\n      assert.ok(tag.tagIds.indexOf(orangeTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(tag.attrs.tagIds.indexOf(orangeTag.id) > -1, 'fks were persisted');\n      assert.ok(orangeTag.tags.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.tags.models.length;\n\n      var blueTag = tag.newTag({ name: 'Blue' });\n\n      assert.ok(!blueTag.id, 'the child was not persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1);\n      assert.equal(blueTag.tags.models.length, 1, 'the inverse was set');\n\n      blueTag.save();\n\n      assert.deepEqual(blueTag.attrs, { id: blueTag.id, name: 'Blue', tagIds: [tag.id] }, 'the child was persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.tags.includes(blueTag), 'the model was added to tag.tags');\n      assert.ok(tag.tagIds.indexOf(blueTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(blueTag.tags.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.tagIds = [savedTag.id];\n\n      assert.deepEqual(tag.tags.models[0].attrs, savedTag.attrs);\n      assert.deepEqual(tag.tagIds, [savedTag.id]);\n\n      tag.save();\n      savedTag.reload();\n\n      assert.deepEqual(savedTag.tags.models[0].attrs, tag.attrs, 'the inverse was set');\n      originalTags.forEach(function (originalTag) {\n        if (originalTag.isSaved()) {\n          originalTag.reload();\n          assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      tag.tagIds = null;\n\n      assert.deepEqual(tag.tags.models, []);\n      assert.deepEqual(tag.tagIds, []);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.tags = [savedTag];\n\n      assert.ok(tag.tags.includes(savedTag));\n      assert.equal(tag.tagIds[0], savedTag.id);\n      assert.ok(savedTag.tags.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      var newTag = this.helper.newChild();\n\n      tag.tags = [newTag];\n\n      assert.ok(tag.tags.includes(newTag));\n      assert.equal(tag.tagIds[0], undefined);\n      assert.ok(newTag.tags.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var tag = _helper$state42[0];\n      var originalTags = _helper$state42[1];\n\n      tag.tags = [];\n\n      assert.deepEqual(tag.tagIds, []);\n      assert.equal(tag.tags.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 2);\n\n      var tag = _helper$state52[0];\n      var originalTags = _helper$state52[1];\n\n      tag.tags = null;\n\n      assert.deepEqual(tag.tagIds, []);\n      assert.equal(tag.tags.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.tags.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tagIds: [tagA.id]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagA.tagIds, [tagB.id]);\n    assert.deepEqual(tagB.tagIds, [tagA.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.tagIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id], 'the inverse ids were persisted');\n    assert.deepEqual(tagA.tags.models[0].attrs, tagB.attrs);\n    assert.deepEqual(tagB.tags.models[0].attrs, tagA.attrs, 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n    assert.deepEqual(this.helper.db.tags[0], { id: '1', tagIds: ['2'] });\n    assert.deepEqual(this.helper.db.tags[1], { id: '2', tagIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tags: [tagA]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.tagIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.tagIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tags: schema.tags.all()\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.tagIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.attrs.tagIds, [tagB.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany3Reflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      if (tags && tags.length) {\n        tags.forEach(function (t) {\n          return t.destroy();\n        });\n        tag.reload();\n      }\n\n      assert.equal(tag.tags.length, 0);\n      assert.equal(tag.tagIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/new-test', ['exports', 'dummy/tests/integration/orm/has-many/3-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany3Reflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Reflexive | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany3Reflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({\n      tagIds: [tagA.id]\n    });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.tags['new']({ tagIds: [2] });\n    }, /You're instantiating a tag that has a tagIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var tag = this.schema.tags['new']({ tagIds: null });\n\n    assert.equal(tag.tags.models.length, 0);\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ tags: [tagA] });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var tagA = this.schema.tags['new']({ color: 'Red' });\n    var tagB = this.schema.tags['new']({ tags: [tagA] });\n\n    assert.deepEqual(tagB.tagIds, [undefined]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var tag = this.schema.tags['new']({ tags: null });\n\n    assert.equal(tag.tags.models.length, 0);\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ tags: [tagA], tagIds: [tagA.id] });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var tag = this.schema.tags['new']({});\n\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.tags.models, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var tag = this.schema.tags['new']();\n\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.tags.models, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/3-reflexive/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/3-reflexive/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/3-reflexive/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        tag: _emberCliMirage.Model.extend({\n          labels: (0, _emberCliMirage.hasMany)('tag') // implicit inverse\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var tag = this.db.tags.insert({ name: 'Red' });\n\n        return [this.schema.tags.find(tag.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var tag = this.schema.tags.create({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2', '3'] }, { id: '2', name: 'Blue', labelIds: ['1'] }, { id: '3', name: 'Green', labelIds: ['1'] }]);\n\n        return [schema.tags.find(1), [schema.tags.find(2), schema.tags.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2'] }, { id: '2', name: 'Blue', labelIds: ['1'] }]);\n        var tag = this.schema.tags.find(1);\n        var blueTag = this.schema.tags.find(2);\n        var greenTag = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [blueTag, greenTag];\n\n        return [tag, [blueTag, greenTag]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n\n        return [tag, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags.create({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedTag = this.db.tags.insert({ name: 'Blue' });\n\n        return this.schema.tags.find(insertedTag.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.tags['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      assert.equal(tag.labels.models.length, tags.length, 'the parent has the correct number of children');\n      assert.equal(tag.labelIds.length, tags.length, 'the parent has the correct number of children ids');\n\n      tags.forEach(function (t, i) {\n        assert.deepEqual(tag.labels.models[i], t, 'each child is in parent.children array');\n\n        if (t.isSaved()) {\n          assert.ok(tag.labelIds.indexOf(t.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n\n        // Check the inverse\n        assert.ok(t.labels.includes(tag));\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var orangeTag = tag.createLabel({ name: 'Orange' });\n\n      assert.ok(orangeTag.id, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(orangeTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(orangeTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(tag.attrs.labelIds.indexOf(orangeTag.id) > -1, 'fks were persisted');\n      assert.ok(orangeTag.labels.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var blueTag = tag.newLabel({ name: 'Blue' });\n\n      assert.ok(!blueTag.id, 'the child was not persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1);\n      assert.equal(blueTag.labels.models.length, 1, 'the inverse was set');\n\n      blueTag.save();\n\n      assert.deepEqual(blueTag.attrs, { id: blueTag.id, name: 'Blue', labelIds: [tag.id] }, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(blueTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(blueTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(blueTag.labels.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labelIds = [savedTag.id];\n\n      assert.deepEqual(tag.labels.models[0].attrs, savedTag.attrs);\n      assert.deepEqual(tag.labelIds, [savedTag.id]);\n\n      tag.save();\n      savedTag.reload();\n\n      assert.deepEqual(savedTag.labels.models[0].attrs, tag.attrs, 'the inverse was set');\n      originalTags.forEach(function (originalTag) {\n        if (originalTag.isSaved()) {\n          originalTag.reload();\n          assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      tag.labelIds = null;\n\n      assert.deepEqual(tag.labels.models, []);\n      assert.deepEqual(tag.labelIds, []);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labels = [savedTag];\n\n      assert.ok(tag.labels.includes(savedTag));\n      assert.equal(tag.labelIds[0], savedTag.id);\n      assert.ok(savedTag.labels.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      var newTag = this.helper.newChild();\n\n      tag.labels = [newTag];\n\n      assert.ok(tag.labels.includes(newTag));\n      assert.equal(tag.labelIds[0], undefined);\n      assert.ok(newTag.labels.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var tag = _helper$state42[0];\n      var originalTags = _helper$state42[1];\n\n      tag.labels = [];\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 2);\n\n      var tag = _helper$state52[0];\n      var originalTags = _helper$state52[1];\n\n      tag.labels = null;\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labelIds: [tagA.id]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagA.labelIds, [tagB.id]);\n    assert.deepEqual(tagB.labelIds, [tagA.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the inverse ids were persisted');\n    assert.deepEqual(tagA.labels.models[0].attrs, tagB.attrs);\n    assert.deepEqual(tagB.labels.models[0].attrs, tagA.attrs, 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n    assert.deepEqual(this.helper.db.tags[0], { id: '1', labelIds: ['2'] });\n    assert.deepEqual(this.helper.db.tags[1], { id: '2', labelIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: [tagA]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: schema.tags.all()\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var labels = _helper$state2[1];\n\n      if (labels && labels.length) {\n        labels.forEach(function (t) {\n          return t.destroy();\n        });\n        tag.reload();\n      }\n\n      assert.equal(tag.labels.length, 0);\n      assert.equal(tag.labelIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/new-test', ['exports', 'dummy/tests/integration/orm/has-many/4-named-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany4NamedReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({\n      labelIds: [tagA.id]\n    });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.tags['new']({ labelIds: [2] });\n    }, /You're instantiating a tag that has a labelIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var tag = this.schema.tags['new']({ labelIds: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var tagA = this.schema.tags['new']({ color: 'Red' });\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [undefined]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var tag = this.schema.tags['new']({ labels: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA], labelIds: [tagA.id] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var tag = this.schema.tags['new']({});\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var tag = this.schema.tags['new']();\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/4-named-reflexive/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/4-named-reflexive/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/4-named-reflexive/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        tag: _emberCliMirage.Model.extend({\n          labels: (0, _emberCliMirage.hasMany)('tag', { inverse: 'labels' }) // implicit inverse\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var tag = this.db.tags.insert({ name: 'Red' });\n\n        return [this.schema.tags.find(tag.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var tag = this.schema.tags.create({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2', '3'] }, { id: '2', name: 'Blue', labelIds: ['1'] }, { id: '3', name: 'Green', labelIds: ['1'] }]);\n\n        return [schema.tags.find(1), [schema.tags.find(2), schema.tags.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2'] }, { id: '2', name: 'Blue', labelIds: ['1'] }]);\n        var tag = this.schema.tags.find(1);\n        var blueTag = this.schema.tags.find(2);\n        var greenTag = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [blueTag, greenTag];\n\n        return [tag, [blueTag, greenTag]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n\n        return [tag, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags.create({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedTag = this.db.tags.insert({ name: 'Blue' });\n\n        return this.schema.tags.find(insertedTag.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.tags['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      assert.equal(tag.labels.models.length, tags.length, 'the parent has the correct number of children');\n      assert.equal(tag.labelIds.length, tags.length, 'the parent has the correct number of children ids');\n\n      tags.forEach(function (t, i) {\n        assert.deepEqual(tag.labels.models[i], t, 'each child is in parent.children array');\n\n        if (t.isSaved()) {\n          assert.ok(tag.labelIds.indexOf(t.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n\n        // Check the inverse\n        assert.ok(t.labels.includes(tag));\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var orangeTag = tag.createLabel({ name: 'Orange' });\n\n      assert.ok(orangeTag.id, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(orangeTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(orangeTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(tag.attrs.labelIds.indexOf(orangeTag.id) > -1, 'fks were persisted');\n      assert.ok(orangeTag.labels.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var blueTag = tag.newLabel({ name: 'Blue' });\n\n      assert.ok(!blueTag.id, 'the child was not persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1);\n      assert.equal(blueTag.labels.models.length, 1, 'the inverse was set');\n\n      blueTag.save();\n\n      assert.deepEqual(blueTag.attrs, { id: blueTag.id, name: 'Blue', labelIds: [tag.id] }, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(blueTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(blueTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(blueTag.labels.includes(tag), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labelIds = [savedTag.id];\n\n      assert.deepEqual(tag.labels.models[0].attrs, savedTag.attrs);\n      assert.deepEqual(tag.labelIds, [savedTag.id]);\n\n      tag.save();\n      savedTag.reload();\n\n      assert.deepEqual(savedTag.labels.models[0].attrs, tag.attrs, 'the inverse was set');\n      originalTags.forEach(function (originalTag) {\n        if (originalTag.isSaved()) {\n          originalTag.reload();\n          assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      tag.labelIds = null;\n\n      assert.deepEqual(tag.labels.models, []);\n      assert.deepEqual(tag.labelIds, []);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var originalTags = _helper$state2[1];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labels = [savedTag];\n\n      assert.ok(tag.labels.includes(savedTag));\n      assert.equal(tag.labelIds[0], savedTag.id);\n      assert.ok(savedTag.labels.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var tag = _helper$state32[0];\n      var originalTags = _helper$state32[1];\n\n      var newTag = this.helper.newChild();\n\n      tag.labels = [newTag];\n\n      assert.ok(tag.labels.includes(newTag));\n      assert.equal(tag.labelIds[0], undefined);\n      assert.ok(newTag.labels.includes(tag), 'the inverse was set');\n\n      tag.save();\n\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var tag = _helper$state42[0];\n      var originalTags = _helper$state42[1];\n\n      tag.labels = [];\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 2);\n\n      var tag = _helper$state52[0];\n      var originalTags = _helper$state52[1];\n\n      tag.labels = null;\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n      originalTags.forEach(function (originalTag) {\n        originalTag.reload();\n        assert.notOk(originalTag.labels.includes(tag), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labelIds: [tagA.id]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagA.labelIds, [tagB.id]);\n    assert.deepEqual(tagB.labelIds, [tagA.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the inverse ids were persisted');\n    assert.deepEqual(tagA.labels.models[0].attrs, tagB.attrs);\n    assert.deepEqual(tagB.labels.models[0].attrs, tagA.attrs, 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n    assert.deepEqual(this.helper.db.tags[0], { id: '1', labelIds: ['2'] });\n    assert.deepEqual(this.helper.db.tags[1], { id: '2', labelIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: [tagA]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the ids were persisted');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: schema.tags.all()\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [tagB.id], 'the inverse was set');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.attrs.labelIds, [tagB.id], 'the inverse was set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var labels = _helper$state2[1];\n\n      if (labels && labels.length) {\n        labels.forEach(function (t) {\n          return t.destroy();\n        });\n        tag.reload();\n      }\n\n      assert.equal(tag.labels.length, 0);\n      assert.equal(tag.labelIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test', ['exports', 'dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named Reflexive Explicit Inverse | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany5NamedReflexiveExplicitInverse_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({\n      labelIds: [tagA.id]\n    });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.tags['new']({ labelIds: [2] });\n    }, /You're instantiating a tag that has a labelIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var tag = this.schema.tags['new']({ labelIds: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var tagA = this.schema.tags['new']({ color: 'Red' });\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [undefined]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var tag = this.schema.tags['new']({ labels: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA], labelIds: [tagA.id] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var tag = this.schema.tags['new']({});\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var tag = this.schema.tags['new']();\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/5-named-reflexive-explicit-inverse/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        tag: _emberCliMirage.Model.extend({\n          tags: (0, _emberCliMirage.hasMany)('tag', { inverse: null })\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var tag = this.db.tags.insert({ name: 'Red' });\n\n        return [this.schema.tags.find(tag.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var tag = this.schema.tags.create({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.tags.insert([{ id: '1', name: 'Red', tagIds: ['2', '3'] }, { id: '2', name: 'Blue', tagIds: [] }, { id: '3', name: 'Green', tagIds: [] }]);\n\n        return [schema.tags.find(1), [schema.tags.find(2), schema.tags.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.tags.insert([{ id: '1', name: 'Red', tagIds: ['2'] }, { id: '2', name: 'Blue', tagIds: [] }]);\n        var tag = this.schema.tags.find(1);\n        var blueTag = this.schema.tags.find(2);\n        var greenTag = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [blueTag, greenTag];\n\n        return [tag, [blueTag, greenTag]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n\n        return [tag, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags.create({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.tags = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedTag = this.db.tags.insert({ name: 'Blue' });\n\n        return this.schema.tags.find(insertedTag.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.tags['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      assert.equal(tag.tags.models.length, tags.length, 'the parent has the correct number of children');\n      assert.equal(tag.tagIds.length, tags.length, 'the parent has the correct number of children ids');\n\n      tags.forEach(function (t, i) {\n        assert.deepEqual(tag.tags.models[i], t, 'each child is in parent.children array');\n\n        if (t.isSaved()) {\n          assert.ok(tag.tagIds.indexOf(t.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.tags.models.length;\n\n      var orangeTag = tag.createTag({ name: 'Orange' });\n\n      assert.ok(orangeTag.id, 'the child was persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.tags.includes(orangeTag), 'the model was added to tag.tags');\n      assert.ok(tag.tagIds.indexOf(orangeTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(tag.attrs.tagIds.indexOf(orangeTag.id) > -1, 'fks were persisted');\n      assert.notOk(orangeTag.tags.includes(tag), 'the inverse was not set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.tags.models.length;\n\n      var blueTag = tag.newTag({ name: 'Blue' });\n\n      assert.ok(!blueTag.id, 'the child was not persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1);\n      assert.equal(blueTag.tags.models.length, 0, 'the inverse was not set');\n\n      blueTag.save();\n\n      assert.deepEqual(blueTag.attrs, { id: blueTag.id, name: 'Blue', tagIds: [] }, 'the child was persisted');\n      assert.equal(tag.tags.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.tags.includes(blueTag), 'the model was added to tag.tags');\n      assert.ok(tag.tagIds.indexOf(blueTag.id) > -1, 'the id was added to the fks array');\n      assert.notOk(blueTag.tags.includes(tag), 'the inverse was not set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.tagIds = [savedTag.id];\n\n      assert.deepEqual(tag.tags.models[0].attrs, savedTag.attrs);\n      assert.deepEqual(tag.tagIds, [savedTag.id]);\n\n      tag.save();\n      savedTag.reload();\n\n      assert.equal(savedTag.tags.models.length, 0, 'the inverse was not set');\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var tag = _helper$state32[0];\n\n      tag.tagIds = null;\n\n      assert.deepEqual(tag.tags.models, []);\n      assert.deepEqual(tag.tagIds, []);\n\n      tag.save();\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.tags = [savedTag];\n\n      assert.ok(tag.tags.includes(savedTag));\n      assert.equal(tag.tagIds[0], savedTag.id);\n      assert.notOk(savedTag.tags.includes(tag), 'the inverse was not set');\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var tag = _helper$state32[0];\n\n      var newTag = this.helper.newChild();\n\n      tag.tags = [newTag];\n\n      assert.ok(tag.tags.includes(newTag));\n      assert.equal(tag.tagIds[0], undefined);\n      assert.notOk(newTag.tags.includes(tag), 'the inverse was not set');\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var tag = _helper$state42[0];\n\n      tag.tags = [];\n\n      assert.deepEqual(tag.tagIds, []);\n      assert.equal(tag.tags.models.length, 0);\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 1);\n\n      var tag = _helper$state52[0];\n\n      tag.tags = null;\n\n      assert.deepEqual(tag.tagIds, []);\n      assert.equal(tag.tags.models.length, 0);\n\n      tag.save();\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tagIds: [tagA.id]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.tagIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id], 'the ids were persisted');\n    assert.deepEqual(tagB.tags.models[0].attrs, tagA.attrs);\n    assert.equal(this.helper.db.tags.length, 2);\n    assert.deepEqual(this.helper.db.tags[0], { id: '1', tagIds: null });\n    assert.deepEqual(this.helper.db.tags[1], { id: '2', tagIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tags: [tagA]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.tagIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id], 'the ids were persisted');\n    assert.deepEqual(tagA.attrs.tagIds, null, 'the inverse was not set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      tags: schema.tags.all()\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.tagIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.tagIds, [tagA.id]);\n    assert.deepEqual(tagA.attrs.tagIds, null, 'the inverse was not set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      if (tags && tags.length) {\n        tags.forEach(function (t) {\n          return t.destroy();\n        });\n        tag.reload();\n      }\n\n      assert.equal(tag.tags.length, 0);\n      assert.equal(tag.tagIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/new-test', ['exports', 'dummy/tests/integration/orm/has-many/6-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | One-Way Reflexive | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany6OneWayReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({\n      tagIds: [tagA.id]\n    });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.tags['new']({ tagIds: [2] });\n    }, /You're instantiating a tag that has a tagIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var tag = this.schema.tags['new']({ tagIds: null });\n\n    assert.equal(tag.tags.models.length, 0);\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ tags: [tagA] });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var tagA = this.schema.tags['new']({ color: 'Red' });\n    var tagB = this.schema.tags['new']({ tags: [tagA] });\n\n    assert.deepEqual(tagB.tagIds, [undefined]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var tag = this.schema.tags['new']({ tags: null });\n\n    assert.equal(tag.tags.models.length, 0);\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ tags: [tagA], tagIds: [tagA.id] });\n\n    assert.deepEqual(tagB.tagIds, [tagA.id]);\n    assert.deepEqual(tagB.tags.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var tag = this.schema.tags['new']({});\n\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.tags.models, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var tag = this.schema.tags['new']();\n\n    assert.deepEqual(tag.tagIds, []);\n    assert.deepEqual(tag.tags.models, []);\n    assert.deepEqual(tag.attrs, { tagIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/6-one-way-reflexive/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/6-one-way-reflexive/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/6-one-way-reflexive/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        tag: _emberCliMirage.Model.extend({\n          labels: (0, _emberCliMirage.hasMany)('tag', { inverse: null })\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var tag = this.db.tags.insert({ name: 'Red' });\n\n        return [this.schema.tags.find(tag.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var tag = this.schema.tags.create({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2', '3'] }, { id: '2', name: 'Blue', labelIds: [] }, { id: '3', name: 'Green', labelIds: [] }]);\n\n        return [schema.tags.find(1), [schema.tags.find(2), schema.tags.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.tags.insert([{ id: '1', name: 'Red', labelIds: ['2'] }, { id: '2', name: 'Blue', labelIds: [] }]);\n        var tag = this.schema.tags.find(1);\n        var blueTag = this.schema.tags.find(2);\n        var greenTag = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [blueTag, greenTag];\n\n        return [tag, [blueTag, greenTag]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n\n        return [tag, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags['new']({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags.create({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var tag = this.schema.tags['new']({ name: 'Red' });\n        var tag1 = this.schema.tags.create({ name: 'Blue' });\n        var tag2 = this.schema.tags['new']({ name: 'Green' });\n\n        tag.labels = [tag1, tag2];\n\n        return [tag, [tag1, tag2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedTag = this.db.tags.insert({ name: 'Blue' });\n\n        return this.schema.tags.find(insertedTag.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.tags['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var tags = _helper$state2[1];\n\n      assert.equal(tag.labels.models.length, tags.length, 'the parent has the correct number of children');\n      assert.equal(tag.labelIds.length, tags.length, 'the parent has the correct number of children ids');\n\n      tags.forEach(function (t, i) {\n        assert.deepEqual(tag.labels.models[i], t, 'each child is in parent.children array');\n\n        if (t.isSaved()) {\n          assert.ok(tag.labelIds.indexOf(t.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var orangeTag = tag.createLabel({ name: 'Orange' });\n\n      assert.ok(orangeTag.id, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(orangeTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(orangeTag.id) > -1, 'the id was added to the fks array');\n      assert.ok(tag.attrs.labelIds.indexOf(orangeTag.id) > -1, 'fks were persisted');\n      assert.notOk(orangeTag.labels.includes(tag), 'the inverse was not set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var initialCount = tag.labels.models.length;\n\n      var blueTag = tag.newLabel({ name: 'Blue' });\n\n      assert.ok(!blueTag.id, 'the child was not persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1);\n      assert.equal(blueTag.labels.models.length, 0, 'the inverse was not set');\n\n      blueTag.save();\n\n      assert.deepEqual(blueTag.attrs, { id: blueTag.id, name: 'Blue', labelIds: [] }, 'the child was persisted');\n      assert.equal(tag.labels.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(tag.labels.includes(blueTag), 'the model was added to tag.labels');\n      assert.ok(tag.labelIds.indexOf(blueTag.id) > -1, 'the id was added to the fks array');\n      assert.notOk(blueTag.labels.includes(tag), 'the inverse was not set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labelIds = [savedTag.id];\n\n      assert.deepEqual(tag.labels.models[0].attrs, savedTag.attrs);\n      assert.deepEqual(tag.labelIds, [savedTag.id]);\n\n      tag.save();\n      savedTag.reload();\n\n      assert.equal(savedTag.labels.models.length, 0, 'the inverse was not set');\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var tag = _helper$state32[0];\n\n      tag.labelIds = null;\n\n      assert.deepEqual(tag.labels.models, []);\n      assert.deepEqual(tag.labelIds, []);\n\n      tag.save();\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var tag = _helper$state2[0];\n\n      var savedTag = this.helper.savedChild();\n\n      tag.labels = [savedTag];\n\n      assert.ok(tag.labels.includes(savedTag));\n      assert.equal(tag.labelIds[0], savedTag.id);\n      assert.notOk(savedTag.labels.includes(tag), 'the inverse was not set');\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 1);\n\n      var tag = _helper$state32[0];\n\n      var newTag = this.helper.newChild();\n\n      tag.labels = [newTag];\n\n      assert.ok(tag.labels.includes(newTag));\n      assert.equal(tag.labelIds[0], undefined);\n      assert.notOk(newTag.labels.includes(tag), 'the inverse was not set');\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 1);\n\n      var tag = _helper$state42[0];\n\n      tag.labels = [];\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 1);\n\n      var tag = _helper$state52[0];\n\n      tag.labels = null;\n\n      assert.deepEqual(tag.labelIds, []);\n      assert.equal(tag.labels.models.length, 0);\n\n      tag.save();\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/create-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labelIds: [tagA.id]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the ids were persisted');\n    assert.deepEqual(tagB.labels.models[0].attrs, tagA.attrs);\n    assert.equal(this.helper.db.tags.length, 2);\n    assert.deepEqual(this.helper.db.tags[0], { id: '1', labelIds: null });\n    assert.deepEqual(this.helper.db.tags[1], { id: '2', labelIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: [tagA]\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id], 'the ids were persisted');\n    assert.deepEqual(tagA.attrs.labelIds, null, 'the inverse was not set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var tagA = schema.tags.create();\n    var tagB = schema.tags.create({\n      labels: schema.tags.all()\n    });\n\n    tagA.reload();\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.labelIds, [], 'the inverse was not set');\n    assert.deepEqual(tagB.attrs.labelIds, [tagA.id]);\n    assert.deepEqual(tagA.attrs.labelIds, null, 'the inverse was not set');\n    assert.equal(this.helper.db.tags.length, 2);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.tags.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var tag = _helper$state2[0];\n      var labels = _helper$state2[1];\n\n      if (labels && labels.length) {\n        labels.forEach(function (t) {\n          return t.destroy();\n        });\n        tag.reload();\n      }\n\n      assert.equal(tag.labels.length, 0);\n      assert.equal(tag.labelIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/new-test', ['exports', 'dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Named One-Way Reflexive | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany7NamedOneWayReflexive_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({\n      labelIds: [tagA.id]\n    });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.tags['new']({ labelIds: [2] });\n    }, /You're instantiating a tag that has a labelIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var tag = this.schema.tags['new']({ labelIds: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var tagA = this.schema.tags['new']({ color: 'Red' });\n    var tagB = this.schema.tags['new']({ labels: [tagA] });\n\n    assert.deepEqual(tagB.labelIds, [undefined]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var tag = this.schema.tags['new']({ labels: null });\n\n    assert.equal(tag.labels.models.length, 0);\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var tagA = this.helper.savedChild();\n    var tagB = this.schema.tags['new']({ labels: [tagA], labelIds: [tagA.id] });\n\n    assert.deepEqual(tagB.labelIds, [tagA.id]);\n    assert.deepEqual(tagB.labels.models[0], tagA);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var tag = this.schema.tags['new']({});\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var tag = this.schema.tags['new']();\n\n    assert.deepEqual(tag.labelIds, []);\n    assert.deepEqual(tag.labels.models, []);\n    assert.deepEqual(tag.attrs, { labelIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/7-named-one-way-reflexive/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/7-named-one-way-reflexive/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/7-named-one-way-reflexive/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      // implicit inverse\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        order: _emberCliMirage.Model.extend({\n          products: (0, _emberCliMirage.hasMany)()\n        }),\n        product: _emberCliMirage.Model.extend({\n          orders: (0, _emberCliMirage.hasMany)()\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var order = this.db.orders.insert({ name: 'Red' });\n\n        return [this.schema.orders.find(order.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var order = this.schema.orders.create({ name: 'Red' });\n        var product1 = this.schema.products['new']({ name: 'Blue' });\n        var product2 = this.schema.products['new']({ name: 'Green' });\n\n        order.products = [product1, product2];\n\n        return [order, [product1, product2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.orders.insert([{ id: '1', name: 'Red', productIds: ['2', '3'] }]);\n        schema.db.products.insert([{ id: '2', name: 'Blue', orderIds: ['1'] }, { id: '3', name: 'Green', orderIds: ['1'] }]);\n\n        return [schema.orders.find(1), [schema.products.find(2), schema.products.find(3)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.orders.insert([{ id: '1', name: 'Red', productIds: ['2'] }]);\n        this.schema.db.products.insert([{ id: '2', name: 'Blue', orderIds: ['1'] }]);\n        var order = this.schema.orders.find(1);\n        var product1 = this.schema.products.find(2);\n        var product2 = this.schema.products['new']({ name: 'Green' });\n\n        order.products = [product1, product2];\n\n        return [order, [product1, product2]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var order = this.schema.orders['new']({ name: 'Red' });\n\n        return [order, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var order = this.schema.orders['new']({ name: 'Red' });\n        var product1 = this.schema.products['new']({ name: 'Blue' });\n        var product2 = this.schema.products['new']({ name: 'Green' });\n\n        order.products = [product1, product2];\n\n        return [order, [product1, product2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var order = this.schema.orders['new']({ name: 'Red' });\n        var product1 = this.schema.products.create({ name: 'Blue' });\n        var product2 = this.schema.products.create({ name: 'Green' });\n\n        order.products = [product1, product2];\n\n        return [order, [product1, product2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var order = this.schema.orders['new']({ name: 'Red' });\n        var product1 = this.schema.products.create({ name: 'Blue' });\n        var product2 = this.schema.products['new']({ name: 'Green' });\n\n        order.products = [product1, product2];\n\n        return [order, [product1, product2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedProduct = this.db.products.insert({ name: 'Blue' });\n\n        return this.schema.products.find(insertedProduct.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.products['new']({ name: 'Blue' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentMixedChildren', 'savedParentSavedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/accessor-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var order = _helper$state2[0];\n      var products = _helper$state2[1];\n\n      assert.equal(order.products.models.length, products.length, 'the parent has the correct number of children');\n      assert.equal(order.productIds.length, products.length, 'the parent has the correct number of children ids');\n\n      products.forEach(function (p, i) {\n        assert.deepEqual(order.products.models[i], p, 'each child is in parent.children array');\n\n        if (p.isSaved()) {\n          assert.ok(order.productIds.indexOf(p.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n\n        // Check the inverse\n        assert.ok(p.orders.includes(order));\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-create-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var order = _helper$state2[0];\n\n      var initialCount = order.products.models.length;\n\n      var orangeProduct = order.createProduct({ name: 'Orange' });\n\n      assert.ok(orangeProduct.id, 'the child was persisted');\n      assert.equal(order.products.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(order.products.includes(orangeProduct), 'the model was added to order.products');\n      assert.ok(order.productIds.indexOf(orangeProduct.id) > -1, 'the id was added to the fks array');\n      assert.ok(order.attrs.productIds.indexOf(orangeProduct.id) > -1, 'fks were persisted');\n      assert.ok(orangeProduct.orders.includes(order), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-new-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated child', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var order = _helper$state2[0];\n\n      var initialCount = order.products.models.length;\n\n      var blueProduct = order.newProduct({ name: 'Blue' });\n\n      assert.ok(!blueProduct.id, 'the child was not persisted');\n      assert.equal(order.products.models.length, initialCount + 1);\n      assert.equal(blueProduct.orders.models.length, 1, 'the inverse was set');\n\n      blueProduct.save();\n\n      assert.deepEqual(blueProduct.attrs, { id: blueProduct.id, name: 'Blue', orderIds: [order.id] }, 'the child was persisted');\n      assert.equal(order.products.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(order.products.includes(blueProduct), 'the model was added to order.products');\n      assert.ok(order.productIds.indexOf(blueProduct.id) > -1, 'the id was added to the fks array');\n      assert.ok(blueProduct.orders.includes(order), 'the inverse was set');\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to include a saved child via childIds', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var order = _helper$state2[0];\n      var originalProducts = _helper$state2[1];\n\n      var savedProduct = this.helper.savedChild();\n\n      order.productIds = [savedProduct.id];\n\n      assert.deepEqual(order.products.models[0].attrs, savedProduct.attrs);\n      assert.deepEqual(order.productIds, [savedProduct.id]);\n\n      order.save();\n      savedProduct.reload();\n\n      assert.deepEqual(savedProduct.orders.models[0].attrs, order.attrs, 'the inverse was set');\n      originalProducts.forEach(function (p) {\n        if (p.isSaved()) {\n          p.reload();\n          assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null childIds', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var order = _helper$state32[0];\n      var originalProducts = _helper$state32[1];\n\n      order.productIds = null;\n\n      assert.deepEqual(order.products.models, []);\n      assert.deepEqual(order.productIds, []);\n\n      order.save();\n\n      originalProducts.forEach(function (p) {\n        p.reload();\n        assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-set-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var order = _helper$state2[0];\n      var originalProducts = _helper$state2[1];\n\n      var savedProduct = this.helper.savedChild();\n\n      order.products = [savedProduct];\n\n      assert.ok(order.products.includes(savedProduct));\n      assert.equal(order.productIds[0], savedProduct.id);\n      assert.ok(savedProduct.orders.includes(order), 'the inverse was set');\n\n      order.save();\n\n      originalProducts.forEach(function (p) {\n        p.reload();\n        assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var order = _helper$state32[0];\n      var originalProducts = _helper$state32[1];\n\n      var newProduct = this.helper.newChild();\n\n      order.products = [newProduct];\n\n      assert.ok(order.products.includes(newProduct));\n      assert.equal(order.productIds[0], undefined);\n      assert.ok(newProduct.orders.includes(order), 'the inverse was set');\n\n      order.save();\n\n      originalProducts.forEach(function (p) {\n        p.reload();\n        assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var order = _helper$state42[0];\n      var originalProducts = _helper$state42[1];\n\n      order.products = [];\n\n      assert.deepEqual(order.productIds, []);\n      assert.equal(order.products.models.length, 0);\n\n      order.save();\n      originalProducts.forEach(function (p) {\n        p.reload();\n        assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 2);\n\n      var order = _helper$state52[0];\n      var originalProducts = _helper$state52[1];\n\n      order.products = null;\n\n      assert.deepEqual(order.productIds, []);\n      assert.equal(order.products.models.length, 0);\n\n      order.save();\n\n      originalProducts.forEach(function (p) {\n        p.reload();\n        assert.notOk(p.orders.includes(order), 'old inverses were cleared');\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/create-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var product = schema.products.create();\n    var order = schema.orders.create({\n      productIds: [product.id]\n    });\n\n    product.reload();\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(product.orderIds, [order.id], 'the inverse was set');\n    assert.deepEqual(order.attrs.productIds, [product.id], 'the ids were persisted');\n    assert.deepEqual(product.attrs.orderIds, [order.id], 'the inverse ids were persisted');\n    assert.deepEqual(order.products.models[0].attrs, product.attrs);\n    assert.deepEqual(product.orders.models[0].attrs, order.attrs, 'the inverse was set');\n    assert.equal(this.helper.db.orders.length, 1);\n    assert.equal(this.helper.db.products.length, 1);\n    assert.deepEqual(this.helper.db.orders[0], { id: '1', productIds: ['1'] });\n    assert.deepEqual(this.helper.db.products[0], { id: '1', orderIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var schema = this.helper.schema;\n\n    var product = schema.products.create();\n    var order = schema.orders.create({\n      products: [product]\n    });\n\n    product.reload();\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(product.orderIds, [order.id], 'the inverse was set');\n    assert.deepEqual(order.attrs.productIds, [product.id], 'the ids were persisted');\n    assert.deepEqual(product.attrs.orderIds, [order.id], 'the inverse was set');\n    assert.equal(this.helper.db.orders.length, 1);\n    assert.equal(this.helper.db.products.length, 1);\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var schema = this.helper.schema;\n\n    var product = schema.products.create();\n    var order = schema.orders.create({\n      products: schema.products.all()\n    });\n\n    product.reload();\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(product.orderIds, [order.id], 'the inverse was set');\n    assert.deepEqual(order.attrs.productIds, [product.id]);\n    assert.deepEqual(product.attrs.orderIds, [order.id], 'the inverse was set');\n    assert.equal(this.helper.db.orders.length, 1);\n    assert.equal(this.helper.db.products.length, 1);\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.orders.create({\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.orders.create({\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.foos.create();\n    schema.foos.create();\n\n    assert.throws(function () {\n      schema.orders.create({\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/delete-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | delete', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n    }\n  });\n\n  _dummyTestsIntegrationOrmHasMany8ManyToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('deleting children updates the parent\\'s foreign key for a ' + state, function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var order = _helper$state2[0];\n      var products = _helper$state2[1];\n\n      if (products && products.length) {\n        products.forEach(function (t) {\n          return t.destroy();\n        });\n        order.reload();\n      }\n\n      assert.equal(order.products.length, 0);\n      assert.equal(order.productIds.length, 0);\n    });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/delete-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/delete-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/delete-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/new-test', ['exports', 'dummy/tests/integration/orm/has-many/8-many-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmHasMany8ManyToMany_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Has Many | Many to Many | new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmHasMany8ManyToMany_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var product = this.helper.savedChild();\n    var order = this.schema.orders['new']({\n      productIds: [product.id]\n    });\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(order.products.models[0], product);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.orders['new']({ productIds: [2] });\n    }, /You're instantiating a order that has a productIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var order = this.schema.orders['new']({ productIds: null });\n\n    assert.equal(order.products.models.length, 0);\n    assert.deepEqual(order.productIds, []);\n    assert.deepEqual(order.attrs, { productIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var product = this.helper.savedChild();\n    var order = this.schema.orders['new']({ products: [product] });\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(order.products.models[0], product);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var product = this.schema.products['new']({ color: 'Red' });\n    var order = this.schema.orders['new']({ products: [product] });\n\n    assert.deepEqual(order.productIds, [undefined]);\n    assert.deepEqual(order.products.models[0], product);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var order = this.schema.orders['new']({ products: null });\n\n    assert.equal(order.products.models.length, 0);\n    assert.deepEqual(order.productIds, []);\n    assert.deepEqual(order.attrs, { productIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var product = this.helper.savedChild();\n    var order = this.schema.orders['new']({ products: [product], productIds: [product.id] });\n\n    assert.deepEqual(order.productIds, [product.id]);\n    assert.deepEqual(order.products.models[0], product);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var order = this.schema.orders['new']({});\n\n    assert.deepEqual(order.productIds, []);\n    assert.deepEqual(order.products.models, []);\n    assert.deepEqual(order.attrs, { productIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var order = this.schema.orders['new']();\n\n    assert.deepEqual(order.productIds, []);\n    assert.deepEqual(order.products.models, []);\n    assert.deepEqual(order.attrs, { productIds: null });\n  });\n});","define('dummy/tests/integration/orm/has-many/8-many-to-many/new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/has-many/8-many-to-many/new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/has-many/8-many-to-many/new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)()\n        }),\n        post: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedParentNoChildren',\n      value: function savedParentNoChildren() {\n        var user = this.db.users.insert({ name: 'Link' });\n\n        return [this.schema.users.find(user.id), []];\n      }\n    }, {\n      key: 'savedParentNewChildren',\n      value: function savedParentNewChildren() {\n        var user = this.schema.users.create({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'savedParentSavedChildren',\n      value: function savedParentSavedChildren() {\n        var schema = this.schema;\n\n        schema.db.loadData({\n          users: [{ id: '1', name: 'Link', postIds: ['1', '2'] }],\n          posts: [{ id: '1', title: 'Lorem', userId: '1' }, { id: '2', title: 'Ipsum', userId: '1' }]\n        });\n\n        return [schema.users.find(1), [schema.posts.find(1), schema.posts.find(2)]];\n      }\n    }, {\n      key: 'savedParentMixedChildren',\n      value: function savedParentMixedChildren() {\n        this.schema.db.loadData({\n          users: [{ id: '1', name: 'Link', postIds: ['1'] }],\n          posts: [{ id: '1', title: 'Lorem', userId: '1' }]\n        });\n        var user = this.schema.users.find(1);\n        var post1 = this.schema.posts.find(1);\n        var post2 = this.schema.posts['new']({ name: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentNoChildren',\n      value: function newParentNoChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        return [user, []];\n      }\n    }, {\n      key: 'newParentNewChildren',\n      value: function newParentNewChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts['new']({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentSavedChildren',\n      value: function newParentSavedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts.create({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n    }, {\n      key: 'newParentMixedChildren',\n      value: function newParentMixedChildren() {\n        var user = this.schema.users['new']({ name: 'Link' });\n        var post1 = this.schema.posts.create({ title: 'Lorem' });\n        var post2 = this.schema.posts['new']({ title: 'Ipsum' });\n\n        user.posts = [post1, post2];\n\n        return [user, [post1, post2]];\n      }\n\n      // Unassociated child models, used for setting tests\n    }, {\n      key: 'savedChild',\n      value: function savedChild() {\n        var insertedPost = this.db.posts.insert({ title: 'Lorem' });\n\n        return this.schema.posts.find(insertedPost.id);\n      }\n    }, {\n      key: 'newChild',\n      value: function newChild() {\n        return this.schema.posts['new']({ title: 'Lorem' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedParentNoChildren', 'savedParentNewChildren', 'savedParentSavedChildren', 'savedParentMixedChildren', 'newParentNoChildren', 'newParentNewChildren', 'newParentSavedChildren', 'newParentMixedChildren'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/accessor-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmMixed1OneToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var posts = _helper$state2[1];\n\n      assert.equal(user.posts.models.length, posts.length, 'the parent has the correct number of children');\n      assert.equal(user.postIds.length, posts.length, 'the parent has the correct number of children ids');\n\n      posts.forEach(function (post, i) {\n        assert.deepEqual(user.posts.models[i], posts[i], 'each child is in parent.children array');\n\n        if (post.isSaved()) {\n          assert.ok(user.postIds.indexOf(post.id) > -1, 'each saved child id is in parent.childrenIds array');\n        }\n\n        // Check the inverse\n        assert.deepEqual(post.user.attrs, user.attrs);\n        assert.deepEqual(post.userId, user.id);\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-create-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmMixed1OneToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.posts.models.length;\n\n      var post = user.createPost({ title: 'Lorem ipsum' });\n\n      assert.ok(post.id, 'the child was persisted');\n      assert.equal(user.posts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(user.posts.includes(post), 'the model was added to user.posts');\n      assert.ok(user.postIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n      assert.ok(user.attrs.postIds.indexOf(post.id) > -1, 'fks were persisted');\n\n      // Check the inverse\n      assert.deepEqual(post.user.attrs, user.attrs);\n      assert.deepEqual(post.userId, user.id);\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-new-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmMixed1OneToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 1);\n\n      var user = _helper$state2[0];\n\n      var initialCount = user.posts.models.length;\n\n      var post = user.newPost({ title: 'Lorem ipsum' });\n\n      assert.ok(!post.id, 'the child was not persisted');\n      assert.equal(user.posts.models.length, initialCount + 1);\n\n      post.save();\n\n      assert.deepEqual(post.attrs, { id: post.id, title: 'Lorem ipsum', userId: user.id }, 'the child was persisted');\n      assert.equal(user.posts.models.length, initialCount + 1, 'the collection size was increased');\n      assert.ok(user.posts.includes(post), 'the model was added to user.posts');\n      assert.ok(user.postIds.indexOf(post.id) > -1, 'the id was added to the fks array');\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmMixed1OneToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalPosts = _helper$state2[1];\n\n      var savedPost = this.helper.savedChild();\n\n      user.postIds = [savedPost.id];\n\n      assert.ok(user.posts.includes(savedPost));\n      assert.deepEqual(user.postIds, [savedPost.id]);\n\n      user.save();\n      savedPost.reload();\n\n      // Check the inverse\n      assert.deepEqual(savedPost.user.attrs, user.attrs);\n      assert.equal(savedPost.userId, user.id);\n\n      // Check old associates\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var user = _helper$state32[0];\n      var originalPosts = _helper$state32[1];\n\n      user.postIds = null;\n\n      assert.deepEqual(user.posts.models, []);\n      assert.deepEqual(user.postIds, []);\n\n      user.save();\n\n      // Check old associates\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-set-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmMixed1OneToMany_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a list of saved children', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var user = _helper$state2[0];\n      var originalPosts = _helper$state2[1];\n\n      var savedPost = this.helper.savedChild();\n\n      user.posts = [savedPost];\n\n      assert.ok(user.posts.includes(savedPost));\n      assert.ok(user.postIds.indexOf(savedPost.id) > -1);\n\n      user.save();\n\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var user = _helper$state32[0];\n      var originalPosts = _helper$state32[1];\n\n      var newPost = this.helper.newChild();\n\n      user.posts = [newPost];\n\n      assert.deepEqual(user.postIds, [undefined]);\n      assert.ok(user.posts.includes(newPost));\n\n      user.save();\n\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var user = _helper$state42[0];\n      var originalPosts = _helper$state42[1];\n\n      user.posts = [];\n\n      assert.deepEqual(user.postIds, []);\n      assert.equal(user.posts.models.length, 0);\n\n      user.save();\n\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via an empty list', function (assert) {\n      var _helper$state5 = this.helper[state]();\n\n      var _helper$state52 = _slicedToArray(_helper$state5, 2);\n\n      var user = _helper$state52[0];\n      var originalPosts = _helper$state52[1];\n\n      user.posts = null;\n\n      assert.deepEqual(user.postIds, []);\n      assert.equal(user.posts.models.length, 0);\n\n      user.save();\n\n      originalPosts.forEach(function (post) {\n        if (post.isSaved()) {\n          post.reload();\n          assert.equal(post.user, null);\n        }\n      });\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/create-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      postIds: [post.id]\n    });\n    post.reload();\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.ok(user.posts.includes(post));\n    assert.deepEqual(post.user.attrs, user.attrs);\n\n    var db = this.helper.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], { id: '1', userId: '1' });\n    assert.equal(db.users.length, 1);\n    assert.deepEqual(db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in an array of models', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      posts: [post]\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.ok(user.posts.includes(post));\n    assert.deepEqual(post.user.attrs, user.attrs);\n\n    var db = this.helper.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], { id: '1', userId: '1' });\n    assert.equal(db.users.length, 1);\n    assert.deepEqual(db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in a collection', function (assert) {\n    var post = this.helper.schema.create('post');\n    var user = this.helper.schema.create('user', {\n      posts: this.helper.schema.posts.all()\n    });\n    post.reload();\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.attrs.postIds, [post.id], 'the ids were persisted');\n    assert.ok(user.posts.includes(post));\n\n    var db = this.helper.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], { id: '1', userId: '1' });\n    assert.equal(db.users.length, 1);\n    assert.deepEqual(db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if an array of models is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('user', {\n        foos: [schema.create('foo')]\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/instantiating-test', ['exports', 'dummy/tests/integration/orm/mixed/1-one-to-many/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed1OneToMany_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed1OneToMany_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the parent accepts a saved child id', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({\n      postIds: [post.id]\n    });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent errors if the children ids don\\'t exist', function (assert) {\n    assert.throws(function () {\n      this.schema.users['new']({ postIds: [2] });\n    }, /You're instantiating a user that has a postIds of 2, but some of those records don't exist in the database/);\n  });\n\n  (0, _qunit.test)('the parent accepts null children foreign key', function (assert) {\n    var user = this.schema.users['new']({ postIds: null });\n\n    assert.equal(user.posts.models.length, 0);\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts saved children', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ posts: [post] });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts new children', function (assert) {\n    var post = this.schema.posts['new']({ title: 'Lorem' });\n    var user = this.schema.users['new']({ posts: [post] });\n\n    assert.deepEqual(user.postIds, [undefined]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts null children', function (assert) {\n    var user = this.schema.users['new']({ posts: null });\n\n    assert.equal(user.posts.models.length, 0);\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts children and child ids', function (assert) {\n    var post = this.helper.savedChild();\n    var user = this.schema.users['new']({ posts: [post], postIds: [post.id] });\n\n    assert.deepEqual(user.postIds, [post.id]);\n    assert.deepEqual(user.posts.models[0], post);\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids as empty obj', function (assert) {\n    var user = this.schema.users['new']({});\n\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.posts.models, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n\n  (0, _qunit.test)('the parent accepts no reference to children or child ids', function (assert) {\n    var user = this.schema.users['new']();\n\n    assert.deepEqual(user.postIds, []);\n    assert.deepEqual(user.posts.models, []);\n    assert.deepEqual(user.attrs, { postIds: null });\n  });\n});","define('dummy/tests/integration/orm/mixed/1-one-to-many/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/1-one-to-many/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/1-one-to-many/instantiating-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/_helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb) {\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n  /*\n    A model with a hasMany association can be in eight states\n    with respect to its association. This helper class\n    returns a parent (and its children) in these various states.\n  \n    The return value is an array of the form\n  \n      [ parent, [child1, child2...] ]\n  \n    where the children array may be empty.\n  */\n\n  var Helper = (function () {\n    function Helper() {\n      _classCallCheck(this, Helper);\n\n      this.db = new _emberCliMirageDb['default']();\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)()\n        }),\n        post: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    }\n\n    _createClass(Helper, [{\n      key: 'savedChildNoParent',\n      value: function savedChildNoParent() {\n        var post = this.db.posts.insert({ title: 'Lorem' });\n\n        return [this.schema.posts.find(post.id), null];\n      }\n    }, {\n      key: 'savedChildNewParent',\n      value: function savedChildNewParent() {\n        var post = this.schema.posts.create({ title: 'Lorem' });\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        post.user = user;\n\n        return [post, user];\n      }\n    }, {\n      key: 'savedChildSavedParent',\n      value: function savedChildSavedParent() {\n        var schema = this.schema;\n\n        schema.db.loadData({\n          posts: [{ id: '1', title: 'Lorem', userId: '1' }],\n          users: [{ id: '1', name: 'Link', postIds: ['1'] }]\n        });\n\n        return [schema.posts.find(1), schema.users.find(1)];\n      }\n    }, {\n      key: 'newChildNoParent',\n      value: function newChildNoParent() {\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n\n        return [post, null];\n      }\n    }, {\n      key: 'newChildNewParent',\n      value: function newChildNewParent() {\n        var post = this.schema.posts['new']({ title: 'Lorem' });\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        post.user = user;\n\n        return [post, user];\n      }\n    }, {\n      key: 'newChildSavedParent',\n      value: function newChildSavedParent() {\n        var post = this.schema.posts.create({ title: 'Lorem' });\n        var user = this.schema.users['new']({ name: 'Link' });\n\n        post.user = user;\n\n        return [post, user];\n      }\n\n      // Unassociated models\n    }, {\n      key: 'savedParent',\n      value: function savedParent() {\n        var insertedUser = this.db.users.insert({ name: 'Link' });\n\n        return this.schema.users.find(insertedUser.id);\n      }\n    }, {\n      key: 'newParent',\n      value: function newParent() {\n        return this.schema.users['new']({ name: 'Link' });\n      }\n    }]);\n\n    return Helper;\n  })();\n\n  exports['default'] = Helper;\n  var states = ['savedChildNoParent', 'savedChildNewParent', 'savedChildSavedParent', 'newChildNoParent', 'newChildNewParent', 'newChildSavedParent'];\n  exports.states = states;\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/_helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/_helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/_helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/accessor-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | accessor', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n    }\n  });\n\n  /*\n    The reference to a belongs-to association is correct, for all states\n  */\n  _dummyTestsIntegrationOrmMixed2ManyToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('the references of a ' + state + ' are correct', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var user = _helper$state2[1];\n\n      assert.deepEqual(post.user, user);\n      assert.equal(post.userId, user ? user.id : null);\n\n      post.save();\n\n      // Check the inverse\n      if (user && user.isSaved()) {\n        user.reload();\n        assert.ok(user.posts.includes(post));\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/accessor-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/accessor-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/accessor-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-create-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | association #create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can create a has-many association, for all states\n  */\n  _dummyTestsIntegrationOrmMixed2ManyToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can create an associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var user = post.createUser({ name: 'Zelda' });\n\n      assert.ok(user.id, 'the parent was persisted');\n      assert.deepEqual(post.user.attrs, user.attrs);\n      assert.equal(post.userId, user.id);\n\n      // Check the inverse\n      assert.ok(user.posts.includes(post), 'the inverse was set');\n\n      // Ensure old inverse was cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/association-create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/association-create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-new-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | association #new', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can make a new unsaved belongs-to association, for all states\n  */\n\n  _dummyTestsIntegrationOrmMixed2ManyToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can build a new associated parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var user = post.newUser({ name: 'Zelda' });\n\n      assert.ok(!user.id, 'the child was not persisted');\n      assert.deepEqual(post.user, user, 'the relationship was set');\n      assert.ok(user.posts.includes(post), 'the inverse was set');\n\n      user.save();\n      post.reload();\n\n      assert.ok(user.id, 'the parent was persisted');\n      assert.deepEqual(post.user.attrs, user.attrs);\n      assert.equal(post.userId, user.id);\n\n      // Check the inverse\n      assert.ok(user.posts.includes(post), 'the inverse was set');\n\n      // Ensure old inverse was cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-new-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/association-new-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/association-new-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-set-ids-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | association #setIds', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parentId, for all states\n  */\n  _dummyTestsIntegrationOrmMixed2ManyToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent via parentId', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var user = this.helper.savedParent();\n\n      post.userId = user.id;\n\n      assert.equal(post.userId, user.id);\n      assert.deepEqual(post.user.attrs, user.attrs);\n\n      assert.ok(post.user.posts.includes(post), 'the inverse was set');\n\n      post.save();\n      user.reload();\n\n      assert.ok(user.posts.includes(post));\n\n      // Old inverses were cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n\n    (0, _qunit.test)('a ' + state + ' can clear its association via a null parentId', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var post = _helper$state32[0];\n      var originalUser = _helper$state32[1];\n\n      post.userId = null;\n\n      assert.deepEqual(post.user, null);\n      assert.deepEqual(post.userId, null);\n\n      post.save();\n\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-set-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/association-set-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/association-set-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-set-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | association #set', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n    }\n  });\n\n  /*\n    The model can update its association via parent, for all states\n  */\n  _dummyTestsIntegrationOrmMixed2ManyToOne_helper.states.forEach(function (state) {\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a saved parent', function (assert) {\n      var _helper$state = this.helper[state]();\n\n      var _helper$state2 = _slicedToArray(_helper$state, 2);\n\n      var post = _helper$state2[0];\n      var originalUser = _helper$state2[1];\n\n      var savedUser = this.helper.savedParent();\n\n      post.user = savedUser;\n\n      assert.deepEqual(post.user, savedUser);\n      assert.ok(savedUser.posts.includes(post), 'the inverse was set');\n\n      post.save();\n\n      // Old inverse was cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a new parent', function (assert) {\n      var _helper$state3 = this.helper[state]();\n\n      var _helper$state32 = _slicedToArray(_helper$state3, 2);\n\n      var post = _helper$state32[0];\n      var originalUser = _helper$state32[1];\n\n      var newUser = this.helper.newParent();\n\n      post.user = newUser;\n\n      assert.deepEqual(post.user, newUser);\n      assert.ok(newUser.posts.includes(post), 'the inverse was set');\n\n      post.save();\n\n      // Old inverse was cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n\n    (0, _qunit.test)('a ' + state + ' can update its association to a null parent', function (assert) {\n      var _helper$state4 = this.helper[state]();\n\n      var _helper$state42 = _slicedToArray(_helper$state4, 2);\n\n      var post = _helper$state42[0];\n      var originalUser = _helper$state42[1];\n\n      post.user = null;\n\n      assert.deepEqual(post.user, null);\n\n      post.save();\n\n      // Old inverse was cleared\n      if (originalUser && originalUser.isSaved()) {\n        originalUser.reload();\n        assert.notOk(originalUser.posts.includes(post));\n      }\n    });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/association-set-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/association-set-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/association-set-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/create-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'ember-cli-mirage', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Mixed | Many To One | create', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n      this.helper.schema.registerModel('foo', _emberCliMirage.Model);\n    }\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the foreign key', function (assert) {\n    var schema = this.helper.schema;\n\n    var user = schema.create('user');\n    var post = schema.create('post', {\n      userId: user.id\n    });\n    user.reload();\n\n    assert.deepEqual(post.user.attrs, user.attrs);\n    assert.equal(post.userId, user.id);\n    assert.ok(user.posts.includes(post), 'inverse was set');\n    assert.deepEqual(user.postIds, [post.id]);\n\n    var db = this.helper.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], { id: '1', userId: '1' });\n    assert.equal(db.users.length, 1);\n    assert.deepEqual(db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it sets up associations correctly when passing in the association itself', function (assert) {\n    var schema = this.helper.schema;\n\n    var user = schema.create('user');\n    var post = schema.create('post', {\n      user: user\n    });\n\n    assert.deepEqual(post.user.attrs, user.attrs);\n    assert.equal(post.userId, user.id);\n    assert.ok(user.posts.includes(post), 'inverse was set');\n    assert.deepEqual(user.postIds, [post.id]);\n\n    var db = this.helper.db;\n\n    assert.equal(db.posts.length, 1);\n    assert.deepEqual(db.posts[0], { id: '1', userId: '1' });\n    assert.equal(db.users.length, 1);\n    assert.deepEqual(db.users[0], { id: '1', postIds: ['1'] });\n  });\n\n  (0, _qunit.test)('it throws an error if a model is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    assert.throws(function () {\n      schema.create('post', {\n        foo: schema.create('foo')\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n\n  (0, _qunit.test)('it throws an error if a collection is passed in without a defined relationship', function (assert) {\n    var schema = this.helper.schema;\n\n    schema.create('foo');\n    schema.create('foo');\n\n    assert.throws(function () {\n      schema.create('post', {\n        foos: schema.foos.all()\n      });\n    }, /you haven't defined that key as an association on your model/);\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/create-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/create-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/mixed/2-many-to-one/create-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/instantiating-test', ['exports', 'dummy/tests/integration/orm/mixed/2-many-to-one/_helper', 'qunit'], function (exports, _dummyTestsIntegrationOrmMixed2ManyToOne_helper, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Mixed | One To Many | instantiating', {\n    beforeEach: function beforeEach() {\n      this.helper = new _dummyTestsIntegrationOrmMixed2ManyToOne_helper['default']();\n      this.schema = this.helper.schema;\n    }\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent id', function (assert) {\n    var user = this.helper.savedParent();\n    var post = this.schema.posts['new']({ userId: user.id });\n\n    assert.equal(post.userId, user.id);\n    assert.deepEqual(post.user.attrs, user.attrs);\n    assert.deepEqual(post.attrs, { userId: user.id });\n\n    post.save();\n    user.reload();\n\n    assert.ok(user.posts.includes(post), 'the inverse was set');\n  });\n\n  (0, _qunit.test)('the child errors if the parent id doesnt exist', function (assert) {\n    assert.throws(function () {\n      this.schema.posts['new']({ userId: 2 });\n    }, /You're instantiating a post that has a userId of 2, but that record doesn't exist in the database/);\n  });\n\n  (0, _qunit.test)('the child accepts a null parent id', function (assert) {\n    var post = this.schema.posts['new']({ userId: null });\n\n    assert.equal(post.userId, null);\n    assert.equal(post.user, null);\n    assert.deepEqual(post.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a saved parent model', function (assert) {\n    var user = this.helper.savedParent();\n    var post = this.schema.posts['new']({ user: user });\n\n    assert.equal(post.userId, 1);\n    assert.deepEqual(post.user.attrs, user.attrs);\n    assert.deepEqual(post.attrs, { userId: null });\n\n    post.save();\n    user.reload();\n\n    assert.ok(user.posts.includes(post), 'the inverse was set');\n  });\n\n  (0, _qunit.test)('the child accepts a new parent model', function (assert) {\n    var user = this.schema.users['new']({ age: 300 });\n    var post = this.schema.posts['new']({ user: user });\n\n    assert.equal(post.userId, null);\n    assert.deepEqual(post.user, user);\n    assert.deepEqual(post.attrs, { userId: null });\n    assert.ok(user.posts.includes(post), 'the inverse was set');\n  });\n\n  (0, _qunit.test)('the child accepts a null parent model', function (assert) {\n    var post = this.schema.posts['new']({ user: null });\n\n    assert.equal(post.userId, null);\n    assert.deepEqual(post.user, null);\n    assert.deepEqual(post.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts a parent model and id', function (assert) {\n    var user = this.helper.savedParent();\n    var post = this.schema.posts['new']({ user: user, userId: user.id });\n\n    assert.equal(post.userId, '1');\n    assert.deepEqual(post.user, user);\n    assert.deepEqual(post.attrs, { userId: user.id });\n\n    assert.ok(user.posts.includes(post), 'the inverse was set');\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model as empty obj', function (assert) {\n    var post = this.schema.posts['new']({});\n\n    assert.equal(post.userId, null);\n    assert.deepEqual(post.user, null);\n    assert.deepEqual(post.attrs, { userId: null });\n  });\n\n  (0, _qunit.test)('the child accepts no reference to a parent id or model', function (assert) {\n    var post = this.schema.posts['new']();\n\n    assert.equal(post.userId, null);\n    assert.deepEqual(post.user, null);\n    assert.deepEqual(post.attrs, { userId: null });\n  });\n});","define('dummy/tests/integration/orm/mixed/2-many-to-one/instantiating-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/mixed/2-many-to-one/instantiating-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/orm/mixed/2-many-to-one/instantiating-test.js should pass ESLint.\\n73:43  - There should be no space before \\',\\'. (comma-spacing)');\n  });\n});","define('dummy/tests/integration/orm/reinitialize-associations-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _qunit) {\n\n  // Model classes are defined statically, just like in a typical app\n  var User = _emberCliMirage.Model.extend({\n    addresses: (0, _emberCliMirage.hasMany)()\n  });\n  var Address = _emberCliMirage.Model.extend();\n\n  (0, _qunit.module)('Integration | ORM | reinitialize associations', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        address: Address,\n        user: User\n      });\n\n      this.schema.addresses.create({ id: 1, country: 'Hyrule' });\n      this.schema.users.create({ id: 1, name: 'Link', addressIds: [1] });\n    }\n  });\n\n  // By running two tests, we force the statically-defined classes to be\n  // registered twice.\n  (0, _qunit.test)('safely initializes associations', function (assert) {\n    assert.equal(this.schema.users.find(1).addresses.models[0].country, 'Hyrule');\n  });\n  (0, _qunit.test)('safely initializes associations again', function (assert) {\n    assert.equal(this.schema.users.find(1).addresses.models[0].country, 'Hyrule');\n  });\n});\n// jscs:disable disallowVar","define('dummy/tests/integration/orm/reinitialize-associations-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/reinitialize-associations-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/reinitialize-associations-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/schema-verification/belongs-to-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Schema Verification | Belongs To');\n\n  (0, _qunit.test)('a one-way belongsTo association is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      author: _emberCliMirage.Model.extend(),\n      post: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)()\n      })\n    });\n\n    var association = schema.modelClassFor('post').associationFor('author');\n\n    assert.equal(association.key, 'author');\n    assert.equal(association.modelName, 'author');\n    assert.equal(association.ownerModelName, 'post');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a one-way named belongsTo association is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend(),\n      post: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)('user')\n      })\n    });\n\n    var association = schema.modelClassFor('post').associationFor('author');\n\n    assert.equal(association.key, 'author');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'post');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a reflexive belongsTo association is correct and has an implicit inverse', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        user: (0, _emberCliMirage.belongsTo)()\n      })\n    });\n\n    var association = schema.modelClassFor('user').associationFor('user');\n\n    assert.equal(association.key, 'user');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === association, 'the implicit inverse was found');\n  });\n\n  (0, _qunit.test)('a named reflexive belongsTo association with an implicit inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        bestFriend: (0, _emberCliMirage.belongsTo)('user')\n      })\n    });\n\n    var association = schema.modelClassFor('user').associationFor('bestFriend');\n\n    assert.equal(association.key, 'bestFriend');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === association, 'the implicit inverse was found');\n  });\n\n  (0, _qunit.test)('a named reflexive belongsTo association with an explicit inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        bestFriend: (0, _emberCliMirage.belongsTo)('user', { inverse: 'bestFriend' })\n      })\n    });\n\n    var association = schema.modelClassFor('user').associationFor('bestFriend');\n\n    assert.equal(association.key, 'bestFriend');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === association, 'the implicit inverse was found');\n  });\n\n  (0, _qunit.test)('a one way reflexive belongsTo association with a null inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        user: (0, _emberCliMirage.belongsTo)('user', { inverse: null })\n      })\n    });\n\n    var association = schema.modelClassFor('user').associationFor('user');\n\n    assert.equal(association.key, 'user');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a named way reflexive belongsTo association with a null inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        parent: (0, _emberCliMirage.belongsTo)('user', { inverse: null })\n      })\n    });\n\n    var association = schema.modelClassFor('user').associationFor('parent');\n\n    assert.equal(association.key, 'parent');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a one to one belongsTo association with an implicit inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        profile: (0, _emberCliMirage.belongsTo)()\n      }),\n      profile: _emberCliMirage.Model.extend({\n        user: (0, _emberCliMirage.belongsTo)()\n      })\n    });\n\n    var association = schema.modelClassFor('profile').associationFor('user');\n\n    assert.equal(association.key, 'user');\n    assert.equal(association.modelName, 'user');\n    assert.equal(association.ownerModelName, 'profile');\n\n    var inverse = association.inverse();\n\n    assert.equal(inverse.key, 'profile');\n    assert.equal(inverse.modelName, 'profile');\n    assert.equal(inverse.ownerModelName, 'user');\n  });\n});","define('dummy/tests/integration/orm/schema-verification/belongs-to-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/schema-verification/belongs-to-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/schema-verification/belongs-to-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/schema-verification/has-many-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Schema Verification | Has Many');\n\n  (0, _qunit.test)('a one-way has many association is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        posts: (0, _emberCliMirage.hasMany)()\n      }),\n      post: _emberCliMirage.Model.extend()\n    });\n\n    var association = schema.modelClassFor('user').associationFor('posts');\n\n    assert.equal(association.key, 'posts');\n    assert.equal(association.modelName, 'post');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a named one-way has many association is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        blogPosts: (0, _emberCliMirage.hasMany)('post')\n      }),\n      post: _emberCliMirage.Model.extend()\n    });\n\n    var association = schema.modelClassFor('user').associationFor('blogPosts');\n\n    assert.equal(association.key, 'blogPosts');\n    assert.equal(association.modelName, 'post');\n    assert.equal(association.ownerModelName, 'user');\n    assert.ok(association.inverse() === null, 'there is no inverse');\n  });\n\n  (0, _qunit.test)('a reflexive hasMany association with an implicit inverse is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      tag: _emberCliMirage.Model.extend({\n        tags: (0, _emberCliMirage.hasMany)()\n      })\n    });\n\n    var association = schema.modelClassFor('tag').associationFor('tags');\n\n    assert.equal(association.key, 'tags');\n    assert.equal(association.modelName, 'tag');\n    assert.equal(association.ownerModelName, 'tag');\n    assert.ok(association.inverse() === association, 'the implicit inverse was found');\n  });\n});","define('dummy/tests/integration/orm/schema-verification/has-many-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/schema-verification/has-many-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/schema-verification/has-many-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/schema-verification/mixed-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | Schema Verification | Mixed');\n\n  (0, _qunit.test)('unnamed one-to-many associations are correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      wordSmith: _emberCliMirage.Model.extend({\n        blogPosts: (0, _emberCliMirage.hasMany)()\n      }),\n      blogPost: _emberCliMirage.Model.extend({\n        wordSmith: (0, _emberCliMirage.belongsTo)()\n      })\n    });\n\n    var association = schema.associationsFor('word-smith').blogPosts;\n    var inverse = schema.associationsFor('blog-post').wordSmith;\n\n    assert.equal(association.key, 'blogPosts');\n    assert.equal(association.modelName, 'blog-post');\n    assert.equal(association.ownerModelName, 'word-smith');\n    assert.deepEqual(association.inverse(), inverse);\n  });\n\n  (0, _qunit.test)('a named one-to-many association is correct', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      wordSmith: _emberCliMirage.Model.extend({\n        posts: (0, _emberCliMirage.hasMany)('blog-post')\n      }),\n      blogPost: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)('word-smith')\n      })\n    });\n\n    var association = schema.associationsFor('word-smith').posts;\n    var inverse = schema.associationsFor('blog-post').author;\n\n    assert.equal(association.key, 'posts');\n    assert.equal(association.modelName, 'blog-post');\n    assert.equal(association.ownerModelName, 'word-smith');\n    assert.deepEqual(association.inverse(), inverse);\n  });\n\n  (0, _qunit.test)('multiple has-many associations of the same type', function (assert) {\n    var schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n      user: _emberCliMirage.Model.extend({\n        notes: (0, _emberCliMirage.hasMany)('post', { inverse: 'author' }),\n        messages: (0, _emberCliMirage.hasMany)('post', { inverse: 'messenger' })\n      }),\n      post: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)('user', { inverse: 'notes' }),\n        messenger: (0, _emberCliMirage.belongsTo)('user', { inverse: 'messages' })\n      })\n    });\n\n    var _schema$associationsFor = schema.associationsFor('user');\n\n    var notes = _schema$associationsFor.notes;\n    var messages = _schema$associationsFor.messages;\n\n    var _schema$associationsFor2 = schema.associationsFor('post');\n\n    var author = _schema$associationsFor2.author;\n    var messenger = _schema$associationsFor2.messenger;\n\n    assert.equal(notes.key, 'notes');\n    assert.equal(notes.modelName, 'post');\n    assert.equal(notes.ownerModelName, 'user');\n    assert.deepEqual(notes.inverse(), author);\n    assert.equal(messages.key, 'messages');\n    assert.equal(messages.modelName, 'post');\n    assert.equal(messages.ownerModelName, 'user');\n    assert.deepEqual(messages.inverse(), messenger);\n  });\n});","define('dummy/tests/integration/orm/schema-verification/mixed-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/schema-verification/mixed-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/schema-verification/mixed-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/update-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _qunit) {\n\n  (0, _qunit.module)('Integration | ORM | update', {\n    beforeEach: function beforeEach() {\n      this.db = new _emberCliMirageDb['default']({\n        users: [{ id: 1, name: 'Link', location: 'Hyrule', evil: false }, { id: 2, name: 'Zelda', location: 'Hyrule', evil: false }]\n      });\n\n      this.schema = new _emberCliMirageOrmSchema['default'](this.db, {\n        user: _emberCliMirageOrmModel['default']\n      });\n    }\n  });\n\n  (0, _qunit.test)('a collection can update its models with a key and value', function (assert) {\n    var collection = this.schema.users.all();\n    collection.update('evil', true);\n\n    assert.deepEqual(this.db.users, [{ id: '1', name: 'Link', location: 'Hyrule', evil: true }, { id: '2', name: 'Zelda', location: 'Hyrule', evil: true }]);\n    assert.deepEqual(collection.models[0].attrs, { id: '1', name: 'Link', location: 'Hyrule', evil: true });\n  });\n\n  (0, _qunit.test)('it can update its models with a hash of attrs', function (assert) {\n    var collection = this.schema.users.all();\n    collection.update({ location: 'The water temple', evil: true });\n\n    assert.deepEqual(this.db.users, [{ id: '1', name: 'Link', location: 'The water temple', evil: true }, { id: '2', name: 'Zelda', location: 'The water temple', evil: true }]);\n    assert.deepEqual(collection.models[0].attrs, { id: '1', name: 'Link', location: 'The water temple', evil: true });\n    assert.deepEqual(collection.models[1].attrs, { id: '2', name: 'Zelda', location: 'The water temple', evil: true });\n  });\n\n  (0, _qunit.test)('it can set an attribute and then save the model', function (assert) {\n    var user = this.schema.users.find(1);\n\n    user.name = 'Young link';\n\n    assert.deepEqual(user.attrs, { id: '1', name: 'Young link', location: 'Hyrule', evil: false });\n    assert.deepEqual(this.db.users.find(1), { id: '1', name: 'Link', location: 'Hyrule', evil: false });\n\n    user.save();\n\n    assert.deepEqual(user.attrs, { id: '1', name: 'Young link', location: 'Hyrule', evil: false });\n    assert.deepEqual(this.db.users.find(1), { id: '1', name: 'Young link', location: 'Hyrule', evil: false });\n  });\n\n  (0, _qunit.test)('it can update and immediately persist a single attribute', function (assert) {\n    var link = this.schema.users.find(1);\n    link.update('evil', true);\n\n    assert.deepEqual(link.attrs, { id: '1', name: 'Link', location: 'Hyrule', evil: true });\n    assert.deepEqual(this.db.users.find(1), { id: '1', name: 'Link', location: 'Hyrule', evil: true });\n  });\n\n  (0, _qunit.test)('it can update a hash of attrs immediately', function (assert) {\n    var link = this.schema.users.find(1);\n    link.update({ name: 'Evil link', evil: true });\n\n    assert.deepEqual(link.attrs, { id: '1', name: 'Evil link', location: 'Hyrule', evil: true });\n    assert.deepEqual(this.db.users.find(1), { id: '1', name: 'Evil link', location: 'Hyrule', evil: true });\n  });\n\n  (0, _qunit.test)('it can update a non-existing attribute', function (assert) {\n    var link = this.schema.users.find(1);\n    link.update({ name: 'Evil link', evil: true, reallyEvil: 'absolutely evil' });\n\n    assert.deepEqual(link.attrs, { id: '1', name: 'Evil link', location: 'Hyrule', evil: true, reallyEvil: 'absolutely evil' });\n    assert.deepEqual(this.db.users.find(1), { id: '1', name: 'Evil link', location: 'Hyrule', evil: true, reallyEvil: 'absolutely evil' });\n  });\n\n  (0, _qunit.test)('if users sets incorrectly an attribute without using update, it will still work', function (assert) {\n    var link = this.schema.users.find(1);\n    link.reallyEvil = 'absolutely evil';\n    link.update({ reallyEvil: 'a little flower', evil: true });\n    assert.deepEqual(link.attrs, { id: '1', reallyEvil: 'a little flower', evil: true, location: 'Hyrule', name: 'Link' });\n    assert.deepEqual(this.db.users.find(1), { id: '1', reallyEvil: 'a little flower', evil: true, location: 'Hyrule', name: 'Link' });\n  });\n});","define('dummy/tests/integration/orm/update-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/update-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/update-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/orm/where-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/collection', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _emberCliMirageOrmCollection, _qunit) {\n\n  var schema = undefined;\n  var User = _emberCliMirageOrmModel['default'].extend();\n  (0, _qunit.module)('Integration | ORM | #where', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']({ users: [{ id: 1, name: 'Link', good: true }, { id: 2, name: 'Zelda', good: true }, { id: 3, name: 'Ganon', good: false }] });\n\n      schema = new _emberCliMirageOrmSchema['default'](db, {\n        user: User\n      });\n    }\n  });\n\n  (0, _qunit.test)('it returns models that match a query with where', function (assert) {\n    var users = schema.users.where({ good: false });\n\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.equal(users.models.length, 1);\n    assert.ok(users.models[0] instanceof User);\n    assert.deepEqual(users.models[0].attrs, { id: '3', name: 'Ganon', good: false });\n  });\n\n  (0, _qunit.test)('it returns models that match using a query function', function (assert) {\n    var users = schema.users.where(function (rec) {\n      return !rec.good;\n    });\n\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.equal(users.models.length, 1);\n    assert.ok(users.models[0] instanceof User);\n    assert.deepEqual(users.models[0].attrs, { id: '3', name: 'Ganon', good: false });\n  });\n\n  (0, _qunit.test)('it returns an empty collection if no models match a query', function (assert) {\n    var users = schema.users.where({ name: 'Link', good: false });\n\n    assert.ok(users instanceof _emberCliMirageOrmCollection['default'], 'it returns a collection');\n    assert.equal(users.models.length, 0);\n  });\n});","define('dummy/tests/integration/orm/where-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/orm/where-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/orm/where-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/passthrough-test', ['exports', 'qunit', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Passthrough', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development'\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('it can passthrough individual paths', function (assert) {\n    assert.expect(2);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.get('/contacts', function () {\n        return 123;\n      });\n      this.passthrough('/addresses');\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      success: function success(data) {\n        assert.equal(data, 123);\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/addresses',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done2();\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can passthrough certain verbs for individual paths', function (assert) {\n    assert.expect(3);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var done3 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.get('/contacts', function () {\n        return 123;\n      });\n      this.passthrough('/addresses', ['post']);\n    });\n    server.pretender.unhandledRequest = function () /* verb, path */{\n      assert.ok(true, 'it doesnt passthrough GET');\n      done2();\n    };\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      success: function success(data) {\n        assert.equal(data, 123);\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/addresses'\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/addresses',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done3();\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can passthrough multiple paths in a single call', function (assert) {\n    assert.expect(2);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.get('/contacts', function () {\n        return 123;\n      });\n      this.passthrough('/contacts', '/addresses');\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/addresses',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done2();\n      }\n    });\n  });\n\n  (0, _qunit.test)('user can call passthrough multiple times', function (assert) {\n    assert.expect(2);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.passthrough('/contacts');\n      this.passthrough('/addresses', ['post']);\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/addresses',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done2();\n      }\n    });\n  });\n\n  (0, _qunit.test)('passthrough without args allows all paths on the current domain to passthrough', function (assert) {\n    assert.expect(2);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.get('/contacts', function () {\n        return 123;\n      });\n      this.passthrough();\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      success: function success(data) {\n        assert.equal(data, 123);\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/addresses',\n      error: function error(reason) {\n        assert.equal(reason.status, 404);\n        done2();\n      }\n    });\n  });\n\n  (0, _qunit.test)('passthrough without args allows index route on current domain to passthrough', function (assert) {\n    assert.expect(2);\n    var done1 = assert.async();\n    var done2 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.get('/contacts', function () {\n        return 123;\n      });\n      this.passthrough();\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts',\n      success: function success(data) {\n        assert.equal(data, 123, 'contacts is intercepted');\n        done1();\n      }\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/',\n      error: function error() {\n        done2(); // test will fail bc only 1 assertion, but we don't have to wait\n      },\n      success: function success(html) {\n        // a passthrough request to index on the current domain\n        // actually succeeds here, since that's where the test runner is served\n        assert.ok(html, '/ is passed through');\n        done2(); // test will fail bc only 1 assertion, but we don't have to wait\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can passthrough other-origin hosts', function (assert) {\n    assert.expect(1);\n    var done1 = assert.async();\n    var server = this.server;\n\n    server.loadConfig(function () {\n      this.passthrough('http://api.foo.bar/**');\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: 'http://api.foo.bar/contacts',\n      error: function error() {\n        assert.ok(true);\n        done1();\n      }\n    });\n  });\n});","define('dummy/tests/integration/passthrough-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/passthrough-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/passthrough-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/delete-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage/server', 'ember-cli-mirage/orm/model', 'ember-cli-mirage', 'ember-cli-mirage/route-handlers/shorthands/delete', 'ember-cli-mirage/serializers/json-api-serializer'], function (exports, _qunit, _emberCliMirageServer, _emberCliMirageOrmModel, _emberCliMirage, _emberCliMirageRouteHandlersShorthandsDelete, _emberCliMirageSerializersJsonApiSerializer) {\n\n  (0, _qunit.module)('Integration | Route Handlers | DELETE shorthand', {\n\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          wordSmith: _emberCliMirageOrmModel['default'].extend({\n            blogPosts: _emberCliMirage['default'].hasMany()\n          }),\n          blogPost: _emberCliMirageOrmModel['default']\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n\n      var wordSmiths = [{ id: 1, name: 'Ganon', blogPostIds: [1] }];\n      var blogPosts = [{ id: 1, title: 'Lorem', wordSmithId: '1' }, { id: 2, title: 'Another', wordSmithId: '2' }];\n      this.server.db.loadData({ wordSmiths: wordSmiths, blogPosts: blogPosts });\n\n      this.schema = this.server.schema;\n      this.serializer = new _emberCliMirageSerializersJsonApiSerializer['default']();\n    },\n\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n\n  });\n\n  (0, _qunit.test)('undefined shorthand deletes the record and returns null', function (assert) {\n    var request = { url: '/word-smiths/1', params: { id: '1' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsDelete['default'](this.schema, this.serializer, undefined, '/word-smiths/:id');\n\n    var response = handler.handle(request);\n\n    assert.equal(this.schema.db.wordSmiths.length, 0);\n    assert.equal(response, null);\n  });\n\n  (0, _qunit.test)('query params are ignored', function (assert) {\n    var request = { url: '/word-smiths/1?foo=bar', params: { id: '1' }, queryParams: { foo: 'bar' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsDelete['default'](this.schema, this.serializer, undefined, '/word-smiths/:id');\n\n    var response = handler.handle(request);\n\n    assert.equal(this.schema.db.wordSmiths.length, 0);\n    assert.equal(response, null);\n  });\n\n  (0, _qunit.test)('string shorthand deletes the record of the specified type', function (assert) {\n    var request = { url: '/word-smiths/1?foo=bar', params: { id: '1' }, queryParams: { foo: 'bar' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsDelete['default'](this.schema, this.serializer, undefined, '/word-smiths/:id');\n\n    var response = handler.handle(request);\n\n    assert.equal(this.schema.db.wordSmiths.length, 0);\n    assert.equal(response, null);\n  });\n\n  (0, _qunit.test)('array shorthand deletes the record and all related records', function (assert) {\n    var request = { url: '/word-smiths/1', params: { id: '1' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsDelete['default'](this.schema, this.serializer, ['word-smith', 'blog-posts']);\n\n    var response = handler.handle(request);\n\n    assert.equal(this.schema.db.wordSmiths.length, 0);\n    assert.equal(this.schema.db.blogPosts.length, 1);\n    assert.equal(response, null);\n  });\n\n  (0, _qunit.test)('if a shorthand tries to access an unknown type it throws an error', function (assert) {\n    var request = { url: '/foobars/1', params: { id: '1' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsDelete['default'](this.schema, this.serializer, undefined, '/foobars/:id');\n\n    assert.throws(function () {\n      handler.handle(request);\n    }, /model doesn't exist/);\n    assert.ok(true);\n  });\n});","define('dummy/tests/integration/route-handlers/delete-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/delete-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/delete-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/function-handler-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember', 'ember-cli-mirage/server', 'ember-cli-mirage/response', 'ember-cli-mirage/route-handlers/function', 'lodash/uniqBy'], function (exports, _qunit, _emberCliMirage, _ember, _emberCliMirageServer, _emberCliMirageResponse, _emberCliMirageRouteHandlersFunction, _lodashUniqBy) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  (0, _qunit.module)('Integration | Route handlers | Function handler', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          user: _emberCliMirage.Model.extend({})\n        },\n        serializers: {\n          sparseUser: _emberCliMirage.Serializer.extend({\n            attrs: ['id', 'name', 'tall']\n          })\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n\n      this.functionHandler = new _emberCliMirageRouteHandlersFunction['default'](this.server.schema, this.server.serializerOrRegistry);\n      this.schema = this.server.schema;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('mirage response string is not serialized to string', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/users', function () {\n      return new _emberCliMirageResponse['default'](200, { 'Content-Type': 'text/csv' }, 'firstname,lastname\\nbob,dylon');\n    });\n\n    $.ajax({ method: 'GET', url: '/users' }).done(function (res) {\n      assert.equal(res, 'firstname,lastname\\nbob,dylon');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('function can return a promise with non-serializable content', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/users', function () {\n      return new Promise(function (resolve) {\n        resolve(new _emberCliMirageResponse['default'](200, { 'Content-Type': 'text/csv' }, 'firstname,lastname\\nbob,dylan'));\n      });\n    });\n\n    $.ajax({ method: 'GET', url: '/users' }).done(function (res) {\n      assert.equal(res, 'firstname,lastname\\nbob,dylan');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('function can return a promise with serializable content', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var user = this.schema.users.create({ name: 'Sam' });\n\n    this.server.get('/users', function (schema) {\n      return new Promise(function (resolve) {\n        resolve(schema.users.all());\n      });\n    });\n\n    $.ajax({ method: 'GET', url: '/users' }).done(function (res) {\n      assert.deepEqual(res, { users: [{ id: user.id, name: 'Sam' }] });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('function can return a promise with an empty string', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/users', function () {\n      return new Promise(function (resolve) {\n        resolve(new _emberCliMirageResponse['default'](200, { 'Content-Type': 'text/csv' }, ''));\n      });\n    });\n\n    $.ajax({ method: 'GET', url: '/users' }).done(function (res) {\n      assert.equal(res, '');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('#serialize uses the default serializer on a model', function (assert) {\n    this.schema.users.create({ name: 'Sam' });\n\n    var user = this.schema.users.first();\n    var json = this.functionHandler.serialize(user);\n\n    assert.deepEqual(json, {\n      user: {\n        id: '1',\n        name: 'Sam'\n      }\n    });\n  });\n\n  (0, _qunit.test)('#serialize uses the default serializer on a collection', function (assert) {\n    this.schema.users.create({ name: 'Sam' });\n\n    var users = this.schema.users.all();\n    var json = this.functionHandler.serialize(users);\n\n    assert.deepEqual(json, {\n      users: [{ id: '1', name: 'Sam' }]\n    });\n  });\n\n  (0, _qunit.test)('#serialize takes an optional serializer type', function (assert) {\n    this.schema.users.create({ name: 'Sam', tall: true, evil: false });\n    this.schema.users.create({ name: 'Ganondorf', tall: true, evil: true });\n\n    var users = this.schema.users.all();\n    var json = this.functionHandler.serialize(users, 'sparse-user');\n\n    assert.deepEqual(json, {\n      users: [{ id: '1', name: 'Sam', tall: true }, { id: '2', name: 'Ganondorf', tall: true }]\n    });\n  });\n\n  (0, _qunit.test)('#serialize throws an error when trying to specify a serializer that doesnt exist', function (assert) {\n    this.schema.users.create({ name: 'Sam' });\n\n    var users = this.schema.users.all();\n\n    assert.throws(function () {\n      this.functionHandler.serialize(users, 'foo-user');\n    }, /that serializer doesn't exist/);\n  });\n\n  (0, _qunit.test)('#serialize noops on plain JS arrays', function (assert) {\n    this.server.schema.users.create({ name: 'Sam' });\n    this.server.schema.users.create({ name: 'Sam' });\n    this.server.schema.users.create({ name: 'Ganondorf' });\n\n    var users = this.schema.users.all().models;\n    var uniqueNames = (0, _lodashUniqBy['default'])(users, 'name');\n    var serializedResponse = this.functionHandler.serialize(uniqueNames);\n\n    assert.deepEqual(serializedResponse, uniqueNames);\n  });\n\n  (0, _qunit.test)('#serialize on a Collection takes an optional serializer type', function (assert) {\n    this.server.schema.users.create({ name: 'Sam', tall: true, evil: false });\n    this.server.schema.users.create({ name: 'Sam', tall: true, evil: false });\n    this.server.schema.users.create({ name: 'Ganondorf', tall: true, evil: true });\n\n    var users = this.schema.users.all().models;\n    var uniqueNames = (0, _lodashUniqBy['default'])(users, 'name');\n    var collection = new _emberCliMirage.Collection('user', uniqueNames);\n    var json = this.functionHandler.serialize(collection, 'sparse-user');\n\n    assert.deepEqual(json, {\n      users: [{ id: '1', name: 'Sam', tall: true }, { id: '3', name: 'Ganondorf', tall: true }]\n    });\n  });\n});","define('dummy/tests/integration/route-handlers/function-handler-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/function-handler-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/function-handler-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/get-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/server', 'ember-cli-mirage/route-handlers/shorthands/get'], function (exports, _qunit, _emberCliMirage, _emberCliMirageOrmCollection, _emberCliMirageServer, _emberCliMirageRouteHandlersShorthandsGet) {\n\n  (0, _qunit.module)('Integration | Route Handlers | GET shorthand', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          author: _emberCliMirage.Model.extend({\n            posts: (0, _emberCliMirage.hasMany)()\n          }),\n          post: _emberCliMirage.Model.extend({\n            author: (0, _emberCliMirage.belongsTo)(),\n            comments: (0, _emberCliMirage.hasMany)()\n          }),\n          comment: _emberCliMirage.Model.extend({\n            post: (0, _emberCliMirage.belongsTo)()\n          }),\n          photo: _emberCliMirage.Model,\n          'project-owner': _emberCliMirage.Model\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n\n      this.authors = [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }, { id: 3, name: 'Epona' }];\n      this.posts = [{ id: 1, title: 'Lorem', authorId: 1 }, { id: 2, title: 'Ipsum', authorId: 1 }];\n      this.photos = [{ id: 1, title: 'Amazing', location: 'Hyrule' }, { id: 2, title: 'Photo', location: 'Goron City' }];\n      this.projectOwners = [{ id: 1, name: 'Nintendo' }];\n      this.server.db.loadData({\n        authors: this.authors,\n        posts: this.posts,\n        photos: this.photos,\n        projectOwners: this.projectOwners\n      });\n\n      this.schema = this.server.schema;\n      this.serializer = new _emberCliMirage.JSONAPISerializer();\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('undefined shorthand returns the collection of models', function (assert) {\n    var request = { url: '/authors' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors');\n\n    var authors = handler.handle(request);\n\n    assert.equal(authors.models.length, 3);\n    assert.ok(authors.models[0] instanceof _emberCliMirage.Model);\n    assert.equal(authors.models[0].modelName, 'author');\n  });\n\n  (0, _qunit.test)('undefined shorthand ignores query params', function (assert) {\n    var request = { url: '/authors?foo=bar' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors');\n\n    var authors = handler.handle(request);\n\n    assert.equal(authors.models.length, 3);\n    assert.ok(authors.models[0] instanceof _emberCliMirage.Model);\n    assert.equal(authors.models[0].modelName, 'author');\n  });\n\n  (0, _qunit.test)('undefined shorthand can return a single model', function (assert) {\n    var request = { url: '/authors/2', params: { id: 2 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors/:id');\n\n    var author = handler.handle(request);\n\n    assert.ok(author instanceof _emberCliMirage.Model);\n    assert.equal(author.modelName, 'author');\n    assert.equal(author.name, 'Zelda');\n  });\n\n  (0, _qunit.test)('undefined shorthand returns a 404 if a singular resource does not exist', function (assert) {\n    var request = { url: '/authors/99', params: { id: 99 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors/:id');\n\n    var author = handler.handle(request);\n\n    assert.ok(author instanceof _emberCliMirage.Response);\n    assert.equal(author.code, 404);\n  });\n\n  (0, _qunit.test)('undefined shorthand ignores query params for a singular resource', function (assert) {\n    var request = { url: '/authors/2?foo=bar', params: { id: 2 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors/:id');\n\n    var author = handler.handle(request);\n\n    assert.ok(author instanceof _emberCliMirage.Model);\n    assert.equal(author.modelName, 'author');\n    assert.equal(author.name, 'Zelda');\n  });\n\n  (0, _qunit.test)('undefined shorthand with coalesce true returns the appropriate models', function (assert) {\n    var request = { url: '/authors?ids[]=1&ids[]=3', queryParams: { ids: [1, 3] } };\n    var options = { coalesce: true };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, '/authors', options);\n\n    var authors = handler.handle(request);\n\n    assert.equal(authors.models.length, 2);\n    assert.deepEqual(authors.models.map(function (author) {\n      return author.name;\n    }), ['Link', 'Epona']);\n  });\n\n  (0, _qunit.test)('string shorthand returns the correct collection of models', function (assert) {\n    var request = { url: '/people' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, 'author');\n\n    var authors = handler.handle(request);\n\n    assert.equal(authors.models.length, 3);\n    assert.ok(authors.models[0] instanceof _emberCliMirage.Model);\n    assert.equal(authors.models[0].modelName, 'author');\n  });\n\n  (0, _qunit.test)('string shorthand with an id returns the correct model', function (assert) {\n    var request = { url: '/people/2', params: { id: 2 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, 'author');\n\n    var author = handler.handle(request);\n\n    assert.ok(author instanceof _emberCliMirage.Model);\n    assert.equal(author.modelName, 'author');\n    assert.equal(author.name, 'Zelda');\n  });\n\n  (0, _qunit.test)('string shorthand with an id 404s if the model is not found', function (assert) {\n    var request = { url: '/people/99', params: { id: 99 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, 'author');\n\n    var author = handler.handle(request);\n\n    assert.ok(author instanceof _emberCliMirage.Response);\n    assert.equal(author.code, 404);\n  });\n\n  (0, _qunit.test)('string shorthand with coalesce returns the correct models', function (assert) {\n    var request = { url: '/people?ids[]=1&ids[]=3', queryParams: { ids: [1, 3] } };\n    var options = { coalesce: true };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, 'author', '/people', options);\n\n    var authors = handler.handle(request);\n\n    assert.equal(authors.models.length, 2);\n    assert.deepEqual(authors.models.map(function (author) {\n      return author.name;\n    }), ['Link', 'Epona']);\n  });\n\n  (0, _qunit.test)('array shorthand returns the correct models', function (assert) {\n    var url = '/home';\n    var request = { url: url };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, ['authors', 'photos'], url);\n\n    var models = handler.handle(request);\n\n    assert.ok(models[0] instanceof _emberCliMirageOrmCollection['default']);\n    assert.equal(models[0].modelName, 'author');\n    assert.equal(models[0].models.length, this.authors.length);\n\n    assert.ok(models[1] instanceof _emberCliMirageOrmCollection['default']);\n    assert.equal(models[1].modelName, 'photo');\n    assert.equal(models[1].models.length, this.photos.length);\n  });\n\n  (0, _qunit.test)('array shorthand for a singular resource errors', function (assert) {\n    var url = '/authors/1';\n    var request = { url: url, params: { id: 1 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, ['author', 'posts'], url);\n\n    assert.throws(function () {\n      handler.handle(request);\n    }, /create a serializer/);\n  });\n\n  (0, _qunit.test)('shorthand for list of models with a dash in their name', function (assert) {\n    var url = '/project-owners';\n    var request = { url: url };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, url);\n    var models = handler.handle(request);\n\n    assert.equal(models.models.length, 1);\n    assert.ok(models.models[0] instanceof _emberCliMirage.Model);\n    assert.equal(models.models[0].modelName, 'project-owner');\n  });\n\n  (0, _qunit.test)('if a shorthand tries to access an unknown type it throws an error', function (assert) {\n    var url = '/foobars';\n    var request = { url: url };\n    var handler = new _emberCliMirageRouteHandlersShorthandsGet['default'](this.schema, this.serializer, undefined, url);\n\n    assert.throws(function () {\n      handler.handle(request);\n    }, /model doesn't exist/);\n  });\n});","define('dummy/tests/integration/route-handlers/get-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/get-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/get-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/head-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server', 'ember-cli-mirage/route-handlers/shorthands/head'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer, _emberCliMirageRouteHandlersShorthandsHead) {\n\n  (0, _qunit.module)('Integration | Route Handlers | HEAD shorthand', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          author: _emberCliMirage.Model,\n          photo: _emberCliMirage.Model\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n\n      this.authors = [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }, { id: 3, name: 'Epona' }];\n      this.photos = [{ id: 1, title: 'Amazing', location: 'Hyrule' }, { id: 2, title: 'Photo', location: 'Goron City' }];\n      this.server.db.loadData({\n        authors: this.authors,\n        photos: this.photos\n      });\n\n      this.schema = this.server.schema;\n      this.serializer = new _emberCliMirage.JSONAPISerializer();\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('undefined shorthand with an ID that is not in the DB will return a 404 Response', function (assert) {\n    var request = { url: '/authors', params: { id: 101 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, undefined, '/authors');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 404);\n  });\n\n  (0, _qunit.test)('undefined shorthand with an ID that is in the DB will return a 204 Response', function (assert) {\n    var request = { url: '/authors', params: { id: 1 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, undefined, '/authors');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n\n  (0, _qunit.test)('undefined shorthand with coalesce true will return a 204 response if one of the IDs are found', function (assert) {\n    var request = { url: '/authors?ids[]=1&ids[]=3', queryParams: { ids: [1, 3] } };\n    var options = { coalesce: true };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, undefined, '/authors', options);\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n\n  (0, _qunit.test)('undefined shorthand string (no id) shorthand returns a 204 (regardless of the length of the collection)', function (assert) {\n    var request = { url: '/authors' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, undefined, '/authors');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n\n  (0, _qunit.test)('string shorthand with an ID that is not in the DB will return a 404 Response', function (assert) {\n    var request = { url: '/authors', params: { id: 101 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, 'author');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 404);\n  });\n\n  (0, _qunit.test)('string shorthand with an ID that is in the DB will return a 204 Response', function (assert) {\n    var request = { url: '/authors', params: { id: 1 } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, 'author');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n\n  (0, _qunit.test)('string shorthand with coalesce true will return a 204 response if one of the IDs are found', function (assert) {\n    var request = { url: '/authors?ids[]=1&ids[]=3', queryParams: { ids: [1, 3] } };\n    var options = { coalesce: true };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, 'author', '/people', options);\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n\n  (0, _qunit.test)('string shorthand string (no id) shorthand returns a 204 (regardless of the length of the collection)', function (assert) {\n    var request = { url: '/authors' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsHead['default'](this.schema, this.serializer, 'author');\n\n    var response = handler.handle(request);\n\n    assert.ok(response instanceof _emberCliMirage.Response);\n    assert.equal(response.code, 204);\n  });\n});","define('dummy/tests/integration/route-handlers/head-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/head-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/head-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/post-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage/server', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/route-handlers/shorthands/post', 'ember-cli-mirage/serializers/json-api-serializer'], function (exports, _qunit, _emberCliMirageServer, _emberCliMirageOrmModel, _emberCliMirageRouteHandlersShorthandsPost, _emberCliMirageSerializersJsonApiSerializer) {\n\n  (0, _qunit.module)('Integration | Route Handlers | POST shorthand', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          author: _emberCliMirageOrmModel['default'].extend({})\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n      this.schema = this.server.schema;\n\n      this.serializer = new _emberCliMirageSerializersJsonApiSerializer['default']();\n\n      this.body = {\n        data: {\n          type: 'authors',\n          attributes: {\n            'first-name': 'Ganon',\n            'last-name': 'Dorf'\n          }\n        }\n      };\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('string shorthand creates a record of the specified type and returns the new model', function (assert) {\n    var request = { requestBody: JSON.stringify(this.body), url: '/people' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsPost['default'](this.schema, this.serializer, 'author');\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganon');\n  });\n\n  (0, _qunit.test)('query params are ignored', function (assert) {\n    var request = { requestBody: JSON.stringify(this.body), url: '/authors?foo=bar', queryParams: { foo: 'bar' } };\n    var handler = new _emberCliMirageRouteHandlersShorthandsPost['default'](this.schema, this.serializer, 'author');\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganon');\n  });\n\n  (0, _qunit.test)('undefined shorthand creates a record and returns the new model', function (assert) {\n    var request = { requestBody: JSON.stringify(this.body), url: '/authors' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsPost['default'](this.schema, this.serializer, null, '/authors');\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganon');\n  });\n\n  (0, _qunit.test)('if a shorthand tries to access an unknown type it throws an error', function (assert) {\n    var request = { requestBody: JSON.stringify(this.body), url: '/foobars' };\n    var handler = new _emberCliMirageRouteHandlersShorthandsPost['default'](this.schema, this.serializer, 'foobar');\n\n    assert.throws(function () {\n      handler.handle(request);\n    }, /model doesn't exist/);\n    assert.ok(true);\n  });\n});","define('dummy/tests/integration/route-handlers/post-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/post-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/post-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/route-handlers/put-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage/route-handlers/shorthands/put', 'ember-cli-mirage/server', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/serializers/json-api-serializer'], function (exports, _qunit, _emberCliMirageRouteHandlersShorthandsPut, _emberCliMirageServer, _emberCliMirageOrmModel, _emberCliMirageSerializersJsonApiSerializer) {\n\n  (0, _qunit.module)('Integration | Route Handlers | PUT shorthand', {\n\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          author: _emberCliMirageOrmModel['default'].extend()\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n\n      this.authors = [{ id: 1, firstName: 'Ganon' }];\n      this.server.db.loadData({\n        authors: this.authors\n      });\n\n      this.schema = this.server.schema;\n      this.serializer = new _emberCliMirageSerializersJsonApiSerializer['default']();\n\n      this.body = {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: {\n            'first-name': 'Ganondorf'\n          }\n        }\n      };\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n\n  });\n\n  (0, _qunit.test)('undefined shorthand updates the record and returns the model', function (assert) {\n    var handler = new _emberCliMirageRouteHandlersShorthandsPut['default'](this.schema, this.serializer, undefined, '/authors/:id');\n    var request = { requestBody: JSON.stringify(this.body), url: '/authors/1', params: { id: '1' } };\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganondorf');\n  });\n\n  (0, _qunit.test)('query params are ignored', function (assert) {\n    var handler = new _emberCliMirageRouteHandlersShorthandsPut['default'](this.schema, this.serializer, 'author');\n    var request = { requestBody: JSON.stringify(this.body), url: '/authors/1?foo=bar', params: { id: '1' }, queryParams: { foo: 'bar' } };\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganondorf');\n  });\n\n  (0, _qunit.test)('string shorthand updates the record of the specified type and returns the model', function (assert) {\n    var handler = new _emberCliMirageRouteHandlersShorthandsPut['default'](this.schema, this.serializer, undefined, '/authors/:id');\n    var request = { requestBody: JSON.stringify(this.body), url: '/authors/1', params: { id: '1' } };\n\n    var model = handler.handle(request);\n\n    assert.equal(this.schema.db.authors.length, 1);\n    assert.ok(model instanceof _emberCliMirageOrmModel['default']);\n    assert.equal(model.modelName, 'author');\n    assert.equal(model.firstName, 'Ganondorf');\n  });\n\n  (0, _qunit.test)('if a shorthand tries to access an unknown type it throws an error', function (assert) {\n    var handler = new _emberCliMirageRouteHandlersShorthandsPut['default'](this.schema, this.serializer, undefined, '/foobars/:id');\n    var request = { requestBody: JSON.stringify(this.body), url: '/foobars/1', params: { id: '1' } };\n\n    assert.throws(function () {\n      handler.handle(request);\n    }, /model doesn't exist/);\n    assert.ok(true);\n  });\n});","define('dummy/tests/integration/route-handlers/put-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/route-handlers/put-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/route-handlers/put-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/active-model-serializer-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializer | ActiveModelSerializer', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']();\n      this.schema = new _emberCliMirageOrmSchema['default'](db);\n      this.schema.registerModels({\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          wordSmith: (0, _emberCliMirage.belongsTo)()\n        }),\n        user: _emberCliMirage.Model.extend({\n          contactInfos: (0, _emberCliMirage.hasMany)()\n        }),\n        contactInfo: _emberCliMirage.Model.extend({\n          user: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n\n      var link = this.schema.wordSmiths.create({ name: 'Link', age: 123 });\n      link.createBlogPost({ title: 'Lorem' });\n      link.createBlogPost({ title: 'Ipsum' });\n\n      this.schema.wordSmiths.create({ name: 'Zelda', age: 230 });\n\n      var user = this.schema.users.create({ name: 'John Peach', age: 123 });\n      user.createContactInfo({ email: 'peach@bb.me' });\n      user.createContactInfo({ email: 'john3000@mail.com' });\n\n      this.schema.users.create({ name: 'Pine Apple', age: 230 });\n\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        application: _emberCliMirage.ActiveModelSerializer,\n        wordSmith: _emberCliMirage.ActiveModelSerializer.extend({\n          attrs: ['id', 'name'],\n          include: ['blogPosts']\n        }),\n        blogPost: _emberCliMirage.ActiveModelSerializer.extend({\n          include: ['wordSmith']\n        }),\n        contactInfo: _emberCliMirage.ActiveModelSerializer.extend({\n          include: ['user']\n        }),\n        user: _emberCliMirage.ActiveModelSerializer.extend({\n          attrs: ['id', 'name'],\n          include: ['contactInfos'],\n          embed: true\n        })\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it sideloads associations and snake-cases relationships and attributes correctly for a model', function (assert) {\n    var link = this.schema.wordSmiths.find(1);\n    var result = this.registry.serialize(link);\n\n    assert.deepEqual(result, {\n      word_smith: {\n        id: '1',\n        name: 'Link',\n        blog_post_ids: ['1', '2']\n      },\n      blog_posts: [{\n        id: '1',\n        title: 'Lorem',\n        word_smith_id: '1'\n      }, {\n        id: '2',\n        title: 'Ipsum',\n        word_smith_id: '1'\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it sideloads associations and snake-cases relationships and attributes correctly for a collection', function (assert) {\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      word_smiths: [{\n        id: '1',\n        name: 'Link',\n        blog_post_ids: ['1', '2']\n      }, {\n        id: '2',\n        name: 'Zelda',\n        blog_post_ids: []\n      }],\n      blog_posts: [{\n        id: '1',\n        title: 'Lorem',\n        word_smith_id: '1'\n      }, {\n        id: '2',\n        title: 'Ipsum',\n        word_smith_id: '1'\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it embeds associations and snake-cases relationships and attributes correctly for a collection', function (assert) {\n    var users = this.schema.users.all();\n    var result = this.registry.serialize(users);\n\n    assert.deepEqual(result, {\n      users: [{\n        id: '1',\n        name: 'John Peach',\n        contact_infos: [{\n          id: '1',\n          email: 'peach@bb.me',\n          user_id: '1'\n        }, {\n          id: '2',\n          email: 'john3000@mail.com',\n          user_id: '1'\n        }]\n      }, {\n        id: '2',\n        name: 'Pine Apple',\n        contact_infos: []\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/active-model-serializer-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/active-model-serializer-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/active-model-serializer-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/embedded-collection-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializer, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Embedded Collections', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)('blogPost', { inverse: 'author' })\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('wordSmith', { inverse: 'posts' }),\n          comments: (0, _emberCliMirage.hasMany)('fineComment', { inverse: 'post' })\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          post: (0, _emberCliMirage.belongsTo)('blogPost')\n        })\n      });\n\n      var wordSmith = this.schema.wordSmiths.create({ name: 'Link' });\n      var blogPost = wordSmith.createPost({ title: 'Lorem' });\n      blogPost.createComment({ text: 'pwned' });\n\n      wordSmith.createPost({ title: 'Ipsum' });\n\n      this.schema.wordSmiths.create({ name: 'Zelda' });\n\n      this.BaseSerializer = _emberCliMirageSerializer['default'].extend({\n        embed: true\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can embed a collection with a has-many relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{\n        id: '1',\n        name: 'Link',\n        posts: [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }]\n      }, {\n        id: '2',\n        name: 'Zelda',\n        posts: []\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can embed a collection with a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['comments']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{\n        id: '1',\n        name: 'Link',\n        posts: [{\n          id: '1',\n          title: 'Lorem',\n          comments: [{ id: '1', text: 'pwned' }]\n        }, {\n          id: '2',\n          title: 'Ipsum',\n          comments: []\n        }]\n      }, {\n        id: '2',\n        name: 'Zelda',\n        posts: []\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can embed a collection with a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var blogPosts = this.schema.blogPosts.all();\n    var result = registry.serialize(blogPosts);\n\n    assert.deepEqual(result, {\n      blogPosts: [{\n        id: '1',\n        title: 'Lorem',\n        author: { id: '1', name: 'Link' }\n      }, {\n        id: '2',\n        title: 'Ipsum',\n        author: { id: '1', name: 'Link' }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can embed a collection with a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      fineComment: this.BaseSerializer.extend({\n        include: ['post']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var fineComments = this.schema.fineComments.all();\n    var result = registry.serialize(fineComments);\n\n    assert.deepEqual(result, {\n      fineComments: [{\n        id: '1',\n        text: 'pwned',\n        post: {\n          id: '1',\n          title: 'Lorem',\n          author: { id: '1', name: 'Link' }\n        }\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/embedded-collection-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/embedded-collection-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/embedded-collection-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/embedded-model-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializer, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Embedded Models', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)('blogPost', { inverse: 'author' })\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('wordSmith', { inverse: 'posts' }),\n          comments: (0, _emberCliMirage.hasMany)('fineComment', { inverse: 'post' })\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          post: (0, _emberCliMirage.belongsTo)('blogPost')\n        })\n      });\n\n      var wordSmith = this.schema.wordSmiths.create({ name: 'Link' });\n      var post = wordSmith.createPost({ title: 'Lorem' });\n      post.createComment({ text: 'pwned' });\n\n      wordSmith.createPost({ title: 'Ipsum' });\n\n      this.schema.wordSmiths.create({ name: 'Zelda' });\n\n      this.BaseSerializer = _emberCliMirageSerializer['default'].extend({\n        embed: true\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can embed has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      })\n    });\n\n    var link = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        posts: [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }]\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can embed a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['comments']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        posts: [{ id: '1', title: 'Lorem', comments: [{ id: '1', text: 'pwned' }] }, { id: '2', title: 'Ipsum', comments: [] }]\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can embed a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      blogPost: this.BaseSerializer.extend({\n        embed: true,\n        include: ['author']\n      })\n    });\n\n    var blogPost = this.schema.blogPosts.find(1);\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      blogPost: {\n        id: '1',\n        title: 'Lorem',\n        author: { id: '1', name: 'Link' }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      fineComment: this.BaseSerializer.extend({\n        include: ['post']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var fineComment = this.schema.fineComments.find(1);\n    var result = registry.serialize(fineComment);\n\n    assert.deepEqual(result, {\n      fineComment: {\n        id: '1',\n        text: 'pwned',\n        post: {\n          id: '1',\n          title: 'Lorem',\n          author: {\n            id: '1', name: 'Link'\n          }\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it ignores relationships that refer to serialized ancestor resources', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        posts: [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }]\n      }\n    });\n  });\n\n  (0, _qunit.test)('it ignores relationships that refer to serialized ancestor resources, multiple levels down', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        embed: true,\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author', 'comments']\n      }),\n      fineComment: this.BaseSerializer.extend({\n        include: ['post']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        posts: [{ id: '1', title: 'Lorem', comments: [{ id: '1', text: 'pwned' }] }, { id: '2', title: 'Ipsum', comments: [] }]\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/embedded-model-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/embedded-model-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/embedded-model-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/many-to-many-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/serializer-registry'], function (exports, _qunit, _emberCliMirage, _emberCliMirageDb, _emberCliMirageOrmSchema, _emberCliMirageSerializerRegistry) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Many To Many', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']();\n\n      var schema = new _emberCliMirageOrmSchema['default'](db, {\n        contact: _emberCliMirage.Model.extend({\n          addresses: (0, _emberCliMirage.hasMany)(),\n          contactAddresses: (0, _emberCliMirage.hasMany)()\n        }),\n        address: _emberCliMirage.Model.extend({\n          contacts: (0, _emberCliMirage.hasMany)(),\n          contactAddresses: (0, _emberCliMirage.hasMany)()\n        }),\n        contactAddress: _emberCliMirage.Model.extend({\n          contact: (0, _emberCliMirage.belongsTo)(),\n          address: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n\n      var registry = new _emberCliMirageSerializerRegistry['default'](schema, {\n        contact: _emberCliMirage.Serializer.extend({\n          include: ['addresses'],\n          addresses: function addresses(model) {\n            var models = model.contactAddresses.models.map(function (ca) {\n              return ca.address;\n            });\n            return new _emberCliMirage.Collection('address', models);\n          }\n        }),\n        address: _emberCliMirage.Serializer.extend({\n          include: ['contacts'],\n          contacts: function contacts(model) {\n            var models = model.contactAddresses.models.map(function (ca) {\n              return ca.contact;\n            });\n            return new _emberCliMirage.Collection('contact', models);\n          }\n        })\n      });\n\n      var mario = schema.contacts.create({ name: 'Mario' });\n      var newYork = schema.addresses.create({ street: 'Some New York Street' });\n      var mushroomKingdom = schema.addresses.create({ street: 'Some Mushroom Kingdom Street' });\n\n      schema.contactAddresses.create({ contact: mario, address: newYork });\n      schema.contactAddresses.create({ contact: mario, address: mushroomKingdom });\n\n      this.schema = schema;\n      this.registry = registry;\n    }\n  });\n\n  (0, _qunit.skip)('it serializes manyToMany if properly configured to passthrough', function (assert) {\n    var contact = this.schema.contacts.find(1);\n    var result = this.registry.serialize(contact);\n\n    assert.deepEqual(result, {\n      addresses: [{\n        contactId: null, // side-effect of having a HasMany on the contactAddress side of things\n        contactIds: ['1'],\n        id: '1',\n        street: 'Some New York Street'\n      }, {\n        contactId: null,\n        contactIds: ['1'],\n        id: '2',\n        street: 'Some Mushroom Kingdom Street'\n      }],\n      contact: {\n        addressId: null, // side-effect of having a HasMany on the contactAddress side of things\n        addressIds: ['1', '2'],\n        id: '1',\n        name: 'Mario'\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/many-to-many-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/many-to-many-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/many-to-many-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-assorted-collections-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Sideloading Assorted Collections', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirage.Model,\n        greatPhoto: _emberCliMirage.Model\n      });\n\n      var BaseSerializer = _emberCliMirageSerializer['default'].extend({\n        embed: false\n      });\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        application: BaseSerializer,\n        wordSmith: BaseSerializer.extend({\n          include: ['blogPosts']\n        }),\n        greatPhoto: BaseSerializer.extend({\n          attrs: ['id', 'title']\n        })\n      });\n      this.wordSmiths = [{ id: '1', name: 'Link', blogPostIds: ['1', '2'] }, { id: '2', name: 'Zelda', blogPostIds: [] }, { id: '3', name: 'Epona', blogPostIds: [] }];\n      this.blogPosts = [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }];\n      this.greatPhotos = [{ id: '1', title: 'Amazing', location: 'Hyrule' }, { id: '2', title: 'greatPhoto', location: 'Goron City' }];\n      this.schema.db.loadData({\n        wordSmiths: this.wordSmiths,\n        blogPosts: this.blogPosts,\n        greatPhotos: this.greatPhotos\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  /*\n    This is a strange response from a route handler, but it's used in the array get shorthand. Deprecate that shorthand?\n  */\n  (0, _qunit.test)('it can sideload an array of assorted collections that have relationships', function (assert) {\n    var result = this.registry.serialize([this.schema.wordSmiths.all(), this.schema.greatPhotos.all()]);\n\n    assert.deepEqual(result, {\n      wordSmiths: this.wordSmiths,\n      blogPosts: this.blogPosts,\n      greatPhotos: this.greatPhotos.map(function (attrs) {\n        delete attrs.location;\n        return attrs;\n      })\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-assorted-collections-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/sideloading-assorted-collections-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/sideloading-assorted-collections-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-collection-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirage, _emberCliMirageDb, _emberCliMirageSerializer, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Sideloading Collections', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)('blog-post')\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('word-smith'),\n          comments: (0, _emberCliMirage.hasMany)('fine-comment')\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          post: (0, _emberCliMirage.belongsTo)('blog-post')\n        })\n      });\n\n      var link = this.schema.wordSmiths.create({ name: 'Link' });\n      var blogPost = link.createPost({ title: 'Lorem' });\n      link.createPost({ title: 'Ipsum' });\n\n      blogPost.createComment({ text: 'pwned' });\n\n      var zelda = this.schema.wordSmiths.create({ name: 'Zelda' });\n      zelda.createPost({ title: 'Zeldas blogPost' });\n\n      this.BaseSerializer = _emberCliMirageSerializer['default'].extend({\n        embed: false\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it throws an error if embed is false and root is false', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: this.BaseSerializer.extend({\n        root: false,\n        include: ['posts']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n\n    assert.throws(function () {\n      registry.serialize(wordSmiths);\n    }, /disables the root/);\n  });\n\n  (0, _qunit.test)('it can sideload an empty collection', function (assert) {\n    this.schema.db.emptyData();\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      })\n    });\n\n    var result = registry.serialize(this.schema.wordSmiths.all());\n\n    assert.deepEqual(result, {\n      wordSmiths: []\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a collection with a has-many relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        embed: false,\n        include: ['posts']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', name: 'Link', postIds: ['1', '2'] }, { id: '2', name: 'Zelda', postIds: ['3'] }],\n      blogPosts: [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }, { id: '3', title: 'Zeldas blogPost' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a collection with a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        embed: false,\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['comments']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', name: 'Link', postIds: ['1', '2'] }, { id: '2', name: 'Zelda', postIds: ['3'] }],\n      blogPosts: [{ id: '1', title: 'Lorem', commentIds: ['1'] }, { id: '2', title: 'Ipsum', commentIds: [] }, { id: '3', title: 'Zeldas blogPost', commentIds: [] }],\n      fineComments: [{ id: '1', text: 'pwned' }]\n    });\n  });\n\n  (0, _qunit.test)('it avoids circularity when serializing a collection', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        embed: false,\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', name: 'Link', postIds: ['1', '2'] }, { id: '2', name: 'Zelda', postIds: ['3'] }],\n      blogPosts: [{ id: '1', title: 'Lorem', authorId: '1' }, { id: '2', title: 'Ipsum', authorId: '1' }, { id: '3', title: 'Zeldas blogPost', authorId: '2' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a collection with a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      blogPost: this.BaseSerializer.extend({\n        embed: false,\n        include: ['author']\n      })\n    });\n\n    var blogPosts = this.schema.blogPosts.all();\n    var result = registry.serialize(blogPosts);\n\n    assert.deepEqual(result, {\n      blogPosts: [{ id: '1', title: 'Lorem', authorId: '1' }, { id: '2', title: 'Ipsum', authorId: '1' }, { id: '3', title: 'Zeldas blogPost', authorId: '2' }],\n      wordSmiths: [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a collection with a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      fineComment: this.BaseSerializer.extend({\n        embed: false,\n        include: ['post']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var fineComments = this.schema.fineComments.all();\n    var result = registry.serialize(fineComments);\n\n    assert.deepEqual(result, {\n      fineComments: [{ id: '1', text: 'pwned', postId: '1' }],\n      blogPosts: [{ id: '1', title: 'Lorem', authorId: '1' }],\n      wordSmiths: [{ id: '1', name: 'Link' }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-collection-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/sideloading-collection-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/sideloading-collection-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-model-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirage, _emberCliMirageDb, _emberCliMirageSerializer, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Associations | Sideloading Models', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)('blog-post')\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('word-smith'),\n          comments: (0, _emberCliMirage.hasMany)('fine-comment')\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          post: (0, _emberCliMirage.belongsTo)('blog-post')\n        })\n      });\n\n      var wordSmith = this.schema.wordSmiths.create({ name: 'Link' });\n      var blogPost = wordSmith.createPost({ title: 'Lorem' });\n      blogPost.createComment({ text: 'pwned' });\n\n      wordSmith.createPost({ title: 'Ipsum' });\n\n      this.schema.wordSmiths.create({ name: 'Zelda' });\n\n      this.BaseSerializer = _emberCliMirageSerializer['default'].extend({\n        embed: false\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it throws an error if embed is false and root is false', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: this.BaseSerializer.extend({\n        root: false,\n        include: ['posts']\n      })\n    });\n\n    var link = this.schema.wordSmiths.find(1);\n    assert.throws(function () {\n      registry.serialize(link);\n    }, /disables the root/);\n  });\n\n  (0, _qunit.test)('it can sideload a model with a has-many relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      })\n    });\n\n    var link = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        postIds: ['1', '2']\n      },\n      blogPosts: [{ id: '1', title: 'Lorem' }, { id: '2', title: 'Ipsum' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a model with a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['comments']\n      })\n    });\n\n    var link = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        postIds: ['1', '2']\n      },\n      blogPosts: [{ id: '1', title: 'Lorem', commentIds: ['1'] }, { id: '2', title: 'Ipsum', commentIds: [] }],\n      fineComments: [{ id: '1', text: 'pwned' }]\n    });\n  });\n\n  (0, _qunit.test)('it avoids circularity when serializing a model', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      wordSmith: this.BaseSerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var link = this.schema.wordSmiths.find(1);\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        postIds: ['1', '2']\n      },\n      blogPosts: [{ id: '1', title: 'Lorem', authorId: '1' }, { id: '2', title: 'Ipsum', authorId: '1' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a model with a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var blogPost = this.schema.blogPosts.find(1);\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      blogPost: {\n        id: '1', title: 'Lorem', authorId: '1'\n      },\n      wordSmiths: [{ id: '1', name: 'Link' }]\n    });\n  });\n\n  (0, _qunit.test)('it can sideload a model with a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: this.BaseSerializer,\n      fineComment: this.BaseSerializer.extend({\n        include: ['post']\n      }),\n      blogPost: this.BaseSerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var fineComment = this.schema.fineComments.find(1);\n    var result = registry.serialize(fineComment);\n\n    assert.deepEqual(result, {\n      fineComment: {\n        id: '1', text: 'pwned', postId: '1'\n      },\n      blogPosts: [{ id: '1', title: 'Lorem', authorId: '1' }],\n      wordSmiths: [{ id: '1', name: 'Link' }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/associations/sideloading-model-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/associations/sideloading-model-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/associations/sideloading-model-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/assorted-collections-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Assorted Collections', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        greatPhoto: _emberCliMirageSerializer['default'].extend({\n          attrs: ['id', 'title']\n        })\n      });\n      this.wordSmiths = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }, { id: '3', name: 'Epona' }];\n      this.greatPhotos = [{ id: '1', title: 'Amazing', location: 'Hyrule' }, { id: '2', title: 'greatPhoto', location: 'Goron City' }];\n      this.schema.db.loadData({\n        wordSmiths: this.wordSmiths,\n        greatPhotos: this.greatPhotos\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('an array of assorted collections can be serialized', function (assert) {\n    var result = this.registry.serialize([this.schema.wordSmiths.all(), this.schema.greatPhotos.all()]);\n\n    assert.deepEqual(result, {\n      wordSmiths: this.wordSmiths,\n      greatPhotos: this.greatPhotos.map(function (attrs) {\n        delete attrs.location;\n        return attrs;\n      })\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/assorted-collections-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/assorted-collections-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/assorted-collections-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/attribute-key-formatting-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'ember-cli-mirage/utils/inflector', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _emberCliMirageUtilsInflector, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Attribute Key Formatting', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        wordSmith: _emberCliMirageSerializer['default'].extend({\n          keyForAttribute: function keyForAttribute(key) {\n            return (0, _emberCliMirageUtilsInflector.camelize)(key);\n          }\n        })\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('keyForAttribute formats the attributes of a model', function (assert) {\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      'first-name': 'Link',\n      'last-name': 'Jackson',\n      age: 323\n    });\n\n    var result = this.registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        firstName: 'Link',\n        lastName: 'Jackson',\n        age: 323\n      }\n    });\n  });\n\n  (0, _qunit.test)('keyForAttribute also formats the models in a collections', function (assert) {\n    this.schema.wordSmiths.create({ id: 1, 'first-name': 'Link', 'last-name': 'Jackson' });\n    this.schema.wordSmiths.create({ id: 2, 'first-name': 'Zelda', 'last-name': 'Brown' });\n    var wordSmiths = this.schema.wordSmiths.all();\n\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', firstName: 'Link', lastName: 'Jackson' }, { id: '2', firstName: 'Zelda', lastName: 'Brown' }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/attribute-key-formatting-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/attribute-key-formatting-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/attribute-key-formatting-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/attrs-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Attrs List', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        wordSmith: _emberCliMirageSerializer['default'].extend({\n          attrs: ['id', 'name']\n        })\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it returns only the whitelisted attrs when serializing a model', function (assert) {\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      name: 'Link',\n      age: 123\n    });\n\n    var result = this.registry.serialize(wordSmith);\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link'\n      }\n    });\n  });\n\n  (0, _qunit.test)('it returns only the whitelisted attrs when serializing a collection', function (assert) {\n    var schema = this.schema;\n\n    schema.wordSmiths.create({ id: 1, name: 'Link', age: 123 });\n    schema.wordSmiths.create({ id: 2, name: 'Zelda', age: 456 });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/attrs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/attrs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/attrs-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/basic-test', ['exports', 'ember-cli-mirage/serializer-registry', 'dummy/tests/integration/serializers/schema-helper', 'qunit', 'lodash/uniqBy'], function (exports, _emberCliMirageSerializerRegistry, _dummyTestsIntegrationSerializersSchemaHelper, _qunit, _lodashUniqBy) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Basic', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema);\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it returns objects unaffected', function (assert) {\n    var result = this.registry.serialize({ oh: 'hai' });\n\n    assert.deepEqual(result, { oh: 'hai' });\n  });\n\n  (0, _qunit.test)('it returns arrays unaffected', function (assert) {\n    var data = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    var result = this.registry.serialize(data);\n\n    assert.deepEqual(result, data);\n  });\n\n  (0, _qunit.test)('it returns empty arrays unaffected', function (assert) {\n    var result = this.registry.serialize([]);\n\n    assert.deepEqual(result, []);\n  });\n\n  (0, _qunit.test)('it serializes a model by returning its attrs under a root', function (assert) {\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      name: 'Link'\n    });\n    var result = this.registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link'\n      }\n    });\n  });\n\n  (0, _qunit.test)('it serializes a collection of models by returning an array of their attrs under a pluralized root', function (assert) {\n    this.schema.wordSmiths.create({ id: 1, name: 'Link' });\n    this.schema.wordSmiths.create({ id: 2, name: 'Zelda' });\n\n    var wordSmiths = this.schema.wordSmiths.all();\n\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize an empty collection', function (assert) {\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      wordSmiths: []\n    });\n  });\n\n  (0, _qunit.test)('it returns POJAs of models unaffected', function (assert) {\n    this.schema.wordSmiths.create({ name: 'Sam' });\n    this.schema.wordSmiths.create({ name: 'Sam' });\n    this.schema.wordSmiths.create({ name: 'Ganondorf' });\n\n    var wordSmiths = this.schema.wordSmiths.all().models;\n    var uniqueNames = (0, _lodashUniqBy['default'])(wordSmiths, 'name');\n    var result = this.registry.serialize(uniqueNames);\n\n    assert.deepEqual(result, uniqueNames);\n  });\n});","define('dummy/tests/integration/serializers/base/basic-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/basic-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/basic-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/full-request-test', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/server', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/serializer', 'qunit'], function (exports, _emberCliMirage, _emberCliMirageServer, _emberCliMirageOrmModel, _emberCliMirageSerializer, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Full Request', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          author: _emberCliMirageOrmModel['default'].extend({\n            posts: _emberCliMirage['default'].hasMany()\n          }),\n          post: _emberCliMirageOrmModel['default'].extend({\n            author: _emberCliMirage['default'].belongsTo(),\n            comments: _emberCliMirage['default'].hasMany()\n          }),\n          comment: _emberCliMirageOrmModel['default'].extend({\n            post: _emberCliMirage['default'].belongsTo()\n          })\n        },\n        serializers: {\n          application: _emberCliMirageSerializer['default'].extend({\n            embed: true,\n            root: false\n          }),\n          author: _emberCliMirageSerializer['default'].extend({\n            embed: true,\n            attrs: ['id', 'first'],\n            include: ['posts']\n          }),\n          comment: _emberCliMirageSerializer['default'].extend({\n            embed: true,\n            root: false,\n            include: function include(request) {\n              return request.queryParams.include_post ? ['post'] : [];\n            }\n          })\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('the appropriate serializer is used', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var author = this.server.schema.authors.create({\n      first: 'Link',\n      last: 'of Hyrule',\n      age: 323\n    });\n    author.createPost({ title: 'Lorem ipsum' });\n\n    this.server.get('/authors/:id', function (schema, request) {\n      var id = request.params.id;\n\n      return schema.authors.find(id);\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/authors/1'\n    }).done(function (res) {\n      assert.deepEqual(res, {\n        author: {\n          id: '1',\n          first: 'Link',\n          posts: [{ id: '1', title: 'Lorem ipsum' }]\n        }\n      });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('components decoded', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    this.server.get('/authors/:id', function (schema, request) {\n      var id = request.params.id;\n\n      return { data: { id: id } };\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/authors/%3A1'\n    }).done(function (res) {\n      assert.deepEqual(res, {\n        data: { id: ':1' }\n      });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('a response falls back to the application serializer, if it exists', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    this.server.schema.posts.create({\n      title: 'Lorem',\n      date: '20001010'\n    });\n\n    this.server.get('/posts/:id', function (schema, request) {\n      var id = request.params.id;\n\n      return schema.posts.find(id);\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/posts/1'\n    }).done(function (res) {\n      assert.deepEqual(res, {\n        id: '1',\n        title: 'Lorem',\n        date: '20001010'\n      });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('serializer.include is invoked when it is a function', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var post = this.server.schema.posts.create({\n      title: 'Lorem',\n      date: '20001010'\n    });\n    post.createComment({\n      description: 'Lorem is the best'\n    });\n\n    this.server.get('/comments/:id', function (schema, request) {\n      var id = request.params.id;\n\n      return schema.comments.find(id);\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/comments/1?include_post=true'\n    }).done(function (res) {\n      assert.deepEqual(res, {\n        id: '1',\n        description: 'Lorem is the best',\n        post: {\n          id: '1',\n          title: 'Lorem',\n          date: '20001010'\n        }\n      });\n      done();\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/full-request-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/full-request-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/full-request-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/override-serialize-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Overriding Serialize', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can use a completely custom serialize function', function (assert) {\n    this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: _emberCliMirageSerializer['default'].extend({\n        serialize: function serialize() {\n          return 'blah';\n        }\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      title: 'Link'\n    });\n\n    var result = this.registry.serialize(wordSmith);\n\n    assert.deepEqual(result, 'blah');\n  });\n\n  (0, _qunit.test)('it can access the request in a custom serialize function', function (assert) {\n    this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: _emberCliMirageSerializer['default'].extend({\n        serialize: function serialize(response, request) {\n          return request.queryParams.foo || 'blah';\n        }\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      title: 'Link'\n    });\n\n    var request = { url: '/word-smiths/1?foo=bar', params: { id: '1' }, queryParams: { foo: 'bar' } };\n    var result = this.registry.serialize(wordSmith, request);\n\n    assert.deepEqual(result, 'bar');\n  });\n});","define('dummy/tests/integration/serializers/base/override-serialize-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/override-serialize-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/override-serialize-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/root-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Root', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        wordSmith: _emberCliMirageSerializer['default'].extend({\n          embed: true,\n          root: false\n        })\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('if root is false, it serializes a model by returning its attrs', function (assert) {\n    var wordSmith = this.schema.wordSmiths.create({\n      id: '1',\n      name: 'Link'\n    });\n\n    var result = this.registry.serialize(wordSmith);\n    assert.deepEqual(result, {\n      id: '1',\n      name: 'Link'\n    });\n  });\n\n  (0, _qunit.test)('if root is false, it serializes a collection of models by returning an array of their attrs', function (assert) {\n    this.schema.wordSmiths.create({ id: 1, name: 'Link' });\n    this.schema.wordSmiths.create({ id: 2, name: 'Zelda' });\n    var wordSmiths = this.schema.wordSmiths.all();\n\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }]);\n  });\n\n  (0, _qunit.test)('if root is false, it serializes an empty collection by returning an empty array', function (assert) {\n    var emptywordSmithCollection = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(emptywordSmithCollection);\n\n    assert.deepEqual(result, []);\n  });\n});","define('dummy/tests/integration/serializers/base/root-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/root-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/root-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/serialize-array-of-models-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/serializer', 'dummy/tests/integration/serializers/schema-helper', 'qunit'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirageSerializer, _dummyTestsIntegrationSerializersSchemaHelper, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Array of Models', {\n    beforeEach: function beforeEach() {\n      this.schema = _dummyTestsIntegrationSerializersSchemaHelper['default'].setup();\n      this.schema.wordSmiths.create({ id: 1, title: 'Link' });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it applies correct serializer when the response is an array of models', function (assert) {\n    assert.expect(1);\n\n    var wordSmiths = this.schema.wordSmiths.all().filter(function () {\n      return true;\n    });\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: _emberCliMirageSerializer['default'].extend({\n        serialize: function serialize() {\n          assert.ok('serializer ran');\n          return {};\n        }\n      })\n    });\n\n    registry.serialize(wordSmiths);\n  });\n});","define('dummy/tests/integration/serializers/base/serialize-array-of-models-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/serialize-array-of-models-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/serialize-array-of-models-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/base/serialize-ids-test', ['exports', 'qunit', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage'], function (exports, _qunit, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage) {\n\n  (0, _qunit.module)('Integration | Serializers | Base | Serialize ids', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)(),\n          specialPosts: (0, _emberCliMirage.hasMany)('blog-post', { inverse: 'specialAuthor' })\n        }),\n        blogPost: _emberCliMirage.Model\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('if serializeIds is \\'include\\' it serializes ids of hasMany associations that are included', function (assert) {\n    var ApplicationSerializer = _emberCliMirage.Serializer.extend({\n      serializeIds: 'included'\n    });\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: ApplicationSerializer,\n      wordSmith: ApplicationSerializer.extend({\n        include: ['blogPosts']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      name: 'Link'\n    });\n    wordSmith.createBlogPost();\n    wordSmith.createBlogPost();\n    wordSmith.createSpecialPost();\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        blogPostIds: ['1', '2']\n      },\n      blogPosts: [{ id: '1' }, { id: '2' }]\n    });\n  });\n\n  (0, _qunit.test)('if serializeIds is \\'always\\' it serializes ids of all hasMany associations', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.Serializer.extend({\n        serializeIds: 'always'\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      name: 'Link'\n    });\n    wordSmith.createBlogPost();\n    wordSmith.createBlogPost();\n    wordSmith.createSpecialPost();\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        blogPostIds: ['1', '2'],\n        specialPostIds: ['3']\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/base/serialize-ids-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/base/serialize-ids-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/base/serialize-ids-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/collection-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Associations | Collection', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          posts: (0, _emberCliMirage.hasMany)('blogPost', { inverse: 'author' })\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)('wordSmith', { inverse: 'posts' }),\n          comments: (0, _emberCliMirage.hasMany)('fineComment', { inverse: 'post' })\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          post: (0, _emberCliMirage.belongsTo)('blogPost')\n        })\n      });\n    }\n  });\n\n  (0, _qunit.test)('it includes all relationships for a collection, regardless of being included', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n    this.schema.wordSmiths.create({ firstName: 'Link', age: 123 });\n    this.schema.wordSmiths.create({ firstName: 'Zelda', age: 456 });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link',\n          age: 123\n        },\n        relationships: {\n          'posts': {\n            data: []\n          }\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first-name': 'Zelda',\n          age: 456\n        },\n        relationships: {\n          'posts': {\n            data: []\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a collection with a has-many relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['posts']\n      })\n    });\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    link.createPost({ title: 'Lorem' });\n    link.createPost({ title: 'Ipsum' });\n    this.schema.wordSmiths.create({ firstName: 'Zelda' });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first-name': 'Zelda'\n        },\n        relationships: {\n          'posts': {\n            data: []\n          }\n        }\n      }],\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'comments': {\n            data: []\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'comments': {\n            data: []\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a collection with a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['posts']\n      }),\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['comments']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var lorem = link.createPost({ title: 'Lorem' });\n    lorem.createComment({ text: 'pwned' });\n    link.createPost({ title: 'Ipsum' });\n    this.schema.wordSmiths.create({ firstName: 'Zelda' });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first-name': 'Zelda'\n        },\n        relationships: {\n          'posts': {\n            data: []\n          }\n        }\n      }],\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'comments': {\n            data: [{ type: 'fine-comments', id: '1' }]\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          text: 'pwned'\n        },\n        relationships: {\n          'post': {\n            data: { type: 'blog-posts', id: '1' }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'comments': {\n            data: []\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a collection with a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post = link.createPost({ title: 'Lorem' });\n    post.createComment();\n    link.createPost({ title: 'Ipsum' });\n    this.schema.wordSmiths.create({ firstName: 'Zelda' });\n\n    var blogPosts = this.schema.blogPosts.all();\n    var result = registry.serialize(blogPosts);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'comments': {\n            data: [{ type: 'fine-comments', id: '1' }]\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'comments': {\n            data: []\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }],\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a collection with a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      fineComment: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['post']\n      }),\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['author']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post = link.createPost({ title: 'Lorem' });\n    post.createComment({ text: 'pwned' });\n    link.createPost({ title: 'Ipsum' });\n    this.schema.wordSmiths.create({ firstName: 'Zelda' });\n\n    var fineComments = this.schema.fineComments.all();\n    var result = registry.serialize(fineComments);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          text: 'pwned'\n        },\n        relationships: {\n          'post': {\n            data: { type: 'blog-posts', id: '1' }\n          }\n        }\n      }],\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'comments': {\n            data: [{\n              id: '1',\n              type: 'fine-comments'\n            }]\n          },\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      }, {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'posts': {\n            data: [{\n              id: '1',\n              type: 'blog-posts'\n            }, {\n              id: '2',\n              type: 'blog-posts'\n            }]\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize a collection of models that have both belongs-to and has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['author', 'comments']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post = link.createPost({ title: 'Lorem' });\n    post.createComment({ text: 'pwned' });\n    link.createPost({ title: 'Ipsum' });\n    this.schema.wordSmiths.create({ firstName: 'Zelda' });\n\n    var blogPost = this.schema.blogPosts.find(1);\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'author': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'comments': {\n            data: [{ type: 'fine-comments', id: '1' }]\n          }\n        }\n      },\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'posts': {\n            data: [{\n              id: '1',\n              type: 'blog-posts'\n            }, {\n              id: '2',\n              type: 'blog-posts'\n            }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          'text': 'pwned'\n        },\n        relationships: {\n          'post': {\n            data: {\n              id: '1',\n              type: 'blog-posts'\n            }\n          }\n        }\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/collection-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/collection-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/collection-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/includes-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Associations | Includes', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n\n        blogPost: _emberCliMirage.Model.extend({\n          wordSmith: (0, _emberCliMirage.belongsTo)(),\n          fineComments: (0, _emberCliMirage.hasMany)()\n        }),\n\n        fineComment: _emberCliMirage.Model.extend({\n          blogPost: (0, _emberCliMirage.belongsTo)(),\n          category: (0, _emberCliMirage.belongsTo)()\n        }),\n\n        category: _emberCliMirage.Model.extend({\n          labels: (0, _emberCliMirage.hasMany)()\n        }),\n\n        label: _emberCliMirage.Model.extend({})\n      });\n    }\n  });\n\n  (0, _qunit.test)('includes get serialized with correct serializer', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['title'],\n        include: ['wordSmith']\n      }),\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['firstName']\n      })\n    });\n\n    var post = this.schema.blogPosts.create({ title: 'We love Mirage!' });\n    post.createWordSmith({ firstName: 'Sam' });\n\n    var result = registry.serialize(post);\n\n    assert.propEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          'title': 'We love Mirage!'\n        },\n        relationships: {\n          'fine-comments': {\n            'data': []\n          },\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          }\n        }\n      },\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Sam'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }]\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('query param includes work when serializing a model', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n\n    var post = this.schema.blogPosts.create();\n    post.createWordSmith();\n    post.createFineComment();\n    post.createFineComment();\n\n    var request = {\n      queryParams: {\n        include: 'word-smith,fine-comments'\n      }\n    };\n\n    var result = registry.serialize(post, request);\n\n    assert.propEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '1' }, { type: 'fine-comments', id: '2' }]\n          }\n        }\n      },\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '2',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('query param includes work when serializing a collection', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n\n    var post1 = this.schema.blogPosts.create();\n    post1.createWordSmith();\n    post1.createFineComment();\n    post1.createFineComment();\n    this.schema.blogPosts.create();\n\n    var request = {\n      queryParams: {\n        include: 'word-smith,fine-comments'\n      }\n    };\n\n    var result = registry.serialize(this.schema.blogPosts.all(), request);\n\n    assert.propEqual(result, {\n      data: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '1' }, { type: 'fine-comments', id: '2' }]\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {},\n        relationships: {\n          'word-smith': {\n            data: null\n          },\n          'fine-comments': {\n            data: []\n          }\n        }\n      }],\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '2',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('query param includes take precedence over default server includes', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['wordSmith']\n      })\n    });\n\n    var post = this.schema.blogPosts.create();\n    post.createWordSmith();\n    post.createFineComment();\n    post.createFineComment();\n\n    var request = {\n      queryParams: {\n        include: 'fine-comments'\n      }\n    };\n\n    var result = registry.serialize(post, request);\n\n    assert.propEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '1' }, { type: 'fine-comments', id: '2' }]\n          }\n        }\n      },\n      included: [{\n        type: 'fine-comments',\n        id: '1',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '2',\n        attributes: {},\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          },\n          category: { data: null }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('query param includes support dot-paths when serializing a model', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n\n    this.schema.db.loadData({\n      wordSmiths: [{ id: 1, name: 'Sam', blogPostIds: [2] }],\n      blogPosts: [{ id: 2, wordSmithId: 1, fineCommentIds: [3], title: 'Lorem Ipsum' }],\n      fineComments: [{ id: 3, text: 'Foo', blogPostId: 2, categoryId: 10 }],\n      categories: [{ id: 10, foo: 'bar', labelIds: [20] }],\n      labels: [{ id: 20, name: 'Economics' }]\n    });\n    var request = {\n      queryParams: {\n        include: 'wordSmith,fineComments.category.labels'\n      }\n    };\n    var result = registry.serialize(this.schema.blogPosts.first(), request);\n\n    assert.propEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Lorem Ipsum'\n        },\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '3' }]\n          }\n        }\n      },\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          name: 'Sam'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '2' }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '3',\n        attributes: {\n          text: 'Foo'\n        },\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '2' }\n          },\n          'category': {\n            data: { type: 'categories', id: '10' }\n          }\n        }\n      }, {\n        type: 'categories',\n        id: '10',\n        attributes: {\n          foo: 'bar'\n        },\n        relationships: {\n          'labels': {\n            data: [{ type: 'labels', id: '20' }]\n          }\n        }\n      }, {\n        type: 'labels',\n        id: '20',\n        attributes: {\n          name: 'Economics'\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('query param includes support dot-paths when serializing a collection', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n\n    this.schema.db.loadData({\n      wordSmiths: [{ id: 1, name: 'Sam', blogPostIds: [2, 5] }],\n      blogPosts: [{ id: 2, wordSmithId: 1, fineCommentIds: [3], title: 'Lorem Ipsum' }, { id: 5, wordSmithId: 1, title: 'Dolor' }],\n      fineComments: [{ id: 3, text: 'Foo', blogPostId: 2, categoryId: 10 }],\n      categories: [{ id: 10, foo: 'bar', labelIds: [20] }],\n      labels: [{ id: 20, name: 'Economics' }]\n    });\n    var request = {\n      queryParams: {\n        include: 'wordSmith,fineComments.category.labels'\n      }\n    };\n    var result = registry.serialize(this.schema.blogPosts.all(), request);\n\n    assert.propEqual(result, {\n      data: [{\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Lorem Ipsum'\n        },\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '3' }]\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '5',\n        attributes: {\n          title: 'Dolor'\n        },\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: []\n          }\n        }\n      }],\n      included: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          name: 'Sam'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '2' }, { type: 'blog-posts', id: '5' }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '3',\n        attributes: {\n          text: 'Foo'\n        },\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '2' }\n          },\n          'category': {\n            data: { type: 'categories', id: '10' }\n          }\n        }\n      }, {\n        type: 'categories',\n        id: '10',\n        attributes: {\n          foo: 'bar'\n        },\n        relationships: {\n          'labels': {\n            data: [{ type: 'labels', id: '20' }]\n          }\n        }\n      }, {\n        type: 'labels',\n        id: '20',\n        attributes: {\n          name: 'Economics'\n        }\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/includes-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/includes-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/includes-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/key-for-relationship-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _emberCliMirageUtilsInflector, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Key for relationship', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirage.Model\n      });\n    }\n  });\n\n  (0, _qunit.test)('keyForRelationship works', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer.extend({\n        keyForRelationship: function keyForRelationship(key) {\n          return (0, _emberCliMirageUtilsInflector.underscore)(key);\n        }\n      })\n    });\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      firstName: 'Link',\n      lastName: 'Jackson',\n      age: 323\n    });\n    wordSmith.createBlogPost({ title: 'Lorem ipsum' });\n\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          age: 323,\n          'first-name': 'Link',\n          'last-name': 'Jackson'\n        },\n        relationships: {\n          'blog_posts': {\n            data: [{ id: '1', type: 'blog-posts' }]\n          }\n        }\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/key-for-relationship-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/key-for-relationship-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/key-for-relationship-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/links-test', ['exports', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/schema'], function (exports, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit, _emberCliMirageDb, _emberCliMirageOrmSchema) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Associations | Links', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          wordSmith: (0, _emberCliMirage.belongsTo)(),\n          fineComments: (0, _emberCliMirage.hasMany)()\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          blogPost: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    },\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can link to relationships, omitting \\'data\\'', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        links: function links(model) {\n          return {\n            'wordSmith': {\n              related: '/api/word_smiths/' + model.wordSmith.id,\n              self: '/api/blog_posts/' + model.id + '/relationships/word_smith'\n            },\n            'fineComments': {\n              related: '/api/fine_comments?blog_post_id=' + model.id,\n              self: '/api/blog_posts/' + model.id + '/relationships/fine_comments'\n            }\n          };\n        }\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ id: 3, name: 'Link' }); // specify id to really test our links function\n    var blogPost = link.createBlogPost({ title: 'Lorem ipsum' });\n\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: blogPost.id,\n        attributes: {\n          'title': 'Lorem ipsum'\n        },\n        relationships: {\n          'word-smith': {\n            links: {\n              related: '/api/word_smiths/' + link.id,\n              self: '/api/blog_posts/' + blogPost.id + '/relationships/word_smith'\n            }\n          },\n          'fine-comments': {\n            links: {\n              related: '/api/fine_comments?blog_post_id=' + blogPost.id,\n              self: '/api/blog_posts/' + blogPost.id + '/relationships/fine_comments'\n            }\n          }\n        }\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/links-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/links-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/links-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/many-to-many-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/serializer-registry'], function (exports, _qunit, _emberCliMirage, _emberCliMirageDb, _emberCliMirageOrmSchema, _emberCliMirageSerializerRegistry) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Associations | Many To Many', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']();\n\n      var schema = new _emberCliMirageOrmSchema['default'](db, {\n        contact: _emberCliMirage.Model.extend({\n          addresses: (0, _emberCliMirage.hasMany)(),\n          contactAddresses: (0, _emberCliMirage.hasMany)()\n        }),\n        address: _emberCliMirage.Model.extend({\n          contacts: (0, _emberCliMirage.hasMany)(),\n          contactAddresses: (0, _emberCliMirage.hasMany)()\n        }),\n        contactAddress: _emberCliMirage.Model.extend({\n          contact: (0, _emberCliMirage.belongsTo)(),\n          address: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n\n      var mario = schema.contacts.create({ name: 'Mario' });\n      var newYork = schema.addresses.create({ street: 'Some New York Street' });\n      var mushroomKingdom = schema.addresses.create({ street: 'Some Mushroom Kingdom Street' });\n\n      schema.contactAddresses.create({ contact: mario, address: newYork });\n      schema.contactAddresses.create({ contact: mario, address: mushroomKingdom });\n\n      this.schema = schema;\n    }\n  });\n\n  (0, _qunit.skip)('it serializes manyToMany if properly configured to passthrough ', function (assert) {\n    var contactSerializer = _emberCliMirage.JSONAPISerializer.extend({\n      addresses: function addresses(model) {\n        var models = model.contactAddresses.models.map(function (ca) {\n          return ca.address;\n        });\n        return new _emberCliMirage.Collection('address', models);\n      }\n    });\n\n    var addressSerializer = _emberCliMirage.JSONAPISerializer.extend({\n      contacts: function contacts(model) {\n        var models = model.contactAddresses.models.map(function (ca) {\n          return ca.contact;\n        });\n        return new _emberCliMirage.Collection('contact', models);\n      }\n    });\n\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      address: addressSerializer,\n      contact: contactSerializer\n    });\n\n    var contact = this.schema.contacts.find(1);\n    var result = registry.serialize(contact);\n\n    assert.deepEqual(result, {\n      data: {\n        id: '1',\n        type: 'contacts',\n        attributes: {\n          name: 'Mario'\n        },\n        relationships: {\n          addresses: {\n            data: [{ id: '1', type: 'addresses' }, { id: '2', type: 'addresses' }]\n          },\n          'contact-addresses': {\n            data: [{ id: '1', type: 'contact-addresses' }, { id: '2', type: 'contact-addresses' }]\n          }\n        }\n      }\n    });\n  });\n\n  (0, _qunit.skip)('it sideloads manyToMany if properly configured to passthrough and include', function (assert) {\n    var contactSerializer = _emberCliMirage.JSONAPISerializer.extend({\n      include: ['addresses'],\n      addresses: function addresses(model) {\n        var models = model.contactAddresses.models.map(function (ca) {\n          return ca.address;\n        });\n        return new _emberCliMirage.Collection('address', models);\n      }\n    });\n\n    var addressSerializer = _emberCliMirage.JSONAPISerializer.extend({\n      include: ['contacts'],\n      contacts: function contacts(model) {\n        var models = model.contactAddresses.models.map(function (ca) {\n          return ca.contact;\n        });\n        return new _emberCliMirage.Collection('contact', models);\n      }\n    });\n\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      address: addressSerializer,\n      contact: contactSerializer\n    });\n\n    var contact = this.schema.contacts.find(1);\n    var result = registry.serialize(contact);\n\n    var data = result.data;\n    var included = result.included;\n\n    assert.deepEqual(data, {\n      id: '1',\n      type: 'contacts',\n      attributes: {\n        name: 'Mario'\n      },\n      relationships: {\n        addresses: {\n          data: [{ id: '1', type: 'addresses' }, { id: '2', type: 'addresses' }]\n        },\n        'contact-addresses': {\n          data: [{ id: '1', type: 'contact-addresses' }, { id: '2', type: 'contact-addresses' }]\n        }\n      }\n    });\n\n    assert.deepEqual(included, [{\n      id: '1',\n      type: 'addresses',\n      attributes: {\n        street: 'Some New York Street'\n      },\n      relationships: {\n        contacts: { data: [{ id: '1', type: 'contacts' }] },\n        'contact-addresses': { data: [{ id: '1', type: 'contact-addresses' }] }\n      }\n    }, {\n      id: '2',\n      type: 'addresses',\n      attributes: {\n        street: 'Some Mushroom Kingdom Street'\n      },\n      relationships: {\n        contacts: { data: [{ id: '1', type: 'contacts' }] },\n        'contact-addresses': { data: [{ id: '2', type: 'contact-addresses' }] }\n      }\n    }]);\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/many-to-many-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/many-to-many-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/many-to-many-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/model-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Associations | Model', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model.extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirage.Model.extend({\n          wordSmith: (0, _emberCliMirage.belongsTo)(),\n          fineComments: (0, _emberCliMirage.hasMany)()\n        }),\n        fineComment: _emberCliMirage.Model.extend({\n          blogPost: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n    }\n  });\n\n  (0, _qunit.test)('it contains resource identifier objects for all a model\\'s relationships, regardless of includes', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer\n    });\n    var link = this.schema.wordSmiths.create({\n      firstName: 'Link',\n      age: 123\n    });\n    var post = link.createBlogPost({ title: 'Lorem ipsum' });\n\n    var result = registry.serialize(post);\n    assert.deepEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          'title': 'Lorem ipsum'\n        },\n        relationships: {\n          'word-smith': {\n            data: {\n              type: 'word-smiths',\n              id: '1'\n            }\n          },\n          'fine-comments': {\n            data: []\n          }\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can include a has-many relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['blogPosts']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    link.createBlogPost({ title: 'Lorem' });\n    link.createBlogPost({ title: 'Ipsum' });\n\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        }\n      },\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'fine-comments': {\n            data: []\n          },\n          'word-smith': {\n            data: {\n              id: '1',\n              type: 'word-smiths'\n            }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'fine-comments': {\n            data: []\n          },\n          'word-smith': {\n            data: {\n              id: '1',\n              type: 'word-smiths'\n            }\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can include a chain of has-many relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['blogPosts']\n      }),\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['fineComments']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post1 = link.createBlogPost({ title: 'Lorem' });\n    post1.createFineComment({ text: 'pwned' });\n    link.createBlogPost({ title: 'Ipsum' });\n\n    var result = registry.serialize(link);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        }\n      },\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '1' }]\n          },\n          'word-smith': {\n            data: {\n              id: '1',\n              type: 'word-smiths'\n            }\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          text: 'pwned'\n        },\n        relationships: {\n          'blog-post': {\n            data: {\n              id: '1',\n              type: 'blog-posts'\n            }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'fine-comments': {\n            data: []\n          },\n          'word-smith': {\n            data: {\n              id: '1',\n              type: 'word-smiths'\n            }\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can include a belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['wordSmith']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var blogPost = link.createBlogPost({ title: 'Lorem' });\n    blogPost.createFineComment();\n\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'fine-comments': {\n            data: [{\n              id: '1',\n              type: 'fine-comments'\n            }]\n          },\n          'word-smith': {\n            data: {\n              id: '1',\n              type: 'word-smiths'\n            }\n          }\n        }\n      },\n      'included': [{\n        attributes: {\n          'first-name': 'Link'\n        },\n        id: '1',\n        type: 'word-smiths',\n        relationships: {\n          'blog-posts': {\n            data: [{\n              id: '1',\n              type: 'blog-posts'\n            }]\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it gracefully handles null belongs-to relationship', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['wordSmith']\n      })\n    });\n\n    var blogPost = this.schema.blogPosts.create({ title: 'Lorem' });\n    var result = registry.serialize(blogPost);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'word-smith': {\n            data: null\n          },\n          'fine-comments': {\n            data: []\n          }\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it can include a chain of belongs-to relationships', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['wordSmith']\n      }),\n      fineComment: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['blogPost']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post = wordSmith.createBlogPost({ title: 'Lorem' });\n    var comment = post.createFineComment({ text: 'pwned' });\n\n    var result = registry.serialize(comment);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          text: 'pwned'\n        },\n        relationships: {\n          'blog-post': {\n            data: {\n              id: '1',\n              type: 'blog-posts'\n            }\n          }\n        }\n      },\n      'included': [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'fine-comments': {\n            data: [{\n              id: '1',\n              type: 'fine-comments'\n            }]\n          },\n          'word-smith': {\n            data: {\n              type: 'word-smiths',\n              id: '1'\n            }\n          }\n        }\n      }, {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        },\n        relationships: {\n          'blog-posts': {\n            data: [{\n              id: '1',\n              type: 'blog-posts'\n            }]\n          }\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it ignores relationships that refer to serialized ancestor resources', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['blogPosts']\n      }),\n      blogPost: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['wordSmith', 'fineComments']\n      }),\n      fineComment: _emberCliMirage.JSONAPISerializer.extend({\n        include: ['blogPost']\n      })\n    });\n\n    var wordSmith = this.schema.wordSmiths.create({ firstName: 'Link' });\n    var post = wordSmith.createBlogPost({ title: 'Lorem' });\n    wordSmith.createBlogPost({ title: 'Ipsum' });\n    post.createFineComment({ text: 'pwned' });\n\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      data: {\n        attributes: {\n          'first-name': 'Link'\n        },\n        id: '1',\n        relationships: {\n          'blog-posts': {\n            data: [{ type: 'blog-posts', id: '1' }, { type: 'blog-posts', id: '2' }]\n          }\n        },\n        type: 'word-smiths'\n      },\n      included: [{\n        type: 'blog-posts',\n        id: '1',\n        attributes: {\n          title: 'Lorem'\n        },\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: [{ type: 'fine-comments', id: '1' }]\n          }\n        }\n      }, {\n        type: 'fine-comments',\n        id: '1',\n        attributes: {\n          text: 'pwned'\n        },\n        relationships: {\n          'blog-post': {\n            data: { type: 'blog-posts', id: '1' }\n          }\n        }\n      }, {\n        type: 'blog-posts',\n        id: '2',\n        attributes: {\n          title: 'Ipsum'\n        },\n        relationships: {\n          'word-smith': {\n            data: { type: 'word-smiths', id: '1' }\n          },\n          'fine-comments': {\n            data: []\n          }\n        }\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/associations/model-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/associations/model-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/associations/model-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/attrs-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Attrs List', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model,\n        photograph: _emberCliMirage.Model\n      });\n    }\n  });\n\n  (0, _qunit.test)('it returns only the whitelisted attrs when serializing a model', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['firstName']\n      })\n    });\n    var user = this.schema.wordSmiths.create({\n      id: 1,\n      firstName: 'Link',\n      age: 123\n    });\n\n    var result = registry.serialize(user);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it returns only the whitelisted attrs when serializing a collection', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer,\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['firstName']\n      })\n    });\n    this.schema.wordSmiths.create({ id: 1, firstName: 'Link', age: 123 });\n    this.schema.wordSmiths.create({ id: 2, firstName: 'Zelda', age: 456 });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first-name': 'Zelda'\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can use different attr whitelists for different serializers', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      wordSmith: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['firstName']\n      }),\n      photograph: _emberCliMirage.JSONAPISerializer.extend({\n        attrs: ['title']\n      })\n    });\n\n    var link = this.schema.wordSmiths.create({ id: 1, firstName: 'Link', age: 123 });\n    assert.deepEqual(registry.serialize(link), {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link'\n        }\n      }\n    });\n\n    var photo = this.schema.photographs.create({ id: 1, title: 'Lorem ipsum', createdAt: '2010-01-01' });\n    assert.deepEqual(registry.serialize(photo), {\n      data: {\n        type: 'photographs',\n        id: '1',\n        attributes: {\n          'title': 'Lorem ipsum'\n        }\n      }\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/attrs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/attrs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/attrs-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/base-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Base', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model\n      });\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        application: _emberCliMirage.JSONAPISerializer\n      });\n    }\n  });\n\n  (0, _qunit.test)('it includes all attributes for a model', function (assert) {\n    var link = this.schema.wordSmiths.create({ firstName: 'Link', age: 123 });\n    var result = this.registry.serialize(link);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link',\n          age: 123\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it includes all attributes for each model in a collection', function (assert) {\n    this.schema.wordSmiths.create({ firstName: 'Link', age: 123 });\n    this.schema.wordSmiths.create({ id: 1, firstName: 'Link', age: 123 });\n    this.schema.wordSmiths.create({ id: 2, firstName: 'Zelda', age: 456 });\n\n    var collection = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(collection);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first-name': 'Link',\n          age: 123\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first-name': 'Zelda',\n          age: 456\n        }\n      }]\n    });\n  });\n\n  (0, _qunit.test)('it can serialize an empty collection', function (assert) {\n    var wordSmiths = this.schema.wordSmiths.all();\n    var result = this.registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      data: []\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/base-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/base-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/base-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/key-formatting-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _emberCliMirage, _emberCliMirageUtilsInflector, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializers | JSON API Serializer | Key Formatting', {\n    beforeEach: function beforeEach() {\n      this.schema = new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirage.Model,\n        photograph: _emberCliMirage.Model\n      });\n    }\n  });\n\n  (0, _qunit.test)('keyForAttribute formats the attributes of a model', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer.extend({\n        keyForAttribute: function keyForAttribute(key) {\n          return (0, _emberCliMirageUtilsInflector.underscore)(key);\n        }\n      })\n    });\n    var wordSmith = this.schema.wordSmiths.create({\n      id: 1,\n      firstName: 'Link',\n      lastName: 'Jackson',\n      age: 323\n    });\n\n    var result = registry.serialize(wordSmith);\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          age: 323,\n          first_name: 'Link',\n          last_name: 'Jackson'\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('keyForAttribute also formats the models in a collections', function (assert) {\n    var registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n      application: _emberCliMirage.JSONAPISerializer.extend({\n        keyForAttribute: function keyForAttribute(key) {\n          return (0, _emberCliMirageUtilsInflector.underscore)(key);\n        }\n      })\n    });\n\n    this.schema.wordSmiths.create({ id: 1, 'firstName': 'Link', 'lastName': 'Jackson' });\n    this.schema.wordSmiths.create({ id: 2, 'firstName': 'Zelda', 'lastName': 'Brown' });\n    var wordSmiths = this.schema.wordSmiths.all();\n\n    var result = registry.serialize(wordSmiths);\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'word-smiths',\n        id: '1',\n        attributes: {\n          'first_name': 'Link',\n          'last_name': 'Jackson'\n        }\n      }, {\n        type: 'word-smiths',\n        id: '2',\n        attributes: {\n          'first_name': 'Zelda',\n          'last_name': 'Brown'\n        }\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/json-api-serializer/key-formatting-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/json-api-serializer/key-formatting-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/json-api-serializer/key-formatting-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/rest-serializer-test', ['exports', 'ember-cli-mirage/serializers/rest-serializer', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db', 'ember-cli-mirage/serializer-registry', 'qunit'], function (exports, _emberCliMirageSerializersRestSerializer, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb, _emberCliMirageSerializerRegistry, _qunit) {\n\n  (0, _qunit.module)('Integration | Serializer | RestSerializer', {\n    beforeEach: function beforeEach() {\n      var db = new _emberCliMirageDb['default']();\n      this.schema = new _emberCliMirageOrmSchema['default'](db);\n      this.schema.registerModels({\n        wordSmith: _emberCliMirageOrmModel['default'].extend({\n          blogPosts: (0, _emberCliMirage.hasMany)()\n        }),\n        blogPost: _emberCliMirageOrmModel['default'].extend({\n          wordSmith: (0, _emberCliMirage.belongsTo)()\n        })\n      });\n\n      var link = this.schema.wordSmiths.create({ name: 'Link', age: 123 });\n      link.createBlogPost({ title: 'Lorem' });\n      link.createBlogPost({ title: 'Ipsum' });\n\n      this.schema.wordSmiths.create({ name: 'Zelda', age: 230 });\n\n      this.registry = new _emberCliMirageSerializerRegistry['default'](this.schema, {\n        application: _emberCliMirageSerializersRestSerializer['default'],\n        wordSmith: _emberCliMirageSerializersRestSerializer['default'].extend({\n          attrs: ['id', 'name'],\n          include: ['blogPosts']\n        }),\n        blogPost: _emberCliMirageSerializersRestSerializer['default'].extend({\n          include: ['wordSmith']\n        })\n      });\n    },\n\n    afterEach: function afterEach() {\n      this.schema.db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it sideloads associations and camel-cases relationships and attributes correctly for a model', function (assert) {\n    var link = this.schema.wordSmiths.find(1);\n    var result = this.registry.serialize(link);\n\n    assert.deepEqual(result, {\n      wordSmith: {\n        id: '1',\n        name: 'Link',\n        blogPosts: ['1', '2']\n      },\n      blogPosts: [{\n        id: '1',\n        title: 'Lorem',\n        wordSmith: '1'\n      }, {\n        id: '2',\n        title: 'Ipsum',\n        wordSmith: '1'\n      }]\n    });\n  });\n});","define('dummy/tests/integration/serializers/rest-serializer-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/rest-serializer-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/rest-serializer-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/serializers/schema-helper', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/db'], function (exports, _emberCliMirage, _emberCliMirageOrmSchema, _emberCliMirageOrmModel, _emberCliMirageDb) {\n  exports['default'] = {\n\n    setup: function setup() {\n      return new _emberCliMirageOrmSchema['default'](new _emberCliMirageDb['default'](), {\n        wordSmith: _emberCliMirageOrmModel['default'].extend({\n          blogPosts: _emberCliMirage['default'].hasMany()\n        }),\n        blogPost: _emberCliMirageOrmModel['default'].extend({\n          wordSmith: _emberCliMirage['default'].belongsTo(),\n          fineComments: _emberCliMirage['default'].hasMany()\n        }),\n        fineComment: _emberCliMirageOrmModel['default'].extend({\n          blogPost: _emberCliMirage['default'].belongsTo()\n        }),\n        greatPhoto: _emberCliMirageOrmModel['default'],\n\n        foo: _emberCliMirageOrmModel['default'].extend({\n          bar: _emberCliMirage['default'].belongsTo()\n        }),\n        bar: _emberCliMirageOrmModel['default'].extend({\n          baz: _emberCliMirage['default'].belongsTo()\n        }),\n        baz: _emberCliMirageOrmModel['default'].extend({\n          quuxes: _emberCliMirage['default'].hasMany()\n        }),\n        quux: _emberCliMirageOrmModel['default'].extend({\n          zomgs: _emberCliMirage['default'].hasMany()\n        }),\n        zomg: _emberCliMirageOrmModel['default'].extend({\n          lol: _emberCliMirage['default'].belongsTo()\n        }),\n        lol: _emberCliMirageOrmModel['default']\n      });\n    }\n\n  };\n});","define('dummy/tests/integration/serializers/schema-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/serializers/schema-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/serializers/schema-helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server-config-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server', 'ember-cli-mirage/serializers/active-model-serializer', 'ember-cli-mirage/serializers/rest-serializer'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer, _emberCliMirageSerializersActiveModelSerializer, _emberCliMirageSerializersRestSerializer) {\n\n  (0, _qunit.module)('Integration | Server Config', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'development',\n        models: {\n          contact: _emberCliMirage.Model,\n          post: _emberCliMirage.Model\n        },\n        serializers: {\n          contact: _emberCliMirageSerializersActiveModelSerializer['default']\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('namespace can be configured', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.namespace = 'api';\n    this.server.get('/contacts');\n\n    $.getJSON('/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('urlPrefix can be configured', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    server.db.loadData({\n      contacts: contacts\n    });\n    server.urlPrefix = 'http://localhost:3000';\n    server.get('/contacts');\n\n    $.getJSON('http://localhost:3000/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('urlPrefix and namespace can be configured simultaneously', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    server.db.loadData({\n      contacts: contacts\n    });\n    server.urlPrefix = 'http://localhost:3000';\n    server.namespace = 'api';\n    server.get('/contacts');\n\n    $.getJSON('http://localhost:3000/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('fully qualified domain names can be used in configuration', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.get('http://example.org/api/contacts');\n\n    $.getJSON('http://example.org/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('urlPrefix/namespace are ignored when fully qualified domain names are used in configuration', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    server.db.loadData({\n      contacts: contacts\n    });\n    this.urlPrefix = 'https://example.net';\n    server.get('http://example.org/api/contacts');\n\n    $.getJSON('http://example.org/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('blank urlPrefix and namespace ends up as /', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.namespace = '';\n    this.server.urlPrefix = '';\n    this.server.get('contacts');\n\n    $.getJSON('/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('namespace with no slash gets one', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.namespace = 'api';\n    this.server.get('contacts');\n\n    $.getJSON('/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('urlPrefix with no slash gets one', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.urlPrefix = 'pre';\n    this.server.get('contacts');\n\n    $.getJSON('/pre/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('namespace of / works', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    this.server.db.loadData({\n      contacts: contacts\n    });\n    this.server.namespace = '/';\n    this.server.get('contacts');\n\n    $.getJSON('/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('redefining options using the config method works', function (assert) {\n    assert.expect(5);\n    var done = assert.async();\n    var server = this.server;\n\n    var contacts = [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }];\n    server.config({\n      namespace: 'api',\n      urlPrefix: 'http://localhost:3000',\n      timing: 1000,\n      serializers: {\n        post: _emberCliMirageSerializersRestSerializer['default']\n      }\n    });\n    server.db.loadData({\n      contacts: contacts\n    });\n    server.get('contacts');\n\n    assert.equal(server.timing, 1000);\n    $.getJSON('http://localhost:3000/api/contacts', function (data) {\n      assert.deepEqual(data, { contacts: contacts });\n      done();\n    });\n    var serializerMap = server.serializerOrRegistry._serializerMap;\n    assert.equal(Object.keys(serializerMap).length, 2);\n    assert.equal(serializerMap.contact, _emberCliMirageSerializersActiveModelSerializer['default']);\n    assert.equal(serializerMap.post, _emberCliMirageSerializersRestSerializer['default']);\n  });\n\n  (0, _qunit.test)('changing the environment of the server throws an error', function (assert) {\n    var server = this.server;\n\n    assert.throws(function () {\n      server.config({\n        environment: 'test'\n      });\n    }, /You cannot modify Mirage's environment once the server is created/);\n  });\n});","define('dummy/tests/integration/server-config-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server-config-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server-config-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server-with-orm-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server with ORM', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          blogPost: _emberCliMirage.Model\n        },\n        factories: {\n          blogPost: _emberCliMirage.Factory\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('a single blogPost db collection is made', function (assert) {\n    assert.equal(this.server.db._collections.length, 1);\n    assert.equal(this.server.db._collections[0].name, 'blogPosts');\n  });\n\n  (0, _qunit.test)('create looks up the appropriate db collection', function (assert) {\n    server.create('blog-post');\n\n    assert.equal(this.server.db.blogPosts.length, 1);\n  });\n});","define('dummy/tests/integration/server-with-orm-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server-with-orm-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server-with-orm-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server/custom-function-handler-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Custom function handler', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          contact: _emberCliMirage.Model\n        },\n        factories: {\n          contact: _emberCliMirage.Factory\n        },\n        serializers: {\n          application: _emberCliMirage.ActiveModelSerializer\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('a POJA of models defaults to responding with an array of each model\\'s attrs', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    server.createList('contact', 3);\n    server.get('/contacts', function (schema) {\n      return schema.contacts.all().models;\n    });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res) {\n      assert.deepEqual(res, [{ id: '1' }, { id: '2' }, { id: '3' }]);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('#normalizedRequestAttrs returns an object with the primary resource\\'s attrs and belongsTo keys camelized', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    server.post('/contacts', function () {\n      var attrs = this.normalizedRequestAttrs();\n\n      assert.deepEqual(attrs, {\n        firstName: 'Sam',\n        lastName: 'Selikoff',\n        teamId: 1\n      });\n\n      return {};\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        contact: {\n          first_name: 'Sam',\n          last_name: 'Selikoff',\n          team_id: 1\n        }\n      })\n    }).done(function () {\n      done();\n    });\n  });\n\n  (0, _qunit.test)('#normalizedRequestAttrs parses a x-www-form-urlencoded request and returns a POJO', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var server = this.server;\n\n    server.post('/form-test', function () {\n      var attrs = this.normalizedRequestAttrs();\n\n      assert.deepEqual(attrs, {\n        name: 'Sam Selikoff',\n        company: 'TED',\n        email: 'sam.selikoff@gmail.com'\n      }, '#normalizedRequestAttrs successfully returned the parsed x-www-form-urlencoded request body');\n\n      return {};\n    });\n\n    $.ajax({\n      method: 'POST',\n      url: '/form-test',\n      data: 'name=Sam+Selikoff&company=TED&email=sam.selikoff@gmail.com'\n    }).done(function () {\n      done();\n    });\n  });\n});","define('dummy/tests/integration/server/custom-function-handler-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server/custom-function-handler-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server/custom-function-handler-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server/customized-normalize-method-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageUtilsInflector, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Customized normalize method', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          contact: _emberCliMirage.Model\n        },\n        serializers: {\n          application: _emberCliMirage.ActiveModelSerializer,\n          contact: _emberCliMirage.ActiveModelSerializer.extend({\n            normalize: function normalize(payload) {\n              var attrs = payload.some.random[1].attrs;\n              Object.keys(attrs).forEach(_emberCliMirageUtilsInflector.camelize);\n\n              var jsonApiDoc = {\n                data: {\n                  type: 'contacts',\n                  attributes: attrs\n                }\n              };\n              return jsonApiDoc;\n            }\n          })\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('custom model-specific normalize functions are used', function (assert) {\n    var server = this.server;\n\n    assert.expect(3);\n    var done = assert.async();\n\n    server.post('/contacts');\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      data: JSON.stringify({\n        some: {\n          random: [{\n            format: true\n          }, {\n            attrs: {\n              first_name: 'Zelda'\n            }\n          }]\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 201);\n      assert.equal(server.db.contacts.length, 1);\n      assert.equal(server.db.contacts[0].firstName, 'Zelda');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('custom model-specific normalize functions are used with custom function handlers', function (assert) {\n    var server = this.server;\n\n    var done = assert.async();\n\n    server.put('/contacts/:id', function (schema, request) {\n      var attrs = this.normalizedRequestAttrs();\n\n      assert.deepEqual(attrs, {\n        id: '1',\n        firstName: 'Zelda'\n      });\n\n      return {};\n    });\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts/1',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        some: {\n          random: [{\n            format: true\n          }, {\n            attrs: {\n              first_name: 'Zelda'\n            }\n          }]\n        }\n      })\n    }).done(function () {\n      done();\n    });\n  });\n});","define('dummy/tests/integration/server/customized-normalize-method-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server/customized-normalize-method-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server/customized-normalize-method-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server/factory-creation-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Factory creation', {\n    beforeEach: function beforeEach() {\n      this.Contact = _emberCliMirage.Model.extend();\n      this.AmazingContact = _emberCliMirage.Model.extend();\n      this.Post = _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)()\n      });\n      this.Author = _emberCliMirage.Model.extend({\n        posts: (0, _emberCliMirage.hasMany)()\n      });\n\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          contact: this.Contact,\n          amazingContact: this.AmazingContact,\n          post: this.Post,\n          author: this.Author\n        },\n        factories: {\n          contact: _emberCliMirage.Factory,\n          amazingContact: _emberCliMirage.Factory\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('create returns a Model if one is defined', function (assert) {\n    var contact = this.server.create('contact');\n\n    assert.ok(contact instanceof this.Contact, 'expected a Contact');\n  });\n\n  (0, _qunit.test)('createList returns Models if one is defined', function (assert) {\n    var contacts = this.server.createList('contact', 1);\n\n    assert.ok(contacts[0] instanceof this.Contact, 'expected a Contactl');\n  });\n\n  (0, _qunit.test)('create returns a Model if one is defined, when using a compound name', function (assert) {\n    var contact = this.server.create('amazing-contact');\n\n    assert.ok(contact instanceof this.AmazingContact, 'expected an AmazingContact');\n  });\n\n  (0, _qunit.test)('createList returns Models if one is defined, when using a compound name', function (assert) {\n    var contacts = this.server.createList('amazing-contact', 1);\n\n    assert.ok(contacts[0] instanceof this.AmazingContact, 'expected an AmazingContact');\n  });\n\n  (0, _qunit.test)('create falls back to a model if no factory is defined', function (assert) {\n    var post = this.server.create('post');\n\n    assert.ok(post instanceof this.Post);\n    assert.equal(post.id, 1);\n  });\n\n  (0, _qunit.test)('createList falls back to a model if no factory is defined', function (assert) {\n    var posts = this.server.createList('post', 2);\n\n    assert.ok(posts[0] instanceof this.Post);\n    assert.equal(posts.length, 2);\n    assert.equal(posts[0].id, 1);\n  });\n\n  (0, _qunit.test)('create sets up the db correctly when passing in fks', function (assert) {\n    var author = server.create('author');\n    var post = this.server.create('post', {\n      authorId: author.id\n    });\n    author.reload();\n\n    assert.equal(author.posts.models.length, 1);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.server.db.posts[0].authorId, author.id);\n  });\n\n  (0, _qunit.test)('create sets up the db correctly when passing in models', function (assert) {\n    var author = server.create('author');\n    var post = this.server.create('post', {\n      author: author\n    });\n\n    assert.equal(author.posts.models.length, 1);\n    assert.deepEqual(post.author.attrs, author.attrs);\n    assert.equal(this.server.db.posts[0].authorId, author.id);\n  });\n});","define('dummy/tests/integration/server/factory-creation-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server/factory-creation-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server/factory-creation-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server/resource-shorthand-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Resource shorthand', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          contact: _emberCliMirage.Model\n        },\n        serializers: {\n          application: _emberCliMirage.ActiveModelSerializer\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('resource generates get shorthand for index action', function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }]\n    });\n\n    this.server.resource('contacts');\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.deepEqual(res, { contacts: [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }] });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource generates get shorthand for show action', function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }]\n    });\n\n    this.server.resource('contacts');\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts/2'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.deepEqual(res, { contact: { id: '2', name: 'Zelda' } });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource generates post shorthand', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    server.resource('contacts');\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 201);\n      assert.equal(server.db.contacts.length, 1);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource generates put shorthand', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts');\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.equal(server.db.contacts[0].name, 'Zelda');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource generates patch shorthand', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts');\n\n    $.ajax({\n      method: 'PATCH',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.equal(server.db.contacts[0].name, 'Zelda');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource generates delete shorthand works', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts');\n\n    $.ajax({\n      method: 'DELETE',\n      url: '/contacts/1'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 204);\n      assert.equal(server.db.contacts.length, 0);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource does not accept both :all and :except options', function (assert) {\n    var server = this.server;\n\n    assert.throws(function () {\n      server.resource('contacts', { only: ['index'], except: ['create'] });\n    }, 'cannot use both :only and :except options');\n  });\n\n  (0, _qunit.test)('resource generates shorthands which are whitelisted by :only option', function (assert) {\n    var server = this.server;\n\n    assert.expect(1);\n    var done = assert.async();\n\n    server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }, { id: 2, name: 'Zelda' }]\n    });\n\n    server.resource('contacts', { only: ['index'] });\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('resource does not generate shorthands which are not whitelisted with :only option', function (assert) {\n    var server = this.server;\n\n    assert.expect(5);\n\n    server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts', { only: ['index'] });\n\n    var doneForShow = assert.async();\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts/1'\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to GET '/contacts/1'\") !== -1);\n      doneForShow();\n    });\n\n    var doneForCreate = assert.async();\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to POST '/contacts'\") !== -1);\n      doneForCreate();\n    });\n\n    var doneForPut = assert.async();\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to PUT '/contacts/1'\") !== -1);\n      doneForPut();\n    });\n\n    var doneForPatch = assert.async();\n\n    $.ajax({\n      method: 'PATCH',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to PATCH '/contacts/1'\") !== -1);\n      doneForPatch();\n    });\n\n    var doneForDelete = assert.async();\n\n    $.ajax({\n      method: 'DELETE',\n      url: '/contacts/1'\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to DELETE '/contacts/1'\") !== -1);\n      doneForDelete();\n    });\n  });\n\n  (0, _qunit.test)('resource generates shorthands which are not blacklisted by :except option', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n\n    server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts', { except: ['create', 'update', 'delete'] });\n\n    var doneForIndex = assert.async();\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      doneForIndex();\n    });\n\n    var doneForShow = assert.async();\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      doneForShow();\n    });\n  });\n\n  (0, _qunit.test)('resource does not generate shorthands which are blacklisted by :except option', function (assert) {\n    var server = this.server;\n\n    assert.expect(4);\n\n    server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.resource('contacts', { except: ['create', 'update', 'delete'] });\n\n    var doneForCreate = assert.async();\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to POST '/contacts'\") !== -1);\n      doneForCreate();\n    });\n\n    var doneForPut = assert.async();\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to PUT '/contacts/1'\") !== -1);\n      doneForPut();\n    });\n\n    var doneForPatch = assert.async();\n\n    $.ajax({\n      method: 'PATCH',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to PATCH '/contacts/1'\") !== -1);\n      doneForPatch();\n    });\n\n    var doneForDelete = assert.async();\n\n    $.ajax({\n      method: 'DELETE',\n      url: '/contacts/1'\n    }).fail(function (xhr, textStatus, error) {\n      assert.ok(error.message.indexOf(\"Mirage: Your Ember app tried to DELETE '/contacts/1'\") !== -1);\n      doneForDelete();\n    });\n  });\n});","define('dummy/tests/integration/server/resource-shorthand-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server/resource-shorthand-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server/resource-shorthand-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/server/shorthand-sanity-test', ['exports', 'qunit', 'ember-cli-mirage', 'ember-cli-mirage/server'], function (exports, _qunit, _emberCliMirage, _emberCliMirageServer) {\n\n  (0, _qunit.module)('Integration | Server | Shorthand sanity check', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({\n        environment: 'test',\n        models: {\n          contact: _emberCliMirage.Model\n        },\n        serializers: {\n          application: _emberCliMirage.ActiveModelSerializer\n        }\n      });\n      this.server.timing = 0;\n      this.server.logging = false;\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('a get shorthand works', function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    this.server.get('/contacts');\n\n    $.ajax({\n      method: 'GET',\n      url: '/contacts'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.deepEqual(res, { contacts: [{ id: '1', name: 'Link' }] });\n      done();\n    });\n  });\n\n  (0, _qunit.test)('a post shorthand works', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    server.post('/contacts');\n\n    $.ajax({\n      method: 'POST',\n      url: '/contacts',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 201);\n      assert.equal(server.db.contacts.length, 1);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('a put shorthand works', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.put('/contacts/:id');\n\n    $.ajax({\n      method: 'PUT',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.equal(server.db.contacts[0].name, 'Zelda');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('a patch shorthand works', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.patch('/contacts/:id');\n\n    $.ajax({\n      method: 'PATCH',\n      url: '/contacts/1',\n      data: JSON.stringify({\n        contact: {\n          name: 'Zelda'\n        }\n      })\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 200);\n      assert.equal(server.db.contacts[0].name, 'Zelda');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('a delete shorthand works', function (assert) {\n    var server = this.server;\n\n    assert.expect(2);\n    var done = assert.async();\n\n    this.server.db.loadData({\n      contacts: [{ id: 1, name: 'Link' }]\n    });\n\n    server.del('/contacts/:id');\n\n    $.ajax({\n      method: 'DELETE',\n      url: '/contacts/1'\n    }).done(function (res, status, xhr) {\n      assert.equal(xhr.status, 204);\n      assert.equal(server.db.contacts.length, 0);\n      done();\n    });\n  });\n});","define('dummy/tests/integration/server/shorthand-sanity-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/server/shorthand-sanity-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/server/shorthand-sanity-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/address.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/address.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/address.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/blog-post.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/blog-post.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/blog-post.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/contact.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/contact.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/contact.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/friend.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/friend.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/friend.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/pet.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/pet.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/pet.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/models/word-smith.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/word-smith.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/word-smith.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/close-friends.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/close-friends.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/close-friends.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/contacts.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/contacts.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contacts.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/friends.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/friends.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/friends.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/pets.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/pets.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/pets.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/serializers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/serializers/blog-post.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/blog-post.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/blog-post.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/serializers/word-smith.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/word-smith.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/word-smith.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/addon-tree-test-node', ['exports'], function (exports) {\n  /* eslint-env node */\n\n  var expect = require('chai').expect;\n  var EmberAddon = require('ember-cli/lib/broccoli/ember-addon');\n  var path = require('path');\n\n  function getMirageAddon(options) {\n    options = options || {};\n    options['ember-cli-mirage'] = options['ember-cli-mirage'] || {};\n    options['ember-cli-mirage'].directory = options['ember-cli-mirage'].directory || path.resolve(__dirname, path.join('..', 'dummy', 'mirage'));\n\n    var dummyApp = new EmberAddon(options);\n\n    return findMirage(dummyApp);\n  }\n\n  function findMirage(app) {\n    var addons = app.project.addons;\n    for (var i = 0; i < addons.length; i++) {\n      if (addons[i].name === 'ember-cli-mirage') {\n        return addons[i];\n      }\n    }\n  }\n\n  describe('Addon', function () {\n    this.timeout(15000);\n\n    afterEach(function () {\n      delete process.env.EMBER_ENV;\n    });\n\n    var treeForTests = function treeForTests(name) {\n      it('returns an empty tree in production environment by default', function () {\n        process.env.EMBER_ENV = 'production';\n        var addonTree = getMirageAddon().treeFor(name);\n\n        expect(addonTree).to.be.undefined;\n      });\n\n      ['development', 'test'].forEach(function (environment) {\n        it('returns a tree in ' + environment + ' environment by default', function () {\n          process.env.EMBER_ENV = environment;\n          var addonTree = getMirageAddon().treeFor(name);\n\n          expect(addonTree._inputNodes.length).to.not.equal(0);\n        });\n      });\n\n      it('returns a tree in production environment when enabled is specified', function () {\n        process.env.EMBER_ENV = 'production';\n        var addon = getMirageAddon({ configPath: 'tests/fixtures/config/environment-production-enabled' });\n        var addonTree = addon.treeFor(name);\n\n        expect(addonTree._inputNodes.length).to.not.equal(0);\n      });\n    };\n\n    describe('#treeFor addon', function () {\n      treeForTests('addon');\n    });\n\n    describe('#treeFor app', function () {\n      treeForTests('app');\n    });\n  });\n});","define('dummy/tests/unit/addon-tree-test-node.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/addon-tree-test-node.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/addon-tree-test-node.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/collection-test', ['exports', 'ember-cli-mirage/orm/collection', 'qunit'], function (exports, _emberCliMirageOrmCollection, _qunit) {\n\n  (0, _qunit.module)('Unit | Collection');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    var collection = new _emberCliMirageOrmCollection['default']('plant');\n\n    assert.ok(collection);\n  });\n\n  (0, _qunit.test)('it cannot be instantiated without a modelName', function (assert) {\n    assert.throws(function () {\n      new _emberCliMirageOrmCollection['default']();\n    }, /must pass a `modelName`/);\n  });\n\n  (0, _qunit.test)('it knows its modelname', function (assert) {\n    var collection = new _emberCliMirageOrmCollection['default']('author');\n\n    assert.equal(collection.modelName, 'author');\n  });\n\n  (0, _qunit.test)('it can be instantiated with an array of models', function (assert) {\n    var models = [{ id: 1 }, { id: 2 }, { id: 3 }];\n    var collection = new _emberCliMirageOrmCollection['default']('author', models);\n\n    assert.ok(collection);\n  });\n\n  (0, _qunit.test)('#models returns the underlying array', function (assert) {\n    var models = [{ id: 1 }, { id: 2 }, { id: 3 }];\n    var collection = new _emberCliMirageOrmCollection['default']('author', models);\n\n    assert.deepEqual(collection.models, models);\n  });\n\n  (0, _qunit.test)('#length returns the number of elements', function (assert) {\n    var models = [{ id: 1 }, { id: 2 }];\n    var collection = new _emberCliMirageOrmCollection['default']('post', models);\n\n    assert.equal(collection.length, 2);\n\n    collection.models = [{ id: 1 }];\n    assert.equal(collection.length, 1);\n  });\n\n  // test('collection.filter returns collection instance', function(assert) {\n  //   let collection = new Collection('plant');\n  //   let filteredCollection = collection.filter(Boolean);\n  //   assert.ok(filteredCollection instanceof Collection);\n  //   assert.equal(filteredCollection.modelName, 'plant');\n  // });\n  //\n  // test('collection.mergeCollection works', function(assert) {\n  //   let collection1 = new Collection('plant', { name: 'chrerry' }, { name: 'uchreaflier' });\n  //   let collection2 = new Collection('plant', { name: 'vlip' });\n  //   assert.equal(collection1.length, 2);\n  //   assert.equal(collection2.length, 1);\n  //   collection2.mergeCollection(collection1);\n  //   assert.equal(collection2.length, 3);\n  //   assert.equal(collection2.modelName, 'plant');\n  // });\n  //\n});","define('dummy/tests/unit/collection-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/collection-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/collection-test.js should pass ESLint.\\n');\n  });\n});","define(\"dummy/tests/unit/controller-test\", [\"exports\"], function (exports) {});\n// import Controller from 'ember-cli-mirage/controller';\n// import Db from 'ember-cli-mirage/db';\n// import Response from 'ember-cli-mirage/response';\n\n// import {module, test} from 'qunit';\n\n// var contacts = [{id: 1, name: 'Link', address_ids: [1]}, {id: 2, name: 'Zelda', address_ids: [2]}];\n// var addresses = [{id: 1, name: '123 Hyrule Way', contact_id: 1}, {id: 2, name: '456 Hyrule Way', contact_id: 2}];\n// var db;\n// module('mirage:controller', {\n//   beforeEach: function() {\n//     db = new Db();\n//     db.createCollections('contacts', 'addresses');\n//     db.contacts.insert(contacts);\n//     db.addresses.insert(addresses);\n\n//     var serializerDouble = {\n//       serialize: function(res) {return res; }\n//     };\n//     this.controller = new Controller(serializerDouble);\n//   }\n// });\n\n// test(\"function handler works\", function(assert) {\n//   var response = this.controller.handle('get', function(db, request) {\n//     return db.contacts;\n//   }, db, {params: {id: 1}});\n\n//   assert.deepEqual(response[2], contacts);\n// });\n\n// test(\"function handler works with custom response\", function(assert) {\n//   var response = this.controller.handle('get', function(db, request) {\n//     return new Response(201, {some: 'header'}, {some: 'data'});\n//   }, db);\n\n//   assert.deepEqual(response, [201, {some: 'header'}, {some: 'data'}]);\n// });\n\n// test('its default response is 200 if the verb is get', function(assert) {\n//   var response = this.controller.handle('get', {});\n//   assert.equal(response[0], 200);\n// });\n\n// test('its default response is 204 if the verb is put and the response is empty', function(assert) {\n//   var response = this.controller.handle('put', {});\n//   assert.equal(response[0], 204);\n// });\n\n// test('its default response is 200 if the verb is put and the response is not empty and no specific code passed', function(assert) {\n//   var response = this.controller.handle('put', function() {\n//     return { text: 'thanks' };\n//   });\n//   assert.equal(response[0], 200, 'Returning a non-empty object changes the default code to 200');\n\n//   var response2 = this.controller.handle('put', function() {\n//     return [];\n//   });\n//   assert.equal(response2[0], 200, 'An empty array IS NOT an empty response');\n\n//   var response3 = this.controller.handle('put', function() {\n//     return;\n//   });\n//   assert.equal(response3[0], 204, 'undefined is considered an empty response');\n\n//   var response4 = this.controller.handle('put', function() {\n//     return '';\n//   });\n//   assert.equal(response4[0], 204, 'An empty string is considered and empty response');\n\n//   var response5 = this.controller.handle('put', function() {\n//     return;\n//   }, 204);\n//   assert.equal(response5[0], 204, 'If the response code is forced, that takes precedence');\n\n//   var response6 = this.controller.handle('put', function() {\n//     return {};\n//   }, 204);\n//   assert.equal(response6[0], 204, 'An empty object is considered and empty response');\n// });\n\n// test('its default response is 201 if the verb is post', function(assert) {\n//   var response = this.controller.handle('put', {});\n//   assert.equal(response[0], 204);\n// });\n\n// test('its default response is 204 if the verb is delete and the response is empty', function(assert) {\n//   var response = this.controller.handle('delete', {});\n//   assert.equal(response[0], 204);\n// });\n\n// test('its default response is 200 if the verb is delete and the response is not empty and no specific code passed', function(assert) {\n//   var response = this.controller.handle('delete', function() {\n//     return { text: 'thanks' };\n//   });\n//   assert.equal(response[0], 200, 'Returning a non-empty object changes the default code to 200');\n\n//   var response2 = this.controller.handle('delete', function() {\n//     return [];\n//   });\n//   assert.equal(response2[0], 200, 'An empty array IS NOT an empty response');\n\n//   var response3 = this.controller.handle('delete', function() {\n//     return;\n//   });\n//   assert.equal(response3[0], 204, 'undefined is considered an empty response');\n\n//   var response4 = this.controller.handle('delete', function() {\n//     return '';\n//   });\n//   assert.equal(response4[0], 204, 'An empty string is considered and empty response');\n\n//   var response5 = this.controller.handle('delete', function() {\n//     return;\n//   }, 204);\n//   assert.equal(response5[0], 204, 'If the response code is forced, that takes precedence');\n\n//   var response6 = this.controller.handle('delete', function() {\n//     return {};\n//   }, 204);\n//   assert.equal(response6[0], 204, 'An empty object is considered and empty response');\n// });\n\n// // TODO: Use spies to ensure get#shorthand is called with appropriate args\n// // module('mirage:controller#get');\n// // module('mirage:controller#post');\n// // module('mirage:controller#put');\n// // module('mirage:controller#delete');","define('dummy/tests/unit/controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controller-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/db-test', ['exports', 'ember-cli-mirage/db', 'qunit'], function (exports, _emberCliMirageDb, _qunit) {\n\n  var db = undefined;\n  (0, _qunit.module)('Unit | Db');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    db = new _emberCliMirageDb['default']();\n    assert.ok(db);\n  });\n\n  (0, _qunit.test)('it can load data on instantiation', function (assert) {\n    db = new _emberCliMirageDb['default']({\n      users: [{ id: 1, name: 'Link' }],\n      addresses: [{ id: 1, name: '123 Hyrule Way' }, { id: 2, name: 'Lorem ipsum' }]\n    });\n\n    assert.equal(db.users.length, 1);\n    assert.equal(db.addresses.length, 2);\n  });\n\n  (0, _qunit.test)('it can empty its data', function (assert) {\n    db = new _emberCliMirageDb['default']({\n      users: [{ id: 1, name: 'Link' }],\n      addresses: [{ id: 1, name: '123 Hyrule Way' }, { id: 2, name: 'Lorem ipsum' }]\n    });\n\n    db.emptyData();\n\n    assert.equal(db.users.length, 0);\n    assert.equal(db.addresses.length, 0);\n  });\n\n  (0, _qunit.module)('Unit | Db #createCollection', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can create an empty collection', function (assert) {\n    db.createCollection('contacts');\n\n    assert.ok(db.contacts);\n  });\n\n  (0, _qunit.test)('it can create many collections', function (assert) {\n    db.createCollections('contacts', 'addresses');\n\n    assert.ok(db.contacts);\n    assert.ok(db.addresses);\n  });\n\n  (0, _qunit.module)('Unit | Db #loadData', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can load an object of data', function (assert) {\n    var data = {\n      contacts: [{ id: '1', name: 'Link' }],\n      addresses: [{ id: '1', name: '123 Hyrule Way' }]\n    };\n    db.loadData(data);\n\n    assert.deepEqual(db.contacts, data.contacts);\n    assert.deepEqual(db.addresses, data.addresses);\n  });\n\n  (0, _qunit.module)('Unit | Db #all', {\n    beforeEach: function beforeEach() {\n      this.data = {\n        contacts: [{ id: '1', name: 'Link' }],\n        addresses: [{ id: '1', name: '123 Hyrule Way' }]\n      };\n\n      db = new _emberCliMirageDb['default'](this.data);\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can return a collection', function (assert) {\n    assert.deepEqual(db.contacts, this.data.contacts);\n    assert.deepEqual(db.addresses, this.data.addresses);\n  });\n\n  (0, _qunit.test)('the collection is a copy', function (assert) {\n    var _db = db;\n    var contacts = _db.contacts;\n\n    assert.deepEqual(contacts, this.data.contacts);\n    contacts[0].name = 'Zelda';\n\n    assert.deepEqual(db.contacts, this.data.contacts);\n  });\n\n  (0, _qunit.module)('Unit | Db #insert', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n    },\n\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it inserts an object and returns it', function (assert) {\n    var link = db.contacts.insert({ name: 'Link' });\n    var expectedRecord = {\n      id: '1',\n      name: 'Link'\n    };\n\n    assert.deepEqual(db.contacts, [expectedRecord]);\n    assert.deepEqual(link, expectedRecord);\n  });\n\n  (0, _qunit.test)('it returns a copy', function (assert) {\n    var link = db.contacts.insert({ name: 'Link' });\n    var expectedRecord = {\n      id: '1',\n      name: 'Link'\n    };\n\n    assert.deepEqual(link, expectedRecord);\n\n    link.name = 'Young link';\n\n    assert.deepEqual(db.contacts.find(1), expectedRecord);\n  });\n\n  (0, _qunit.test)('it can insert objects sequentially', function (assert) {\n    db.contacts.insert({ name: 'Link' });\n    db.contacts.insert({ name: 'Ganon' });\n\n    var records = [{ id: '1', name: 'Link' }, { id: '2', name: 'Ganon' }];\n\n    assert.deepEqual(db.contacts, records);\n  });\n\n  (0, _qunit.test)('it does not add an id if present', function (assert) {\n    var attrs = { id: '5', name: 'Link' };\n\n    db.contacts.insert(attrs);\n\n    assert.deepEqual(db.contacts, [attrs]);\n  });\n\n  (0, _qunit.test)('it can insert an array and return it', function (assert) {\n    db.contacts.insert({ name: 'Link' });\n\n    var contacts = db.contacts.insert([{ name: 'Zelda' }, { name: 'Ganon' }]);\n\n    assert.deepEqual(db.contacts, [{ id: '1', name: 'Link' }, { id: '2', name: 'Zelda' }, { id: '3', name: 'Ganon' }]);\n    assert.deepEqual(contacts, [{ id: '2', name: 'Zelda' }, { id: '3', name: 'Ganon' }]);\n  });\n\n  (0, _qunit.test)('it does not add ids to array data if present', function (assert) {\n    db.contacts.insert([{ id: 2, name: 'Link' }, { id: 1, name: 'Ganon' }]);\n\n    assert.deepEqual(db.contacts, [{ id: '1', name: 'Ganon' }, { id: '2', name: 'Link' }]);\n  });\n\n  (0, _qunit.test)('it can insert a record with an id of 0', function (assert) {\n    db.contacts.insert({ id: 0, name: 'Link' });\n\n    assert.deepEqual(db.contacts, [{ id: '0', name: 'Link' }]);\n  });\n\n  (0, _qunit.test)('IDs increment correctly, even after a record is removed', function (assert) {\n    var records = db.contacts.insert([{ name: 'Link' }, { name: 'Ganon' }]);\n\n    db.contacts.remove(records[0]);\n\n    var record = db.contacts.insert({ name: 'Zelda' });\n\n    assert.equal(record.id, 3);\n  });\n\n  (0, _qunit.test)('inserting a record with an already used ID throws an error', function (assert) {\n    assert.expect(2);\n\n    db.contacts.insert({ id: 1, name: 'Duncan McCleod' });\n\n    assert.throws(function () {\n      db.contacts.insert({ id: 1, name: 'Duncan McCleod' });\n    });\n\n    db.contacts.insert({ id: 'atp', name: 'Adenosine Triphosphate' });\n\n    assert.throws(function () {\n      db.contacts.insert({ id: 'atp', name: 'Adenosine Triphosphate' });\n    });\n  });\n\n  (0, _qunit.test)('tracks the correct IDs being used', function (assert) {\n    db.contacts.insert({ name: 'Vegeta' });\n    db.contacts.insert({ id: 2, name: 'Krilli' });\n\n    assert.equal(db.contacts.length, 2);\n  });\n\n  (0, _qunit.module)('Unit | Db #findBy', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ name: 'Zelda' }, { name: 'Link' }, { name: 'Epona', race: 'Horse' }, { name: 'Epona', race: 'Centaur' }, { id: 'abc', name: 'Ganon' }]);\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('returns a record that matches the given name', function (assert) {\n    var contact = db.contacts.findBy({ 'name': 'Link' });\n\n    assert.deepEqual(contact, { id: '2', name: 'Link' });\n  });\n\n  (0, _qunit.test)('returns a copy not a reference', function (assert) {\n    var contact = db.contacts.findBy({ 'name': 'Link' });\n\n    contact.name = 'blah';\n\n    assert.deepEqual(db.contacts.find(2), { id: '2', name: 'Link' });\n  });\n\n  (0, _qunit.test)('returns the first record matching the criteria', function (assert) {\n    var contact = db.contacts.findBy({ 'name': 'Epona' });\n\n    assert.deepEqual(contact, { id: '3', name: 'Epona', race: 'Horse' });\n  });\n\n  (0, _qunit.test)('returns a record only matching multiple criteria', function (assert) {\n    var contact = db.contacts.findBy({ 'name': 'Epona', 'race': 'Centaur' });\n\n    assert.deepEqual(contact, { id: '4', name: 'Epona', race: 'Centaur' });\n  });\n\n  (0, _qunit.test)('returns null when no record is found', function (assert) {\n    var contact = db.contacts.findBy({ 'name': 'Fi' });\n\n    assert.equal(contact, null);\n  });\n\n  (0, _qunit.module)('Unit | Db #find', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ name: 'Zelda' }, { name: 'Link' }, { id: 'abc', name: 'Ganon' }]);\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('returns a record that matches a numerical id', function (assert) {\n    var contact = db.contacts.find(2);\n\n    assert.deepEqual(contact, { id: '2', name: 'Link' });\n  });\n\n  (0, _qunit.test)('returns a copy not a reference', function (assert) {\n    var contact = db.contacts.find(2);\n\n    assert.deepEqual(contact, { id: '2', name: 'Link' });\n\n    contact.name = 'blah';\n\n    assert.deepEqual(db.contacts.find(2), { id: '2', name: 'Link' });\n  });\n\n  (0, _qunit.test)('returns a record that matches a string id', function (assert) {\n    var contact = db.contacts.find('abc');\n\n    assert.deepEqual(contact, { id: 'abc', name: 'Ganon' });\n  });\n\n  (0, _qunit.test)('returns multiple record that matches an array of ids', function (assert) {\n    var contacts = db.contacts.find([1, 2]);\n\n    assert.deepEqual(contacts, [{ id: '1', name: 'Zelda' }, { id: '2', name: 'Link' }]);\n  });\n\n  (0, _qunit.test)('returns a record whose id is a string that start with numbers', function (assert) {\n    db.contacts.insert({\n      id: '123-456',\n      name: 'Epona'\n    });\n\n    var contact = db.contacts.find('123-456');\n    assert.deepEqual(contact, { id: '123-456', name: 'Epona' });\n  });\n\n  (0, _qunit.test)('returns multiple record that match an array of ids', function (assert) {\n    var contacts = db.contacts.find([1, 2]);\n\n    assert.deepEqual(contacts, [{ id: '1', name: 'Zelda' }, { id: '2', name: 'Link' }]);\n  });\n\n  (0, _qunit.test)('returns an empty array when it doesnt find multiple ids', function (assert) {\n    var contacts = db.contacts.find([99, 100]);\n\n    assert.deepEqual(contacts, []);\n  });\n\n  (0, _qunit.module)('Unit | Db #where', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ name: 'Link', evil: false, age: 17 }, { name: 'Zelda', evil: false, age: 17 }, { name: 'Ganon', evil: true, age: 45 }]);\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('returns an array of records that match the query', function (assert) {\n    var result = db.contacts.where({ evil: true });\n\n    assert.deepEqual(result, [{ id: '3', name: 'Ganon', evil: true, age: 45 }]);\n  });\n\n  (0, _qunit.test)('it coerces query params to strings', function (assert) {\n    var result = db.contacts.where({ age: '45' });\n\n    assert.deepEqual(result, [{ id: '3', name: 'Ganon', evil: true, age: 45 }]);\n  });\n\n  (0, _qunit.test)('returns a copy, not a referecne', function (assert) {\n    var result = db.contacts.where({ evil: true });\n\n    assert.deepEqual(result, [{ id: '3', name: 'Ganon', evil: true, age: 45 }]);\n\n    result[0].evil = false;\n\n    assert.deepEqual(db.contacts.where({ evil: true }), [{ id: '3', name: 'Ganon', evil: true, age: 45 }]);\n  });\n\n  (0, _qunit.test)('returns an empty array if no records match the query', function (assert) {\n    var result = db.contacts.where({ name: 'Link', evil: true });\n\n    assert.deepEqual(result, []);\n  });\n\n  (0, _qunit.test)('accepts a filter function', function (assert) {\n    var result = db.contacts.where(function (record) {\n      return record.age === 45;\n    });\n\n    assert.deepEqual(result, [{ id: '3', name: 'Ganon', evil: true, age: 45 }]);\n  });\n\n  (0, _qunit.module)('Unit | Db #update', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ name: 'Link', evil: false }, { name: 'Zelda', evil: false }, { name: 'Ganon', evil: true }, { id: '123-abc', name: 'Epona', evil: false }]);\n    },\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can update the whole collection', function (assert) {\n    db.contacts.update({ name: 'Sam', evil: false });\n\n    var actualContacts = db.contacts;\n\n    var expectedContacts = [{ id: '123-abc', name: 'Sam', evil: false }, { id: '1', name: 'Sam', evil: false }, { id: '2', name: 'Sam', evil: false }, { id: '3', name: 'Sam', evil: false }];\n\n    assert.deepEqual(actualContacts, expectedContacts, [actualContacts.map(function (r) {\n      return r.id;\n    }).join(','), expectedContacts.map(function (r) {\n      return r.id;\n    }).join(',')].join(';'));\n  });\n\n  (0, _qunit.test)('it can update a record by id', function (assert) {\n    db.contacts.update(3, { name: 'Ganondorf', evil: false });\n    var ganon = db.contacts.find(3);\n\n    assert.deepEqual(ganon, { id: '3', name: 'Ganondorf', evil: false });\n  });\n\n  (0, _qunit.test)('it can update a record by id when the id is a string', function (assert) {\n    db.contacts.update('123-abc', { evil: true });\n    var epona = db.contacts.find('123-abc');\n\n    assert.deepEqual(epona, { id: '123-abc', name: 'Epona', evil: true });\n  });\n\n  (0, _qunit.test)('it can update multiple records by ids', function (assert) {\n    db.contacts.update([1, 2], { evil: true });\n    var link = db.contacts.find(1);\n    var zelda = db.contacts.find(2);\n\n    assert.equal(link.evil, true);\n    assert.equal(zelda.evil, true);\n  });\n\n  (0, _qunit.test)('it can update records by query', function (assert) {\n    db.contacts.update({ evil: false }, { name: 'Sam' });\n\n    assert.deepEqual(db.contacts, [{ id: '123-abc', name: 'Sam', evil: false }, { id: '1', name: 'Sam', evil: false }, { id: '2', name: 'Sam', evil: false }, { id: '3', name: 'Ganon', evil: true }]);\n  });\n\n  (0, _qunit.test)('updating a single record returns that record', function (assert) {\n    var ganon = db.contacts.update(3, { name: 'Ganondorf' });\n    assert.deepEqual(ganon, { id: '3', name: 'Ganondorf', evil: true });\n  });\n\n  (0, _qunit.test)('updating a collection returns the updated records', function (assert) {\n    var characters = db.contacts.update({ evil: true });\n    assert.deepEqual(characters, [{ id: '123-abc', name: 'Epona', evil: true }, { id: '1', name: 'Link', evil: true }, { id: '2', name: 'Zelda', evil: true }]);\n  });\n\n  (0, _qunit.test)('updating multiple records returns the updated records', function (assert) {\n    var characters = db.contacts.update({ evil: false }, { evil: true });\n    assert.deepEqual(characters, [{ id: '123-abc', name: 'Epona', evil: true }, { id: '1', name: 'Link', evil: true }, { id: '2', name: 'Zelda', evil: true }]);\n  });\n\n  (0, _qunit.test)('throws when updating an ID is attempted', function (assert) {\n    assert.expect(1);\n\n    assert.throws(function () {\n      db.contacts.update(1, { id: 3 });\n    });\n  });\n\n  (0, _qunit.module)('Unit | Db #remove', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ name: 'Link', evil: false }, { name: 'Zelda', evil: false }, { name: 'Ganon', evil: true }, { id: '123-abc', name: 'Epona', evil: false }]);\n    },\n\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can remove an entire collection', function (assert) {\n    db.contacts.remove();\n\n    assert.deepEqual(db.contacts, []);\n  });\n\n  (0, _qunit.test)('it can remove a single record by id', function (assert) {\n    db.contacts.remove(1);\n\n    assert.deepEqual(db.contacts, [{ id: '123-abc', name: 'Epona', evil: false }, { id: '2', name: 'Zelda', evil: false }, { id: '3', name: 'Ganon', evil: true }]);\n  });\n\n  (0, _qunit.test)('it can remove a single record when the id is a string', function (assert) {\n    db.contacts.remove('123-abc');\n\n    assert.deepEqual(db.contacts, [{ id: '1', name: 'Link', evil: false }, { id: '2', name: 'Zelda', evil: false }, { id: '3', name: 'Ganon', evil: true }]);\n  });\n\n  (0, _qunit.test)('it can remove multiple records by ids', function (assert) {\n    db.contacts.remove([1, 2]);\n\n    assert.deepEqual(db.contacts, [{ id: '123-abc', name: 'Epona', evil: false }, { id: '3', name: 'Ganon', evil: true }]);\n  });\n\n  (0, _qunit.test)('it can remove multiple records by query', function (assert) {\n    db.contacts.remove({ evil: false });\n\n    assert.deepEqual(db.contacts, [{ id: '3', name: 'Ganon', evil: true }]);\n  });\n\n  (0, _qunit.test)('it can add a record after removing all records', function (assert) {\n    db.contacts.remove();\n    db.contacts.insert({ name: 'Foo' });\n\n    assert.equal(db.contacts.length, 1);\n    assert.deepEqual(db.contacts, [{ id: '1', name: 'Foo' }]);\n  });\n\n  (0, _qunit.module)('Unit | Db #firstOrCreate', {\n    beforeEach: function beforeEach() {\n      db = new _emberCliMirageDb['default']();\n      db.createCollection('contacts');\n      db.contacts.insert([{ id: 1, name: 'Link', evil: false }, { id: 2, name: 'Zelda', evil: false }, { id: 3, name: 'Ganon', evil: true }]);\n    },\n\n    afterEach: function afterEach() {\n      db.emptyData();\n    }\n  });\n\n  (0, _qunit.test)('it can find the first record available from the query', function (assert) {\n    var record = db.contacts.firstOrCreate({ name: 'Link' });\n\n    assert.deepEqual(record, { id: '1', name: 'Link', evil: false });\n  });\n\n  (0, _qunit.test)('it creates a new record from query + attrs if none found', function (assert) {\n    var record = db.contacts.firstOrCreate({ name: 'Mario' }, { evil: false });\n\n    assert.equal(record.name, 'Mario');\n    assert.equal(record.evil, false);\n    assert.ok(record.id);\n  });\n\n  (0, _qunit.test)('does not require attrs', function (assert) {\n    var record = db.contacts.firstOrCreate({ name: 'Luigi' });\n\n    assert.equal(record.name, 'Luigi');\n    assert.ok(record.id);\n  });\n});","define('dummy/tests/unit/db-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/db-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/db-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/db/identity-manager-test', ['exports', 'ember-cli-mirage/db-collection', 'qunit'], function (exports, _emberCliMirageDbCollection, _qunit) {\n\n  (0, _qunit.module)('Unit | DB | IdentityManager');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    assert.ok(manager);\n  });\n\n  (0, _qunit.test)('fetch returns the latest number', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n\n    assert.equal(manager.fetch(), 1);\n    assert.equal(manager.fetch(), 2);\n    assert.equal(manager.fetch(), 3);\n  });\n\n  (0, _qunit.test)('get returns the upcoming id used for fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n\n    assert.equal(manager.fetch(), 1);\n    assert.equal(manager.get(), 2);\n    assert.equal(manager.fetch(), 2);\n  });\n\n  (0, _qunit.test)('set indicates an id is being used', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set('abc');\n\n    assert.throws(function () {\n      manager.set('abc');\n    }, /already been used/);\n  });\n\n  (0, _qunit.test)('a numerical value passed into set affects future ids used by fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set(5);\n\n    assert.equal(manager.fetch(), 6);\n    assert.equal(manager.fetch(), 7);\n  });\n\n  (0, _qunit.test)('multiple numerical values passed into set affects future ids used by fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set(5);\n    manager.set(6);\n\n    assert.equal(manager.fetch(), 7);\n    assert.equal(manager.fetch(), 8);\n  });\n\n  (0, _qunit.test)('an int as a string passed into set affects future ids used by fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set('5');\n\n    assert.equal(manager.fetch(), 6);\n    assert.equal(manager.fetch(), 7);\n  });\n\n  (0, _qunit.test)('multiple ints as a string passed into set affects future ids used by fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set('5');\n    manager.set('6');\n\n    assert.equal(manager.fetch(), 7);\n    assert.equal(manager.fetch(), 8);\n  });\n\n  (0, _qunit.test)('a string value that doesn\\'t parse as an int passed into set doesn\\'t affect future ids used by fetch', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set('123-abc');\n\n    assert.equal(manager.fetch(), 1);\n    assert.equal(manager.fetch(), 2);\n  });\n\n  (0, _qunit.test)('reset clears the managers memory', function (assert) {\n    var manager = new _emberCliMirageDbCollection.IdentityManager();\n    manager.set('abc');\n    manager.reset();\n    manager.set('abc');\n\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/db/identity-manager-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/db/identity-manager-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/db/identity-manager-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/factory-test', ['exports', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Unit | Factory');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    assert.ok(_emberCliMirage['default'].Factory);\n  });\n\n  (0, _qunit.test)('the base class builds empty objects', function (assert) {\n    var f = new _emberCliMirage['default'].Factory();\n    var data = f.build();\n\n    assert.deepEqual(data, {});\n  });\n\n  (0, _qunit.test)('a noop extension builds empty objects', function (assert) {\n    var EmptyFactory = _emberCliMirage['default'].Factory.extend();\n    var f = new EmptyFactory();\n    var data = f.build();\n\n    assert.deepEqual(data, {});\n  });\n\n  (0, _qunit.test)('it works with strings, numbers and booleans', function (assert) {\n    var AFactory = _emberCliMirage['default'].Factory.extend({\n      name: 'Sam',\n      age: 28,\n      alive: true\n    });\n\n    var f = new AFactory();\n    var data = f.build();\n\n    assert.deepEqual(data, { name: 'Sam', age: 28, alive: true });\n  });\n\n  (0, _qunit.test)('it supports inheritance', function (assert) {\n    var PersonFactory = _emberCliMirage['default'].Factory.extend({\n      species: 'human'\n    });\n    var ManFactory = PersonFactory.extend({\n      gender: 'male'\n    });\n    var SamFactory = ManFactory.extend({\n      name: 'Sam'\n    });\n\n    var p = new PersonFactory();\n    var m = new ManFactory();\n    var s = new SamFactory();\n\n    assert.deepEqual(p.build(), { species: 'human' });\n    assert.deepEqual(m.build(), { species: 'human', gender: 'male' });\n    assert.deepEqual(s.build(), { species: 'human', gender: 'male', name: 'Sam' });\n  });\n\n  (0, _qunit.test)('it can use sequences', function (assert) {\n    var PostFactory = _emberCliMirage['default'].Factory.extend({\n      likes: function likes(i) {\n        return 5 * i;\n      }\n    });\n\n    var p = new PostFactory();\n    var post1 = p.build(1);\n    var post2 = p.build(2);\n\n    assert.deepEqual(post1, { likes: 5 });\n    assert.deepEqual(post2, { likes: 10 });\n  });\n\n  (0, _qunit.test)('it can reuse static properties', function (assert) {\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      foo: 5,\n      bar: function bar(i) {\n        return this.foo * i;\n      }\n    });\n\n    var b = new BazFactory();\n    var baz1 = b.build(1);\n    var baz2 = b.build(2);\n\n    assert.deepEqual(baz1, { foo: 5, bar: 5 });\n    assert.deepEqual(baz2, { foo: 5, bar: 10 });\n  });\n\n  (0, _qunit.test)('it can reuse dynamic properties', function (assert) {\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      foo: function foo(i) {\n        return 5 * i;\n      },\n      bar: function bar() {\n        return this.foo * 2;\n      }\n    });\n\n    var b = new BazFactory();\n    var baz1 = b.build(1);\n    var baz2 = b.build(2);\n\n    assert.deepEqual(baz1, { foo: 5, bar: 10 });\n    assert.deepEqual(baz2, { foo: 10, bar: 20 });\n  });\n\n  (0, _qunit.test)('it can have dynamic properties that depend on another', function (assert) {\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      name: function name() {\n        return 'foo';\n      },\n      bar: function bar() {\n        return this.name.substr(1);\n      }\n    });\n\n    var b = new BazFactory();\n    var baz1 = b.build(1);\n\n    assert.deepEqual(baz1, { name: 'foo', bar: 'oo' });\n  });\n\n  (0, _qunit.test)('it can reference properties out of order', function (assert) {\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      bar: function bar() {\n        return this.foo + 2;\n      },\n\n      baz: 6,\n\n      foo: function foo(i) {\n        return this.baz * i;\n      }\n    });\n\n    var b = new BazFactory();\n    var baz1 = b.build(1);\n    var baz2 = b.build(2);\n\n    assert.deepEqual(baz1, { baz: 6, foo: 6, bar: 8 });\n    assert.deepEqual(baz2, { baz: 6, foo: 12, bar: 14 });\n  });\n\n  (0, _qunit.test)('it can reference multiple properties in any order', function (assert) {\n    var FooFactory = _emberCliMirage['default'].Factory.extend({\n      foo: function foo() {\n        return this.bar + this.baz;\n      },\n\n      bar: 6,\n\n      baz: 10\n    });\n\n    var BarFactory = _emberCliMirage['default'].Factory.extend({\n      bar: 6,\n\n      foo: function foo() {\n        return this.bar + this.baz;\n      },\n\n      baz: 10\n    });\n\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      bar: 6,\n\n      baz: 10,\n\n      foo: function foo() {\n        return this.bar + this.baz;\n      }\n    });\n\n    var Foo = new FooFactory();\n    var Bar = new BarFactory();\n    var Baz = new BazFactory();\n\n    var foo = Foo.build(1);\n    var bar = Bar.build(1);\n    var baz = Baz.build(1);\n\n    assert.deepEqual(foo, { foo: 16, bar: 6, baz: 10 });\n    assert.deepEqual(bar, { foo: 16, bar: 6, baz: 10 });\n    assert.deepEqual(baz, { foo: 16, bar: 6, baz: 10 });\n  });\n\n  (0, _qunit.test)('it can reference properties on complex object', function (assert) {\n    var AbcFactory = _emberCliMirage['default'].Factory.extend({\n      a: function a(i) {\n        return this.b + i;\n      },\n      b: function b() {\n        return this.c + 1;\n      },\n      c: function c() {\n        return this.f + 1;\n      },\n      d: function d(i) {\n        return this.e + i;\n      },\n      e: function e() {\n        return this.c + 1;\n      },\n      f: 1,\n      g: 2,\n      h: 3\n    });\n\n    var b = new AbcFactory();\n    var abc1 = b.build(1);\n    var abc2 = b.build(2);\n\n    assert.deepEqual(abc1, { a: 4, b: 3, c: 2, d: 4, e: 3, f: 1, g: 2, h: 3 });\n    assert.deepEqual(abc2, { a: 5, b: 3, c: 2, d: 5, e: 3, f: 1, g: 2, h: 3 });\n  });\n\n  (0, _qunit.test)('throws meaningfull exception on circular reference', function (assert) {\n    var BazFactory = _emberCliMirage['default'].Factory.extend({\n      bar: function bar() {\n        return this.foo;\n      },\n\n      foo: function foo() {\n        return this.bar;\n      }\n    });\n\n    var b = new BazFactory();\n    assert.throws(function () {\n      b.build(1);\n    }, function (e) {\n      return e.toString() === 'Error: Cyclic dependency in properties [\"foo\",\"bar\"]';\n    });\n  });\n\n  (0, _qunit.test)('#build skips invoking `afterCreate`', function (assert) {\n    var skipped = true;\n    var PostFactory = _emberCliMirage['default'].Factory.extend({\n      afterCreate: function afterCreate() {\n        skipped = false;\n      }\n    });\n\n    var factory = new PostFactory();\n    var post = factory.build(0);\n\n    assert.ok(skipped, 'skips invoking `afterCreate`');\n    assert.equal(typeof post.afterCreate, 'undefined', 'does not build `afterCreate` attribute');\n  });\n\n  (0, _qunit.test)('extractAfterCreateCallbacks returns all afterCreate callbacks from factory with the base one being first', function (assert) {\n    var PostFactory = _emberCliMirage['default'].Factory.extend({\n      published: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate() {\n          return 'from published';\n        }\n      }),\n\n      withComments: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate() {\n          return 'from withComments';\n        }\n      }),\n\n      otherTrait: (0, _emberCliMirage.trait)({}),\n\n      afterCreate: function afterCreate() {\n        return 'from base';\n      }\n    });\n\n    var callbacks = PostFactory.extractAfterCreateCallbacks();\n    assert.equal(callbacks.length, 3);\n    assert.deepEqual(callbacks.map(function (cb) {\n      return cb();\n    }), ['from base', 'from published', 'from withComments']);\n  });\n\n  (0, _qunit.test)('extractAfterCreateCallbacks filters traits from which the afterCreate callbacks will be extracted from', function (assert) {\n    var PostFactory = _emberCliMirage['default'].Factory.extend({\n      published: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate() {\n          return 'from published';\n        }\n      }),\n\n      withComments: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate() {\n          return 'from withComments';\n        }\n      }),\n\n      otherTrait: (0, _emberCliMirage.trait)({}),\n\n      afterCreate: function afterCreate() {\n        return 'from base';\n      }\n    });\n\n    assert.equal(PostFactory.extractAfterCreateCallbacks({ traits: [] }).length, 1);\n    assert.deepEqual(PostFactory.extractAfterCreateCallbacks({ traits: [] }).map(function (cb) {\n      return cb();\n    }), ['from base']);\n\n    assert.equal(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments'] }).length, 2);\n    assert.deepEqual(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments'] }).map(function (cb) {\n      return cb();\n    }), ['from base', 'from withComments']);\n\n    assert.equal(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments', 'published'] }).length, 3);\n    assert.deepEqual(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments', 'published'] }).map(function (cb) {\n      return cb();\n    }), ['from base', 'from withComments', 'from published']);\n\n    assert.equal(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments', 'otherTrait'] }).length, 2);\n    assert.deepEqual(PostFactory.extractAfterCreateCallbacks({ traits: ['withComments', 'otherTrait'] }).map(function (cb) {\n      return cb();\n    }), ['from base', 'from withComments']);\n  });\n\n  (0, _qunit.test)('isTrait returns true if there is a trait with given name', function (assert) {\n    var PostFactory = _emberCliMirage['default'].Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true\n      }),\n\n      someNestedObject: {\n        value: 'nested'\n      }\n    });\n\n    assert.ok(!PostFactory.isTrait('title'));\n    assert.ok(PostFactory.isTrait('published'));\n    assert.ok(!PostFactory.isTrait('someNestedObject'));\n    assert.ok(!PostFactory.isTrait('notdefined'));\n  });\n});","define('dummy/tests/unit/factory-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/factory-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/factory-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/faker-test', ['exports', 'ember-cli-mirage/faker', 'qunit'], function (exports, _emberCliMirageFaker, _qunit) {\n\n  (0, _qunit.module)('Unit | Faker');\n\n  (0, _qunit.test)('#cycle - returns a function', function (assert) {\n    var callback = _emberCliMirageFaker['default'].list.cycle('first', 'second');\n    assert.ok(typeof callback === 'function', 'result is a function');\n  });\n\n  (0, _qunit.test)('#cycle - cycles the passed data', function (assert) {\n    var callback = _emberCliMirageFaker['default'].list.cycle('first', 'second', 'third');\n\n    assert.equal(callback(0), 'first', 'return the first result for sequence 0');\n    assert.equal(callback(1), 'second', 'return the first result for sequence 1');\n    assert.equal(callback(2), 'third', 'return the first result for sequence 2');\n    assert.equal(callback(3), 'first', 'return the first result for sequence 3');\n  });\n\n  (0, _qunit.test)('#random - returns random element from a list', function (assert) {\n    var callback = _emberCliMirageFaker['default'].list.random('first', 'second', 'third');\n\n    assert.notEqual(['first', 'second', 'third'].indexOf(callback()), -1, 'returns random value');\n  });\n\n  (0, _qunit.test)('#range - creates a random number in a range', function (assert) {\n    var min = 0;\n    var max = 10;\n\n    var callback = _emberCliMirageFaker['default'].random.number.range(min, max);\n    assert.equal(callback() >= min, true, 'result is higher or equal than low value');\n    assert.equal(callback() <= max, true, 'result is lower or equal than high value');\n  });\n});","define('dummy/tests/unit/faker-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/faker-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/faker-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/import-files-test-node', ['exports'], function (exports) {\n  /* eslint-env node */\n\n  var expect = require('chai').expect;\n  var EmberAddon = require('ember-cli/lib/broccoli/ember-addon');\n  var _ = require('lodash');\n\n  describe('import files', function () {\n    this.timeout(15000);\n\n    afterEach(function () {\n      delete process.env.EMBER_ENV;\n    });\n\n    it('doesn\\'t include third party libraries in production environment by default', function () {\n      process.env.EMBER_ENV = 'production';\n      var addon = new EmberAddon();\n\n      expect(_.values(addon._scriptOutputFiles)[0]).to.not.include.members(['vendor/fake-xml-http-request/fake_xml_http_request.js', 'vendor/route-recognizer/dist/route-recognizer.js', 'vendor/pretender/pretender.js', 'vendor/faker/build/build/faker.js', 'vendor/ember-cli-mirage/pretender-shim.js']);\n    });\n\n    ['development', 'test'].forEach(function (environment) {\n      it('includes third party libraries in ' + environment + ' environment by default', function () {\n        process.env.EMBER_ENV = environment;\n        var addon = new EmberAddon();\n\n        expect(_.values(addon._scriptOutputFiles)[0]).to.include.members(['vendor/fake-xml-http-request/fake_xml_http_request.js', 'vendor/route-recognizer/dist/route-recognizer.js', 'vendor/pretender/pretender.js', 'vendor/faker/build/build/faker.js', 'vendor/ember-cli-mirage/pretender-shim.js']);\n      });\n    });\n\n    it('includes third party libraries in production when enabled is set to true', function () {\n      process.env.EMBER_ENV = 'production';\n      var addon = new EmberAddon({ configPath: 'tests/fixtures/config/environment-production-enabled' });\n\n      expect(_.values(addon._scriptOutputFiles)[0]).to.include.members(['vendor/fake-xml-http-request/fake_xml_http_request.js', 'vendor/route-recognizer/dist/route-recognizer.js', 'vendor/pretender/pretender.js', 'vendor/faker/build/build/faker.js', 'vendor/ember-cli-mirage/pretender-shim.js']);\n    });\n  });\n});","define('dummy/tests/unit/import-files-test-node.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/import-files-test-node.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/import-files-test-node.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/inflector-test', ['exports', 'ember-cli-mirage/utils/inflector', 'qunit'], function (exports, _emberCliMirageUtilsInflector, _qunit) {\n\n  (0, _qunit.module)('Unit | Inflector');\n\n  (0, _qunit.test)('can singularize', function (assert) {\n    assert.equal((0, _emberCliMirageUtilsInflector.singularize)('tests'), 'test');\n    assert.equal((0, _emberCliMirageUtilsInflector.singularize)('watches'), 'watch');\n    assert.equal((0, _emberCliMirageUtilsInflector.singularize)('sheep'), 'sheep');\n  });\n\n  (0, _qunit.test)('can pluralize', function (assert) {\n    assert.equal((0, _emberCliMirageUtilsInflector.pluralize)('test'), 'tests');\n    assert.equal((0, _emberCliMirageUtilsInflector.pluralize)('watch'), 'watches');\n    assert.equal((0, _emberCliMirageUtilsInflector.pluralize)('sheep'), 'sheep');\n  });\n});","define('dummy/tests/unit/inflector-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/inflector-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/inflector-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/model-test', ['exports', 'ember-cli-mirage/orm/model', 'qunit'], function (exports, _emberCliMirageOrmModel, _qunit) {\n\n  (0, _qunit.module)('Unit | Model');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    var model = new _emberCliMirageOrmModel['default']({}, 'user');\n    assert.ok(model);\n  });\n\n  (0, _qunit.test)('it cannot be instantiated without a schema', function (assert) {\n    assert.throws(function () {\n      new _emberCliMirageOrmModel['default']();\n    }, /requires a schema/);\n  });\n\n  (0, _qunit.test)('it cannot be instantiated without a modelName', function (assert) {\n    assert.throws(function () {\n      new _emberCliMirageOrmModel['default']({});\n    }, /requires a modelName/);\n  });\n\n  (0, _qunit.test)('findBelongsToAssociation returns association for given type if defined', function (assert) {\n    var ModelClass = _emberCliMirageOrmModel['default'].extend();\n    var authorAssociationMock = {};\n    ModelClass.prototype.belongsToAssociations = {\n      author: authorAssociationMock\n    };\n\n    assert.equal(ModelClass.findBelongsToAssociation('article'), null);\n    assert.deepEqual(ModelClass.findBelongsToAssociation('author'), authorAssociationMock);\n  });\n});","define('dummy/tests/unit/model-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/model-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/model-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/reference-sort-test', ['exports', 'ember-cli-mirage/utils/reference-sort', 'qunit'], function (exports, _emberCliMirageUtilsReferenceSort, _qunit) {\n\n  (0, _qunit.module)('mirage:reference-sort');\n\n  (0, _qunit.test)('it sorts property references', function (assert) {\n    var sorted = (0, _emberCliMirageUtilsReferenceSort['default'])([['propA'], ['propB', 'propC'], ['propC', 'propA'], ['propD']]);\n\n    assert.deepEqual(sorted, ['propD', 'propA', 'propC', 'propB']);\n  });\n\n  (0, _qunit.test)('it throws on circular dependency', function (assert) {\n    assert.throws(function () {\n      (0, _emberCliMirageUtilsReferenceSort['default'])([['propA', 'propB'], ['propB', 'propA']]);\n    }, function (e) {\n      return e.toString() === 'Error: Cyclic dependency in properties [\"propB\",\"propA\"]';\n    });\n  });\n\n  (0, _qunit.test)('it works with no references', function (assert) {\n    var sorted = (0, _emberCliMirageUtilsReferenceSort['default'])([['propA'], ['propB'], ['propC'], ['propD']]);\n\n    assert.deepEqual(sorted, ['propD', 'propC', 'propB', 'propA']);\n  });\n});","define('dummy/tests/unit/reference-sort-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/reference-sort-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/reference-sort-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/response-test', ['exports', 'ember-cli-mirage/response', 'qunit'], function (exports, _emberCliMirageResponse, _qunit) {\n\n  (0, _qunit.module)('Unit | Response');\n\n  (0, _qunit.test)('it can be instantiated and return a rack response', function (assert) {\n    var response = new _emberCliMirageResponse['default'](404, {}, {});\n\n    assert.ok(response);\n    assert.ok(response.toRackResponse());\n  });\n\n  (0, _qunit.test)('it can be instantiated with just a response code', function (assert) {\n    var response = new _emberCliMirageResponse['default'](404);\n\n    assert.ok(response);\n    assert.ok(response.toRackResponse());\n  });\n});","define('dummy/tests/unit/response-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/response-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/response-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/route-handlers/shorthands/base-test', ['exports', 'ember-cli-mirage/route-handlers/shorthands/base', 'qunit'], function (exports, _emberCliMirageRouteHandlersShorthandsBase, _qunit) {\n\n  (0, _qunit.module)('Unit | Route handlers | Shorthands | BaseShorthandRouteHandler', {\n    beforeEach: function beforeEach() {\n      this.handler = new _emberCliMirageRouteHandlersShorthandsBase['default']();\n      this.request = { params: { id: '' } };\n    }\n  });\n\n  (0, _qunit.test)('it returns a number if it\\'s a number', function (assert) {\n    this.request.params.id = 2;\n    assert.equal(this.handler._getIdForRequest(this.request), 2, 'it returns a number');\n  });\n\n  (0, _qunit.test)('it returns a number if it\\'s a string represented number', function (assert) {\n    this.request.params.id = '2';\n    assert.equal(this.handler._getIdForRequest(this.request), 2, 'it returns a number');\n  });\n\n  (0, _qunit.test)('it returns a string it\\'s a dasherized number', function (assert) {\n    this.request.params.id = '2-1';\n    assert.equal(this.handler._getIdForRequest(this.request), '2-1', 'it returns a number');\n  });\n\n  (0, _qunit.test)('it returns a string if it\\'s a string', function (assert) {\n    this.request.params.id = 'someID';\n    assert.equal(this.handler._getIdForRequest(this.request), 'someID', 'it returns a number');\n  });\n\n  (0, _qunit.test)('getModelClassFromPath works', function (assert) {\n    var urlWithSlash = '/api/fancy-users';\n    var urlWithIdAndSlash = '/api/fancy-users/:id';\n\n    assert.equal(this.handler.getModelClassFromPath(urlWithSlash), 'fancy-user', 'it returns a singular model name');\n    assert.equal(this.handler.getModelClassFromPath(urlWithIdAndSlash, true), 'fancy-user', 'it returns a singular model name');\n  });\n\n  (0, _qunit.test)('it can read the id from the url', function (assert) {\n    var request = { params: { id: 'test-id' } };\n    assert.equal(this.handler._getIdForRequest(request), 'test-id', 'it returns id from url parameters.');\n  });\n\n  (0, _qunit.test)('it can read the id from the request body', function (assert) {\n    var request = { params: {} };\n    var jsonApiDoc = { data: { id: 'jsonapi-id' } };\n    assert.equal(this.handler._getIdForRequest(request, jsonApiDoc), 'jsonapi-id', 'it returns id from json api data.');\n  });\n\n  (0, _qunit.test)('_getAttrsForRequest works with attributes and relationships', function (assert) {\n    var payload = {\n      'data': {\n        'attributes': {\n          'does-mirage': true,\n          'name': 'Sam'\n        },\n        'relationships': {\n          'company': {\n            'data': {\n              'id': '1',\n              'type': 'companies'\n            }\n          },\n          'github-account': {\n            'data': {\n              'id': '1',\n              'type': 'github-accounts'\n            }\n          },\n          'something': {\n            'data': null\n          },\n          'many-things': {\n            'data': []\n          }\n        },\n        'type': 'github-account'\n      }\n    };\n\n    this.handler._getJsonApiDocForRequest = function () {\n      return payload;\n    };\n\n    var attrs = this.handler._getAttrsForRequest(this.request, 'user');\n\n    assert.deepEqual(attrs, {\n      name: 'Sam',\n      doesMirage: true,\n      companyId: '1',\n      githubAccountId: '1',\n      somethingId: null\n    }, 'it normalizes data correctly.');\n  });\n\n  (0, _qunit.test)('_getAttrsForRequest works with just relationships', function (assert) {\n    var payload = {\n      'data': {\n        'relationships': {\n          'company': {\n            'data': {\n              'id': '1',\n              'type': 'companies'\n            }\n          }\n        },\n        'type': 'github-account'\n      }\n    };\n\n    this.handler._getJsonApiDocForRequest = function () {\n      return payload;\n    };\n\n    var attrs = this.handler._getAttrsForRequest(this.request, 'user');\n\n    assert.deepEqual(attrs, {\n      companyId: '1'\n    }, 'it normalizes data correctly.');\n  });\n\n  (0, _qunit.test)('_getAttrsForRequest works with just type', function (assert) {\n    var payload = {\n      'data': {\n        'type': 'github-account'\n      }\n    };\n\n    this.handler._getJsonApiDocForRequest = function (request, modelName) {\n      return payload;\n    };\n\n    var attrs = this.handler._getAttrsForRequest(this.request, 'user');\n\n    assert.deepEqual(attrs, {});\n  });\n});","define('dummy/tests/unit/route-handlers/shorthands/base-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/route-handlers/shorthands/base-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/route-handlers/shorthands/base-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/schema-test', ['exports', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/db', 'ember-cli-mirage', 'qunit'], function (exports, _emberCliMirageOrmSchema, _emberCliMirageDb, _emberCliMirage, _qunit) {\n\n  (0, _qunit.module)('Unit | Schema');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    var dbMock = {};\n    var schema = new _emberCliMirageOrmSchema['default'](dbMock);\n    assert.ok(schema);\n  });\n\n  (0, _qunit.test)('it cannot be instantiated without a db', function (assert) {\n    assert.throws(function () {\n      new _emberCliMirageOrmSchema['default']();\n    }, /requires a db/);\n  });\n\n  (0, _qunit.test)('modelFor returns model for given type if registered', function (assert) {\n    var db = new _emberCliMirageDb['default']();\n    var schema = new _emberCliMirageOrmSchema['default'](db);\n\n    assert.equal(schema.modelFor('article'), null);\n\n    var authorModel = _emberCliMirage.Model.extend({});\n    var articleModel = _emberCliMirage.Model.extend({\n      author: (0, _emberCliMirage.belongsTo)()\n    });\n    schema.registerModel('article', articleModel);\n    schema.registerModel('author', authorModel);\n\n    assert.deepEqual(schema.modelFor('article').foreignKeys, ['authorId']);\n    assert.deepEqual(schema.modelFor('author').foreignKeys, []);\n  });\n});","define('dummy/tests/unit/schema-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/schema-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/schema-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/serializers/active-model-serializer-test', ['exports', 'ember-cli-mirage/serializers/active-model-serializer', 'qunit'], function (exports, _emberCliMirageSerializersActiveModelSerializer, _qunit) {\n\n  (0, _qunit.module)('Unit | Serializers | ActiveModelSerializer', {\n    beforeEach: function beforeEach() {\n      this.serializer = new _emberCliMirageSerializersActiveModelSerializer['default']();\n    }\n  });\n\n  (0, _qunit.test)('normalize works', function (assert) {\n    var payload = {\n      contact: {\n        id: 1,\n        name: 'Link'\n      }\n    };\n    var jsonApiDoc = this.serializer.normalize(payload);\n\n    assert.deepEqual(jsonApiDoc, {\n      data: {\n        type: 'contacts',\n        id: 1,\n        attributes: {\n          name: 'Link'\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it hyphenates snake_cased words', function (assert) {\n    var payload = {\n      contact: {\n        id: 1,\n        first_name: 'Link'\n      }\n    };\n    var jsonApiDoc = this.serializer.normalize(payload);\n\n    assert.deepEqual(jsonApiDoc, {\n      data: {\n        type: 'contacts',\n        id: 1,\n        attributes: {\n          'first-name': 'Link'\n        }\n      }\n    });\n  });\n\n  (0, _qunit.test)('it works without an id', function (assert) {\n    var payload = {\n      contact: {\n        first_name: 'Link',\n        last_name: 'zor'\n      }\n    };\n    var jsonApiDoc = this.serializer.normalize(payload);\n\n    assert.deepEqual(jsonApiDoc, {\n      data: {\n        type: 'contacts',\n        attributes: {\n          'first-name': 'Link',\n          'last-name': 'zor'\n        }\n      }\n    });\n  });\n});","define('dummy/tests/unit/serializers/active-model-serializer-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/serializers/active-model-serializer-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/active-model-serializer-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/serializers/rest-serializer-test', ['exports', 'ember-cli-mirage/serializers/rest-serializer', 'qunit'], function (exports, _emberCliMirageSerializersRestSerializer, _qunit) {\n\n  (0, _qunit.module)('Unit | Serializers | RestSerializer', {\n    beforeEach: function beforeEach() {\n      this.serializer = new _emberCliMirageSerializersRestSerializer['default']();\n    }\n  });\n\n  (0, _qunit.test)('it hyphenates camelized words', function (assert) {\n    var payload = {\n      'person': {\n        'id': 1,\n        'firstName': 'Rick',\n        'lastName': 'Sanchez'\n      }\n    };\n    var jsonApiDoc = this.serializer.normalize(payload);\n\n    assert.deepEqual(jsonApiDoc, {\n      data: {\n        type: 'people',\n        id: 1,\n        attributes: {\n          'first-name': 'Rick',\n          'last-name': 'Sanchez'\n        }\n      }\n    });\n  });\n});","define('dummy/tests/unit/serializers/rest-serializer-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/serializers/rest-serializer-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/rest-serializer-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/server-test', ['exports', 'ember-cli-mirage/server', 'qunit', 'ember-cli-mirage'], function (exports, _emberCliMirageServer, _qunit, _emberCliMirage) {\n\n  (0, _qunit.module)('Unit | Server');\n\n  (0, _qunit.test)('it can be instantiated', function (assert) {\n    var server = new _emberCliMirageServer['default']({ environment: 'test' });\n\n    assert.ok(server);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('it runs the default scenario in non-test environments', function (assert) {\n    assert.expect(1);\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'development',\n      scenarios: {\n        'default': function _default() {\n          assert.ok(true);\n        }\n      }\n    });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.module)('Unit | Server #loadConfig');\n\n  (0, _qunit.test)('forces timing to 0 in test environment', function (assert) {\n    var server = new _emberCliMirageServer['default']({ environment: 'test' });\n\n    server.loadConfig(function () {\n      this.timing = 50;\n    });\n\n    assert.equal(server.timing, 0);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)(\"doesn't modify user's timing config in other environments\", function (assert) {\n    var server = new _emberCliMirageServer['default']({ environment: 'blah' });\n\n    server.loadConfig(function () {\n      this.timing = 50;\n    });\n\n    assert.equal(server.timing, 50);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.module)('Unit | Server #db');\n\n  (0, _qunit.test)('its db is isolated across instances', function (assert) {\n    var server1 = new _emberCliMirageServer['default']({ environment: 'test' });\n\n    server1.db.createCollection('contacts');\n    server1.db.contacts.insert({ name: 'Sam' });\n\n    server1.shutdown();\n\n    var server2 = new _emberCliMirageServer['default']({ environment: 'test' });\n\n    assert.equal(server2.contacts, undefined);\n\n    server2.shutdown();\n  });\n\n  (0, _qunit.module)('Unit | Server #create');\n\n  (0, _qunit.test)('create fails when no factories or models are registered', function (assert) {\n    var server = new _emberCliMirageServer['default']({ environment: 'test' });\n\n    assert.throws(function () {\n      server.create('contact');\n    });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create fails when an expected factory isn\\'t registered', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        address: _emberCliMirage.Factory\n      }\n    });\n\n    assert.throws(function () {\n      server.create('contact');\n    }, /no model or factory was found/);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create works when models but no factories are registered', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      models: {\n        contact: _emberCliMirage.Model\n      }\n    });\n\n    server.create('contact');\n\n    assert.equal(server.db.contacts.length, 1);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create adds the data to the db', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          name: 'Sam'\n        })\n      }\n    });\n\n    server.create('contact');\n    var contactsInDb = server.db.contacts;\n\n    assert.equal(contactsInDb.length, 1);\n    assert.deepEqual(contactsInDb[0], { id: '1', name: 'Sam' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create returns the new data in the db', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          name: 'Sam'\n        })\n      }\n    });\n\n    var contact = server.create('contact');\n\n    assert.deepEqual(contact, { id: '1', name: 'Sam' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows for attr overrides', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          name: 'Sam'\n        })\n      }\n    });\n\n    var sam = server.create('contact');\n    var link = server.create('contact', { name: 'Link' });\n\n    assert.deepEqual(sam, { id: '1', name: 'Sam' });\n    assert.deepEqual(link, { id: '2', name: 'Link' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows for attr overrides with extended factories', function (assert) {\n    var ContactFactory = _emberCliMirage.Factory.extend({\n      name: 'Link',\n      age: 500\n    });\n    var FriendFactory = ContactFactory.extend({\n      is_young: function is_young() {\n        return this.age < 18;\n      }\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: ContactFactory,\n        friend: FriendFactory\n      }\n    });\n\n    var link = server.create('friend');\n    var youngLink = server.create('friend', { age: 10 });\n\n    assert.deepEqual(link, { id: '1', name: 'Link', age: 500, is_young: false });\n    assert.deepEqual(youngLink, { id: '2', name: 'Link', age: 10, is_young: true });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows for attr overrides with arrays', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          name: ['Sam', 'Carl']\n        })\n      }\n    });\n\n    var sam = server.create('contact');\n    var link = server.create('contact', { name: ['Link'] });\n    var noname = server.create('contact', { name: [] });\n\n    assert.deepEqual(sam, { id: '1', name: ['Sam', 'Carl'] });\n    assert.deepEqual(link, { id: '2', name: ['Link'] });\n    assert.deepEqual(noname, { id: '3', name: [] });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows for nested attr overrides', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          address: {\n            streetName: 'Main',\n            streetAddress: function streetAddress(i) {\n              return 1000 + i;\n            }\n          }\n        })\n      }\n    });\n\n    var contact1 = server.create('contact');\n    var contact2 = server.create('contact');\n\n    assert.deepEqual(contact1, { id: '1', address: { streetName: 'Main', streetAddress: 1000 } });\n    assert.deepEqual(contact2, { id: '2', address: { streetName: 'Main', streetAddress: 1001 } });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('factories can have dynamic properties that depend on attr overrides', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        baz: _emberCliMirage.Factory.extend({\n          bar: function bar() {\n            return this.name.substr(1);\n          }\n        })\n      }\n    });\n\n    var baz1 = server.create('baz', { name: 'foo' });\n\n    assert.deepEqual(baz1, { id: '1', name: 'foo', bar: 'oo' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows for arrays of attr overrides', function (assert) {\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        contact: _emberCliMirage.Factory.extend({\n          websites: ['http://example.com', function (i) {\n            return 'http://placekitten.com/' + (320 + i) + '/' + (240 + i);\n          }]\n        })\n      }\n    });\n\n    var contact1 = server.create('contact');\n    var contact2 = server.create('contact');\n\n    assert.deepEqual(contact1, { id: '1', websites: ['http://example.com', 'http://placekitten.com/320/240'] });\n    assert.deepEqual(contact2, { id: '2', websites: ['http://example.com', 'http://placekitten.com/321/241'] });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows to extend factory with trait', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory\n      }\n    });\n\n    var article = server.create('article');\n    var publishedArticle = server.create('article', 'published');\n\n    assert.deepEqual(article, { id: '1', title: 'Lorem ipsum' });\n    assert.deepEqual(publishedArticle, { id: '2', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows to extend factory with multiple traits', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory\n      }\n    });\n\n    var article = server.create('article');\n    var publishedArticle = server.create('article', 'published');\n    var publishedArticleWithContent = server.create('article', 'published', 'withContent');\n\n    assert.deepEqual(article, { id: '1', title: 'Lorem ipsum' });\n    assert.deepEqual(publishedArticle, { id: '2', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00' });\n    assert.deepEqual(publishedArticleWithContent, { id: '3', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows to extend factory with traits containing afterCreate callbacks', function (assert) {\n    var CommentFactory = _emberCliMirage.Factory.extend({\n      content: 'content'\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withComments: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate(article, server) {\n          server.createList('comment', 3, { article: article });\n        }\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        comment: CommentFactory\n      }\n    });\n\n    var articleWithComments = server.create('article', 'withComments');\n\n    assert.deepEqual(articleWithComments, { id: '1', title: 'Lorem ipsum' });\n    assert.equal(server.db.comments.length, 3);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create does not execute afterCreate callbacks from traits that are not applied', function (assert) {\n    var CommentFactory = _emberCliMirage.Factory.extend({\n      content: 'content'\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withComments: (0, _emberCliMirage.trait)({\n        afterCreate: function afterCreate(article, server) {\n          server.createList('comment', 3, { article: article });\n        }\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        comment: CommentFactory\n      }\n    });\n\n    var articleWithComments = server.create('article');\n\n    assert.deepEqual(articleWithComments, { id: '1', title: 'Lorem ipsum' });\n    assert.equal(server.db.comments.length, 0);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows to extend with multiple traits and to apply attr overrides', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory\n      }\n    });\n\n    var overrides = {\n      publishedAt: '2012-01-01 10:00:00'\n    };\n    var publishedArticleWithContent = server.create('article', 'published', 'withContent', overrides);\n\n    assert.deepEqual(publishedArticleWithContent, { id: '1', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create throws errors when using trait that is not defined and distinquishes between traits and non-traits', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      'private': {\n        someAttr: 'value'\n      }\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory\n      }\n    });\n\n    assert.throws(function () {\n      server.create('article', 'private');\n    }, /'private' trait is not registered in 'article' factory/);\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('create allows to create objects with associations', function (assert) {\n    var AuthorFactory = _emberCliMirage.Factory.extend({\n      name: 'Sam'\n    });\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software'\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        awesomeCategory: (0, _emberCliMirage.association)()\n      }),\n\n      author: (0, _emberCliMirage.association)()\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      models: {\n        author: _emberCliMirage.Model.extend({\n          articles: (0, _emberCliMirage.hasMany)()\n        }),\n        category: _emberCliMirage.Model.extend({}),\n        article: _emberCliMirage.Model.extend({\n          author: (0, _emberCliMirage.belongsTo)(),\n          awesomeCategory: (0, _emberCliMirage.belongsTo)('category')\n        })\n      },\n      factories: {\n        article: ArticleFactory,\n        author: AuthorFactory,\n        category: CategoryFactory\n      }\n    });\n\n    var article = server.create('article', 'withCategory');\n\n    assert.deepEqual(article.attrs, { title: 'Lorem ipsum', id: '1', authorId: '1', awesomeCategoryId: '1' });\n    assert.equal(server.db.authors.length, 1);\n    assert.equal(server.db.categories.length, 1);\n\n    var anotherArticle = server.create('article', 'withCategory');\n    assert.deepEqual(anotherArticle.attrs, { title: 'Lorem ipsum', id: '2', authorId: '2', awesomeCategoryId: '2' });\n    assert.equal(server.db.authors.length, 2);\n    assert.equal(server.db.categories.length, 2);\n  });\n\n  (0, _qunit.test)('create allows to create objects with associations with traits and overrides for associations', function (assert) {\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2014-01-01 10:00:00'\n      })\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        category: (0, _emberCliMirage.association)('published', { publishedAt: '2016-01-01 12:00:00' })\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        category: CategoryFactory\n      },\n      models: {\n        category: _emberCliMirage.Model.extend({}),\n        article: _emberCliMirage.Model.extend({\n          category: (0, _emberCliMirage.belongsTo)('category')\n        })\n      }\n    });\n\n    var article = server.create('article', 'withCategory');\n\n    assert.deepEqual(article.attrs, { title: 'Lorem ipsum', id: '1', categoryId: '1' });\n    assert.equal(server.db.categories.length, 1);\n    assert.deepEqual(server.db.categories[0], { name: 'splendid software', id: '1', isPublished: true, publishedAt: '2016-01-01 12:00:00' });\n  });\n\n  (0, _qunit.module)('Unit | Server #createList', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({ environment: 'test' });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('createList adds the given number of elements to the db', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    this.server.createList('contact', 3);\n    var contactsInDb = this.server.db.contacts;\n\n    assert.equal(contactsInDb.length, 3);\n    assert.deepEqual(contactsInDb[0], { id: '1', name: 'Sam' });\n    assert.deepEqual(contactsInDb[1], { id: '2', name: 'Sam' });\n    assert.deepEqual(contactsInDb[2], { id: '3', name: 'Sam' });\n  });\n\n  (0, _qunit.test)('createList returns the created elements', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    this.server.create('contact');\n    var contacts = this.server.createList('contact', 3);\n\n    assert.equal(contacts.length, 3);\n    assert.deepEqual(contacts[0], { id: '2', name: 'Sam' });\n    assert.deepEqual(contacts[1], { id: '3', name: 'Sam' });\n    assert.deepEqual(contacts[2], { id: '4', name: 'Sam' });\n  });\n\n  (0, _qunit.test)('createList respects sequences', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({\n        name: function name(i) {\n          return 'name' + i;\n        }\n      })\n    });\n\n    var contacts = this.server.createList('contact', 3);\n\n    assert.deepEqual(contacts[0], { id: '1', name: 'name0' });\n    assert.deepEqual(contacts[1], { id: '2', name: 'name1' });\n    assert.deepEqual(contacts[2], { id: '3', name: 'name2' });\n  });\n\n  (0, _qunit.test)('createList respects attr overrides', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    var sams = this.server.createList('contact', 2);\n    var links = this.server.createList('contact', 2, { name: 'Link' });\n\n    assert.deepEqual(sams[0], { id: '1', name: 'Sam' });\n    assert.deepEqual(sams[1], { id: '2', name: 'Sam' });\n    assert.deepEqual(links[0], { id: '3', name: 'Link' });\n    assert.deepEqual(links[1], { id: '4', name: 'Link' });\n  });\n\n  (0, _qunit.test)('createList respects traits', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var articles = this.server.createList('article', 2, 'published', 'withContent');\n\n    assert.deepEqual(articles[0], { id: '1', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n    assert.deepEqual(articles[1], { id: '2', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('createList respects traits with attr overrides', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var overrides = { publishedAt: '2012-01-01 10:00:00' };\n    var articles = this.server.createList('article', 2, 'published', 'withContent', overrides);\n\n    assert.deepEqual(articles[0], { id: '1', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n    assert.deepEqual(articles[1], { id: '2', title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('createList throws errors when using trait that is not defined and distinquishes between traits and non-traits', function (assert) {\n    var _this = this;\n\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      'private': {\n        someAttr: 'value'\n      }\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    assert.throws(function () {\n      _this.server.createList('article', 2, 'private');\n    }, /'private' trait is not registered in 'article' factory/);\n  });\n\n  (0, _qunit.test)('createList throws an error if the second argument is not an integer', function (assert) {\n    var _this2 = this;\n\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    assert.throws(function () {\n      _this2.server.createList('article', 'published');\n    }, /second argument has to be an integer, you passed: string/);\n  });\n\n  (0, _qunit.module)('Unit | Server #build', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({ environment: 'test' });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('build does not add the data to the db', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    this.server.build('contact');\n    var contactsInDb = this.server.db.contacts;\n\n    assert.equal(contactsInDb.length, 0);\n  });\n\n  (0, _qunit.test)('build returns the new attrs with no id', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    var contact = this.server.build('contact');\n\n    assert.deepEqual(contact, { name: 'Sam' });\n  });\n\n  (0, _qunit.test)('build allows for attr overrides', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    var sam = this.server.build('contact');\n    var link = this.server.build('contact', { name: 'Link' });\n\n    assert.deepEqual(sam, { name: 'Sam' });\n    assert.deepEqual(link, { name: 'Link' });\n  });\n\n  (0, _qunit.test)('build allows for attr overrides with extended factories', function (assert) {\n    var ContactFactory = _emberCliMirage.Factory.extend({\n      name: 'Link',\n      age: 500\n    });\n    var FriendFactory = ContactFactory.extend({\n      is_young: function is_young() {\n        return this.age < 18;\n      }\n    });\n    this.server.loadFactories({\n      contact: ContactFactory,\n      friend: FriendFactory\n    });\n\n    var link = this.server.build('friend');\n    var youngLink = this.server.build('friend', { age: 10 });\n\n    assert.deepEqual(link, { name: 'Link', age: 500, is_young: false });\n    assert.deepEqual(youngLink, { name: 'Link', age: 10, is_young: true });\n  });\n\n  (0, _qunit.test)('build allows for attr overrides with arrays', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: ['Sam', 'Carl'] })\n    });\n\n    var sam = this.server.build('contact');\n    var link = this.server.build('contact', { name: ['Link'] });\n    var noname = this.server.build('contact', { name: [] });\n\n    assert.deepEqual(sam, { name: ['Sam', 'Carl'] });\n    assert.deepEqual(link, { name: ['Link'] });\n    assert.deepEqual(noname, { name: [] });\n  });\n\n  (0, _qunit.test)('build allows for nested attr overrides', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({\n        address: {\n          streetName: 'Main',\n          streetAddress: function streetAddress(i) {\n            return 1000 + i;\n          }\n        }\n      })\n    });\n\n    var contact1 = this.server.build('contact');\n    var contact2 = this.server.build('contact');\n\n    assert.deepEqual(contact1, { address: { streetName: 'Main', streetAddress: 1000 } });\n    assert.deepEqual(contact2, { address: { streetName: 'Main', streetAddress: 1001 } });\n  });\n\n  (0, _qunit.test)('build allows for arrays of attr overrides', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({\n        websites: ['http://example.com', function (i) {\n          return 'http://placekitten.com/' + (320 + i) + '/' + (240 + i);\n        }]\n      })\n    });\n\n    var contact1 = this.server.build('contact');\n    var contact2 = this.server.build('contact');\n\n    assert.deepEqual(contact1, { websites: ['http://example.com', 'http://placekitten.com/320/240'] });\n    assert.deepEqual(contact2, { websites: ['http://example.com', 'http://placekitten.com/321/241'] });\n  });\n\n  (0, _qunit.test)('build allows to extend factory with trait', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var article = this.server.build('article');\n    var publishedArticle = this.server.build('article', 'published');\n\n    assert.deepEqual(article, { title: 'Lorem ipsum' });\n    assert.deepEqual(publishedArticle, { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00' });\n  });\n\n  (0, _qunit.test)('build allows to extend factory with multiple traits', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var article = this.server.build('article');\n    var publishedArticle = this.server.build('article', 'published');\n    var publishedArticleWithContent = this.server.build('article', 'published', 'withContent');\n\n    assert.deepEqual(article, { title: 'Lorem ipsum' });\n    assert.deepEqual(publishedArticle, { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00' });\n    assert.deepEqual(publishedArticleWithContent, { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('build allows to extend with multiple traits and to apply attr overrides', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var overrides = {\n      publishedAt: '2012-01-01 10:00:00'\n    };\n    var publishedArticleWithContent = this.server.build('article', 'published', 'withContent', overrides);\n\n    assert.deepEqual(publishedArticleWithContent, { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('build allows to build objects with associations', function (assert) {\n    var AuthorFactory = _emberCliMirage.Factory.extend({\n      name: 'Yehuda'\n    });\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software'\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        awesomeCategory: (0, _emberCliMirage.association)()\n      }),\n\n      someOtherTrait: (0, _emberCliMirage.trait)({\n        user: (0, _emberCliMirage.association)()\n      }),\n\n      author: (0, _emberCliMirage.association)()\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory,\n      author: AuthorFactory,\n      category: CategoryFactory\n    });\n    this.server.schema.registerModels({\n      author: _emberCliMirage.Model.extend({\n        articles: (0, _emberCliMirage.hasMany)()\n      }),\n      category: _emberCliMirage.Model.extend({}),\n      article: _emberCliMirage.Model.extend({\n        author: (0, _emberCliMirage.belongsTo)(),\n        awesomeCategory: (0, _emberCliMirage.belongsTo)('category')\n      })\n    });\n\n    var article = this.server.build('article', 'withCategory');\n\n    assert.deepEqual(article, { title: 'Lorem ipsum', authorId: '1', awesomeCategoryId: '1' });\n    assert.equal(server.db.authors.length, 1);\n    assert.equal(server.db.categories.length, 1);\n  });\n\n  (0, _qunit.test)('build allows to build objects with associations with traits and overrides for associations', function (assert) {\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2014-01-01 10:00:00'\n      })\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        category: (0, _emberCliMirage.association)('published', { publishedAt: '2016-01-01 12:00:00' })\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        category: CategoryFactory\n      },\n      models: {\n        category: _emberCliMirage.Model.extend({}),\n        article: _emberCliMirage.Model.extend({\n          category: (0, _emberCliMirage.belongsTo)()\n        })\n      }\n    });\n\n    var article = server.build('article', 'withCategory');\n\n    assert.deepEqual(article, { title: 'Lorem ipsum', categoryId: '1' });\n    assert.equal(server.db.categories.length, 1);\n    assert.deepEqual(server.db.categories[0], { name: 'splendid software', id: '1', isPublished: true, publishedAt: '2016-01-01 12:00:00' });\n  });\n\n  (0, _qunit.test)('build throws errors when using trait that is not defined and distinquishes between traits and non-traits', function (assert) {\n    var _this3 = this;\n\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      'private': {\n        someAttr: 'value'\n      }\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    assert.throws(function () {\n      _this3.server.build('article', 'private');\n    }, /'private' trait is not registered in 'article' factory/);\n  });\n\n  (0, _qunit.test)('build does not build objects and throws error if model is not registered and association helper is used', function (assert) {\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2014-01-01 10:00:00'\n      })\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        category: (0, _emberCliMirage.association)('published', { publishedAt: '2016-01-01 12:00:00' })\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        category: CategoryFactory\n      },\n      models: {\n        category: _emberCliMirage.Model.extend({})\n      }\n    });\n\n    assert.throws(function () {\n      server.build('article', 'withCategory');\n    }, /Model not registered: article/);\n  });\n\n  (0, _qunit.test)('build does not build objects and throws error if model for given association is not registered', function (assert) {\n    var CategoryFactory = _emberCliMirage.Factory.extend({\n      name: 'splendid software',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2014-01-01 10:00:00'\n      })\n    });\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      withCategory: (0, _emberCliMirage.trait)({\n        category: (0, _emberCliMirage.association)('published', { publishedAt: '2016-01-01 12:00:00' })\n      })\n    });\n\n    var server = new _emberCliMirageServer['default']({\n      environment: 'test',\n      factories: {\n        article: ArticleFactory,\n        category: CategoryFactory\n      },\n      models: {\n        article: _emberCliMirage.Model.extend()\n      }\n    });\n\n    assert.throws(function () {\n      server.build('article', 'withCategory');\n    }, /You're using the `association` factory helper on the 'category' attribute/);\n  });\n\n  (0, _qunit.module)('Unit | Server #buildList', {\n    beforeEach: function beforeEach() {\n      this.server = new _emberCliMirageServer['default']({ environment: 'test' });\n    },\n    afterEach: function afterEach() {\n      this.server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('buildList does not add elements to the db', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    this.server.buildList('contact', 3);\n    var contactsInDb = this.server.db.contacts;\n\n    assert.equal(contactsInDb.length, 0);\n  });\n\n  (0, _qunit.test)('buildList returns the built elements without ids', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    this.server.create('contact');\n    var contacts = this.server.buildList('contact', 3);\n\n    assert.equal(contacts.length, 3);\n    assert.deepEqual(contacts[0], { name: 'Sam' });\n    assert.deepEqual(contacts[1], { name: 'Sam' });\n    assert.deepEqual(contacts[2], { name: 'Sam' });\n  });\n\n  (0, _qunit.test)('buildList respects sequences', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({\n        name: function name(i) {\n          return 'name' + i;\n        }\n      })\n    });\n\n    var contacts = this.server.buildList('contact', 3);\n\n    assert.deepEqual(contacts[0], { name: 'name0' });\n    assert.deepEqual(contacts[1], { name: 'name1' });\n    assert.deepEqual(contacts[2], { name: 'name2' });\n  });\n\n  (0, _qunit.test)('buildList respects attr overrides', function (assert) {\n    this.server.loadFactories({\n      contact: _emberCliMirage.Factory.extend({ name: 'Sam' })\n    });\n\n    var sams = this.server.buildList('contact', 2);\n    var links = this.server.buildList('contact', 2, { name: 'Link' });\n\n    assert.deepEqual(sams[0], { name: 'Sam' });\n    assert.deepEqual(sams[1], { name: 'Sam' });\n    assert.deepEqual(links[0], { name: 'Link' });\n    assert.deepEqual(links[1], { name: 'Link' });\n  });\n\n  (0, _qunit.test)('buildList respects traits', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var articles = this.server.buildList('article', 2, 'published', 'withContent');\n\n    assert.deepEqual(articles[0], { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n    assert.deepEqual(articles[1], { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2010-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('buildList respects traits with attr overrides', function (assert) {\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      withContent: (0, _emberCliMirage.trait)({\n        content: 'content'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    var overrides = { publishedAt: '2012-01-01 10:00:00' };\n    var articles = this.server.buildList('article', 2, 'published', 'withContent', overrides);\n\n    assert.deepEqual(articles[0], { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n    assert.deepEqual(articles[1], { title: 'Lorem ipsum', isPublished: true,\n      publishedAt: '2012-01-01 10:00:00', content: 'content' });\n  });\n\n  (0, _qunit.test)('buildList throws errors when using trait that is not defined and distinquishes between traits and non-traits', function (assert) {\n    var _this4 = this;\n\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      }),\n\n      'private': {\n        someAttr: 'value'\n      }\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    assert.throws(function () {\n      _this4.server.buildList('article', 2, 'private');\n    }, /'private' trait is not registered in 'article' factory/);\n  });\n\n  (0, _qunit.test)('buildList throws an error if the second argument is not an integer', function (assert) {\n    var _this5 = this;\n\n    var ArticleFactory = _emberCliMirage.Factory.extend({\n      title: 'Lorem ipsum',\n\n      published: (0, _emberCliMirage.trait)({\n        isPublished: true,\n        publishedAt: '2010-01-01 10:00:00'\n      })\n    });\n\n    this.server.loadFactories({\n      article: ArticleFactory\n    });\n\n    assert.throws(function () {\n      _this5.server.buildList('article', 'published');\n    }, /second argument has to be an integer, you passed: string/);\n  });\n\n  (0, _qunit.module)('Unit | Server #defaultPassthroughs');\n\n  (0, _qunit.test)('server configures default passthroughs when useDefaultPassthroughs is true', function (assert) {\n    var server = new _emberCliMirageServer['default']({ useDefaultPassthroughs: true });\n\n    assert.expect(_emberCliMirageServer.defaultPassthroughs.length);\n    _emberCliMirageServer.defaultPassthroughs.forEach(function (passthroughUrl) {\n      var passthroughRequest = { method: 'GET', url: passthroughUrl };\n      var isPassedThrough = server.pretender.checkPassthrough(passthroughRequest);\n\n      assert.ok(isPassedThrough);\n    });\n\n    server.shutdown();\n  });\n\n  (0, _qunit.test)('server does not configure default passthroughs when useDefaultPassthroughs is false', function (assert) {\n    var server = new _emberCliMirageServer['default']({ useDefaultPassthroughs: false });\n\n    assert.expect(_emberCliMirageServer.defaultPassthroughs.length);\n    _emberCliMirageServer.defaultPassthroughs.forEach(function (passthroughUrl) {\n      var passthroughRequest = { method: 'GET', url: passthroughUrl };\n      var isPassedThrough = server.pretender.checkPassthrough(passthroughRequest);\n\n      assert.ok(!isPassedThrough);\n    });\n\n    server.shutdown();\n  });\n});","define('dummy/tests/unit/server-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/server-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/server-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/utils/normalize-name-test', ['exports', 'ember-cli-mirage/utils/normalize-name', 'ember-inflector', 'qunit'], function (exports, _emberCliMirageUtilsNormalizeName, _emberInflector, _qunit) {\n\n  (0, _qunit.module)('Unit | Normalize name');\n\n  (0, _qunit.test)('can convert Model name to DbCollection name', function (assert) {\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toCollectionName)('test'), 'tests');\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toCollectionName)('hard-test'), 'hardTests');\n  });\n\n  (0, _qunit.test)('can convert DbCollection name to Model name', function (assert) {\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toModelName)('tests'), 'test');\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toModelName)('hardTests'), 'hard-test');\n  });\n\n  (0, _qunit.test)('can convert Model name to DbCollection using custom inflector rules', function (assert) {\n    _emberInflector['default'].inflector.irregular('head-of-state', 'heads-of-state');\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toCollectionName)('head-of-state'), 'headsOfState');\n  });\n\n  (0, _qunit.test)('can convert DbCollection name to Model name using custom inflector rules', function (assert) {\n    _emberInflector['default'].inflector.irregular('head-of-state', 'heads-of-state');\n    assert.equal((0, _emberCliMirageUtilsNormalizeName.toModelName)('headsOfState'), 'head-of-state');\n  });\n});","define('dummy/tests/unit/utils/normalize-name-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/normalize-name-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/normalize-name-test.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttlrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpljCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvhnxljhpthCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpcrnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzpzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnlvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}